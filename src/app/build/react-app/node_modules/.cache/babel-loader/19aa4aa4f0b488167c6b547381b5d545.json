{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Storage = void 0;\n\nvar lisk_db_1 = require(\"@liskhq/lisk-db\");\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar constants_1 = require(\"./constants\");\n\nvar utils_1 = require(\"../utils\");\n\nvar schema_1 = require(\"../schema\");\n\nvar Storage = /*#__PURE__*/function () {\n  function Storage(db) {\n    _classCallCheck(this, Storage);\n\n    this._db = db;\n  }\n\n  _createClass(Storage, [{\n    key: \"getBlockHeaderByID\",\n    value: function () {\n      var _getBlockHeaderByID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n        var block;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._db.get(\"\".concat(constants_1.DB_KEY_BLOCKS_ID, \":\").concat(utils_1.keyString(id)));\n\n              case 2:\n                block = _context.sent;\n                return _context.abrupt(\"return\", block);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getBlockHeaderByID(_x) {\n        return _getBlockHeaderByID.apply(this, arguments);\n      }\n\n      return getBlockHeaderByID;\n    }()\n  }, {\n    key: \"getBlockHeadersByIDs\",\n    value: function () {\n      var _getBlockHeadersByIDs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(arrayOfBlockIds) {\n        var blocks, _iterator, _step, id, block;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                blocks = [];\n                _iterator = _createForOfIteratorHelper(arrayOfBlockIds);\n                _context2.prev = 2;\n\n                _iterator.s();\n\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                id = _step.value;\n                _context2.prev = 6;\n                _context2.next = 9;\n                return this._db.get(\"\".concat(constants_1.DB_KEY_BLOCKS_ID, \":\").concat(utils_1.keyString(id)));\n\n              case 9:\n                block = _context2.sent;\n                blocks.push(block);\n                _context2.next = 18;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t0 = _context2[\"catch\"](6);\n\n                if (!(_context2.t0 instanceof lisk_db_1.NotFoundError)) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                return _context2.abrupt(\"continue\", 18);\n\n              case 17:\n                throw _context2.t0;\n\n              case 18:\n                _context2.next = 4;\n                break;\n\n              case 20:\n                _context2.next = 25;\n                break;\n\n              case 22:\n                _context2.prev = 22;\n                _context2.t1 = _context2[\"catch\"](2);\n\n                _iterator.e(_context2.t1);\n\n              case 25:\n                _context2.prev = 25;\n\n                _iterator.f();\n\n                return _context2.finish(25);\n\n              case 28:\n                return _context2.abrupt(\"return\", blocks);\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 22, 25, 28], [6, 13]]);\n      }));\n\n      function getBlockHeadersByIDs(_x2) {\n        return _getBlockHeadersByIDs.apply(this, arguments);\n      }\n\n      return getBlockHeadersByIDs;\n    }()\n  }, {\n    key: \"getBlockHeaderByHeight\",\n    value: function () {\n      var _getBlockHeaderByHeight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(height) {\n        var stringHeight, id;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                stringHeight = lisk_db_1.formatInt(height);\n                _context3.next = 3;\n                return this._db.get(\"\".concat(constants_1.DB_KEY_BLOCKS_HEIGHT, \":\").concat(stringHeight));\n\n              case 3:\n                id = _context3.sent;\n                return _context3.abrupt(\"return\", this.getBlockHeaderByID(id));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getBlockHeaderByHeight(_x3) {\n        return _getBlockHeaderByHeight.apply(this, arguments);\n      }\n\n      return getBlockHeaderByHeight;\n    }()\n  }, {\n    key: \"getBlockHeadersByHeightBetween\",\n    value: function () {\n      var _getBlockHeadersByHeightBetween = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(fromHeight, toHeight) {\n        var stream, blockIDs;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                stream = this._db.createReadStream({\n                  gte: \"\".concat(constants_1.DB_KEY_BLOCKS_HEIGHT, \":\").concat(lisk_db_1.formatInt(fromHeight)),\n                  lte: \"\".concat(constants_1.DB_KEY_BLOCKS_HEIGHT, \":\").concat(lisk_db_1.formatInt(toHeight)),\n                  reverse: true\n                });\n                _context4.next = 3;\n                return new Promise(function (resolve, reject) {\n                  var ids = [];\n                  stream.on('data', function (_ref) {\n                    var value = _ref.value;\n                    ids.push(value);\n                  }).on('error', function (error) {\n                    reject(error);\n                  }).on('end', function () {\n                    resolve(ids);\n                  });\n                });\n\n              case 3:\n                blockIDs = _context4.sent;\n                return _context4.abrupt(\"return\", this.getBlockHeadersByIDs(blockIDs));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getBlockHeadersByHeightBetween(_x4, _x5) {\n        return _getBlockHeadersByHeightBetween.apply(this, arguments);\n      }\n\n      return getBlockHeadersByHeightBetween;\n    }()\n  }, {\n    key: \"getBlockHeadersWithHeights\",\n    value: function () {\n      var _getBlockHeadersWithHeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(heightList) {\n        var blocks, _iterator2, _step2, height, block;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                blocks = [];\n                _iterator2 = _createForOfIteratorHelper(heightList);\n                _context5.prev = 2;\n\n                _iterator2.s();\n\n              case 4:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context5.next = 20;\n                  break;\n                }\n\n                height = _step2.value;\n                _context5.prev = 6;\n                _context5.next = 9;\n                return this.getBlockHeaderByHeight(height);\n\n              case 9:\n                block = _context5.sent;\n                blocks.push(block);\n                _context5.next = 18;\n                break;\n\n              case 13:\n                _context5.prev = 13;\n                _context5.t0 = _context5[\"catch\"](6);\n\n                if (!(_context5.t0 instanceof lisk_db_1.NotFoundError)) {\n                  _context5.next = 17;\n                  break;\n                }\n\n                return _context5.abrupt(\"continue\", 18);\n\n              case 17:\n                throw _context5.t0;\n\n              case 18:\n                _context5.next = 4;\n                break;\n\n              case 20:\n                _context5.next = 25;\n                break;\n\n              case 22:\n                _context5.prev = 22;\n                _context5.t1 = _context5[\"catch\"](2);\n\n                _iterator2.e(_context5.t1);\n\n              case 25:\n                _context5.prev = 25;\n\n                _iterator2.f();\n\n                return _context5.finish(25);\n\n              case 28:\n                return _context5.abrupt(\"return\", blocks);\n\n              case 29:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[2, 22, 25, 28], [6, 13]]);\n      }));\n\n      function getBlockHeadersWithHeights(_x6) {\n        return _getBlockHeadersWithHeights.apply(this, arguments);\n      }\n\n      return getBlockHeadersWithHeights;\n    }()\n  }, {\n    key: \"getLastBlockHeader\",\n    value: function () {\n      var _getLastBlockHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var stream, _yield$Promise, _yield$Promise2, blockID;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                stream = this._db.createReadStream({\n                  gte: lisk_db_1.getFirstPrefix(constants_1.DB_KEY_BLOCKS_HEIGHT),\n                  lte: lisk_db_1.getLastPrefix(constants_1.DB_KEY_BLOCKS_HEIGHT),\n                  reverse: true,\n                  limit: 1\n                });\n                _context6.next = 3;\n                return new Promise(function (resolve, reject) {\n                  var ids = [];\n                  stream.on('data', function (_ref2) {\n                    var value = _ref2.value;\n                    ids.push(value);\n                  }).on('error', function (error) {\n                    reject(error);\n                  }).on('end', function () {\n                    resolve(ids);\n                  });\n                });\n\n              case 3:\n                _yield$Promise = _context6.sent;\n                _yield$Promise2 = _slicedToArray(_yield$Promise, 1);\n                blockID = _yield$Promise2[0];\n\n                if (blockID) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                throw new lisk_db_1.NotFoundError('Last block header not found');\n\n              case 8:\n                return _context6.abrupt(\"return\", this.getBlockHeaderByID(blockID));\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getLastBlockHeader() {\n        return _getLastBlockHeader.apply(this, arguments);\n      }\n\n      return getLastBlockHeader;\n    }()\n  }, {\n    key: \"getBlockByID\",\n    value: function () {\n      var _getBlockByID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(id) {\n        var blockHeader, transactions;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.getBlockHeaderByID(id);\n\n              case 2:\n                blockHeader = _context7.sent;\n                _context7.next = 5;\n                return this._getTransactions(id);\n\n              case 5:\n                transactions = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  header: blockHeader,\n                  payload: transactions\n                });\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getBlockByID(_x7) {\n        return _getBlockByID.apply(this, arguments);\n      }\n\n      return getBlockByID;\n    }()\n  }, {\n    key: \"getBlocksByIDs\",\n    value: function () {\n      var _getBlocksByIDs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(arrayOfBlockIds) {\n        var blocks, _iterator3, _step3, id, block;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                blocks = [];\n                _iterator3 = _createForOfIteratorHelper(arrayOfBlockIds);\n                _context8.prev = 2;\n\n                _iterator3.s();\n\n              case 4:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context8.next = 20;\n                  break;\n                }\n\n                id = _step3.value;\n                _context8.prev = 6;\n                _context8.next = 9;\n                return this.getBlockByID(id);\n\n              case 9:\n                block = _context8.sent;\n                blocks.push(block);\n                _context8.next = 18;\n                break;\n\n              case 13:\n                _context8.prev = 13;\n                _context8.t0 = _context8[\"catch\"](6);\n\n                if (!(_context8.t0 instanceof lisk_db_1.NotFoundError)) {\n                  _context8.next = 17;\n                  break;\n                }\n\n                return _context8.abrupt(\"continue\", 18);\n\n              case 17:\n                throw _context8.t0;\n\n              case 18:\n                _context8.next = 4;\n                break;\n\n              case 20:\n                _context8.next = 25;\n                break;\n\n              case 22:\n                _context8.prev = 22;\n                _context8.t1 = _context8[\"catch\"](2);\n\n                _iterator3.e(_context8.t1);\n\n              case 25:\n                _context8.prev = 25;\n\n                _iterator3.f();\n\n                return _context8.finish(25);\n\n              case 28:\n                return _context8.abrupt(\"return\", blocks);\n\n              case 29:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[2, 22, 25, 28], [6, 13]]);\n      }));\n\n      function getBlocksByIDs(_x8) {\n        return _getBlocksByIDs.apply(this, arguments);\n      }\n\n      return getBlocksByIDs;\n    }()\n  }, {\n    key: \"getBlockByHeight\",\n    value: function () {\n      var _getBlockByHeight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(height) {\n        var header, blockID, transactions;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.getBlockHeaderByHeight(height);\n\n              case 2:\n                header = _context9.sent;\n                blockID = lisk_cryptography_1.hash(header);\n                _context9.next = 6;\n                return this._getTransactions(blockID);\n\n              case 6:\n                transactions = _context9.sent;\n                return _context9.abrupt(\"return\", {\n                  header: header,\n                  payload: transactions\n                });\n\n              case 8:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getBlockByHeight(_x9) {\n        return _getBlockByHeight.apply(this, arguments);\n      }\n\n      return getBlockByHeight;\n    }()\n  }, {\n    key: \"getBlocksByHeightBetween\",\n    value: function () {\n      var _getBlocksByHeightBetween = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(fromHeight, toHeight) {\n        var headers, blocks, _iterator4, _step4, header, blockID, transactions;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.getBlockHeadersByHeightBetween(fromHeight, toHeight);\n\n              case 2:\n                headers = _context10.sent;\n                blocks = [];\n                _iterator4 = _createForOfIteratorHelper(headers);\n                _context10.prev = 5;\n\n                _iterator4.s();\n\n              case 7:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context10.next = 16;\n                  break;\n                }\n\n                header = _step4.value;\n                blockID = lisk_cryptography_1.hash(header);\n                _context10.next = 12;\n                return this._getTransactions(blockID);\n\n              case 12:\n                transactions = _context10.sent;\n                blocks.push({\n                  header: header,\n                  payload: transactions\n                });\n\n              case 14:\n                _context10.next = 7;\n                break;\n\n              case 16:\n                _context10.next = 21;\n                break;\n\n              case 18:\n                _context10.prev = 18;\n                _context10.t0 = _context10[\"catch\"](5);\n\n                _iterator4.e(_context10.t0);\n\n              case 21:\n                _context10.prev = 21;\n\n                _iterator4.f();\n\n                return _context10.finish(21);\n\n              case 24:\n                return _context10.abrupt(\"return\", blocks);\n\n              case 25:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[5, 18, 21, 24]]);\n      }));\n\n      function getBlocksByHeightBetween(_x10, _x11) {\n        return _getBlocksByHeightBetween.apply(this, arguments);\n      }\n\n      return getBlocksByHeightBetween;\n    }()\n  }, {\n    key: \"getLastBlock\",\n    value: function () {\n      var _getLastBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var header, blockID, transactions;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.getLastBlockHeader();\n\n              case 2:\n                header = _context11.sent;\n                blockID = lisk_cryptography_1.hash(header);\n                _context11.next = 6;\n                return this._getTransactions(blockID);\n\n              case 6:\n                transactions = _context11.sent;\n                return _context11.abrupt(\"return\", {\n                  header: header,\n                  payload: transactions\n                });\n\n              case 8:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getLastBlock() {\n        return _getLastBlock.apply(this, arguments);\n      }\n\n      return getLastBlock;\n    }()\n  }, {\n    key: \"getTempBlocks\",\n    value: function () {\n      var _getTempBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var stream, tempBlocks;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                stream = this._db.createReadStream({\n                  gte: lisk_db_1.getFirstPrefix(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT),\n                  lte: lisk_db_1.getLastPrefix(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT),\n                  reverse: true\n                });\n                _context12.next = 3;\n                return new Promise(function (resolve, reject) {\n                  var blocks = [];\n                  stream.on('data', function (_ref3) {\n                    var value = _ref3.value;\n                    blocks.push(value);\n                  }).on('error', function (error) {\n                    reject(error);\n                  }).on('end', function () {\n                    resolve(blocks);\n                  });\n                });\n\n              case 3:\n                tempBlocks = _context12.sent;\n                return _context12.abrupt(\"return\", tempBlocks);\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getTempBlocks() {\n        return _getTempBlocks.apply(this, arguments);\n      }\n\n      return getTempBlocks;\n    }()\n  }, {\n    key: \"isTempBlockEmpty\",\n    value: function () {\n      var _isTempBlockEmpty = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var stream, tempBlocks;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                stream = this._db.createReadStream({\n                  gte: lisk_db_1.getFirstPrefix(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT),\n                  lte: lisk_db_1.getLastPrefix(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT),\n                  limit: 1\n                });\n                _context13.next = 3;\n                return new Promise(function (resolve, reject) {\n                  var blocks = [];\n                  stream.on('data', function (_ref4) {\n                    var value = _ref4.value;\n                    blocks.push(value);\n                  }).on('error', function (error) {\n                    reject(error);\n                  }).on('end', function () {\n                    resolve(blocks);\n                  });\n                });\n\n              case 3:\n                tempBlocks = _context13.sent;\n                return _context13.abrupt(\"return\", tempBlocks.length === 0);\n\n              case 5:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function isTempBlockEmpty() {\n        return _isTempBlockEmpty.apply(this, arguments);\n      }\n\n      return isTempBlockEmpty;\n    }()\n  }, {\n    key: \"clearTempBlocks\",\n    value: function () {\n      var _clearTempBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this._db.clear({\n                  gte: lisk_db_1.getFirstPrefix(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT),\n                  lte: lisk_db_1.getLastPrefix(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT)\n                });\n\n              case 2:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function clearTempBlocks() {\n        return _clearTempBlocks.apply(this, arguments);\n      }\n\n      return clearTempBlocks;\n    }()\n  }, {\n    key: \"isBlockPersisted\",\n    value: function () {\n      var _isBlockPersisted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(blockID) {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                return _context15.abrupt(\"return\", this._db.exists(\"\".concat(constants_1.DB_KEY_BLOCKS_ID, \":\").concat(utils_1.keyString(blockID))));\n\n              case 1:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function isBlockPersisted(_x12) {\n        return _isBlockPersisted.apply(this, arguments);\n      }\n\n      return isBlockPersisted;\n    }()\n  }, {\n    key: \"getChainState\",\n    value: function () {\n      var _getChainState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(key) {\n        var value;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.prev = 0;\n                _context16.next = 3;\n                return this._db.get(\"\".concat(constants_1.DB_KEY_CHAIN_STATE, \":\").concat(key));\n\n              case 3:\n                value = _context16.sent;\n                return _context16.abrupt(\"return\", value);\n\n              case 7:\n                _context16.prev = 7;\n                _context16.t0 = _context16[\"catch\"](0);\n\n                if (!(_context16.t0 instanceof lisk_db_1.NotFoundError)) {\n                  _context16.next = 11;\n                  break;\n                }\n\n                return _context16.abrupt(\"return\", undefined);\n\n              case 11:\n                throw _context16.t0;\n\n              case 12:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this, [[0, 7]]);\n      }));\n\n      function getChainState(_x13) {\n        return _getChainState.apply(this, arguments);\n      }\n\n      return getChainState;\n    }()\n  }, {\n    key: \"getConsensusState\",\n    value: function () {\n      var _getConsensusState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(key) {\n        var value;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.prev = 0;\n                _context17.next = 3;\n                return this._db.get(\"\".concat(constants_1.DB_KEY_CONSENSUS_STATE, \":\").concat(key));\n\n              case 3:\n                value = _context17.sent;\n                return _context17.abrupt(\"return\", value);\n\n              case 7:\n                _context17.prev = 7;\n                _context17.t0 = _context17[\"catch\"](0);\n\n                if (!(_context17.t0 instanceof lisk_db_1.NotFoundError)) {\n                  _context17.next = 11;\n                  break;\n                }\n\n                return _context17.abrupt(\"return\", undefined);\n\n              case 11:\n                throw _context17.t0;\n\n              case 12:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this, [[0, 7]]);\n      }));\n\n      function getConsensusState(_x14) {\n        return _getConsensusState.apply(this, arguments);\n      }\n\n      return getConsensusState;\n    }()\n  }, {\n    key: \"setConsensusState\",\n    value: function () {\n      var _setConsensusState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(key, val) {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this._db.put(\"\".concat(constants_1.DB_KEY_CONSENSUS_STATE, \":\").concat(key), val);\n\n              case 2:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function setConsensusState(_x15, _x16) {\n        return _setConsensusState.apply(this, arguments);\n      }\n\n      return setConsensusState;\n    }()\n  }, {\n    key: \"getAccountByAddress\",\n    value: function () {\n      var _getAccountByAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(address) {\n        var account;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this._db.get(\"\".concat(constants_1.DB_KEY_ACCOUNTS_ADDRESS, \":\").concat(utils_1.keyString(address)));\n\n              case 2:\n                account = _context19.sent;\n                return _context19.abrupt(\"return\", account);\n\n              case 4:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function getAccountByAddress(_x17) {\n        return _getAccountByAddress.apply(this, arguments);\n      }\n\n      return getAccountByAddress;\n    }()\n  }, {\n    key: \"getAccountsByPublicKey\",\n    value: function () {\n      var _getAccountsByPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(arrayOfPublicKeys) {\n        var addresses;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                addresses = arrayOfPublicKeys.map(lisk_cryptography_1.getAddressFromPublicKey);\n                return _context20.abrupt(\"return\", this.getAccountsByAddress(addresses));\n\n              case 2:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function getAccountsByPublicKey(_x18) {\n        return _getAccountsByPublicKey.apply(this, arguments);\n      }\n\n      return getAccountsByPublicKey;\n    }()\n  }, {\n    key: \"getAccountsByAddress\",\n    value: function () {\n      var _getAccountsByAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(arrayOfAddresses) {\n        var accounts, _iterator5, _step5, address, account;\n\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                accounts = [];\n                _iterator5 = _createForOfIteratorHelper(arrayOfAddresses);\n                _context21.prev = 2;\n\n                _iterator5.s();\n\n              case 4:\n                if ((_step5 = _iterator5.n()).done) {\n                  _context21.next = 20;\n                  break;\n                }\n\n                address = _step5.value;\n                _context21.prev = 6;\n                _context21.next = 9;\n                return this.getAccountByAddress(address);\n\n              case 9:\n                account = _context21.sent;\n                accounts.push(account);\n                _context21.next = 18;\n                break;\n\n              case 13:\n                _context21.prev = 13;\n                _context21.t0 = _context21[\"catch\"](6);\n\n                if (!(_context21.t0 instanceof lisk_db_1.NotFoundError)) {\n                  _context21.next = 17;\n                  break;\n                }\n\n                return _context21.abrupt(\"continue\", 18);\n\n              case 17:\n                throw _context21.t0;\n\n              case 18:\n                _context21.next = 4;\n                break;\n\n              case 20:\n                _context21.next = 25;\n                break;\n\n              case 22:\n                _context21.prev = 22;\n                _context21.t1 = _context21[\"catch\"](2);\n\n                _iterator5.e(_context21.t1);\n\n              case 25:\n                _context21.prev = 25;\n\n                _iterator5.f();\n\n                return _context21.finish(25);\n\n              case 28:\n                return _context21.abrupt(\"return\", accounts);\n\n              case 29:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this, [[2, 22, 25, 28], [6, 13]]);\n      }));\n\n      function getAccountsByAddress(_x19) {\n        return _getAccountsByAddress.apply(this, arguments);\n      }\n\n      return getAccountsByAddress;\n    }()\n  }, {\n    key: \"getTransactionByID\",\n    value: function () {\n      var _getTransactionByID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(id) {\n        var transaction;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this._db.get(\"\".concat(constants_1.DB_KEY_TRANSACTIONS_ID, \":\").concat(utils_1.keyString(id)));\n\n              case 2:\n                transaction = _context22.sent;\n                return _context22.abrupt(\"return\", transaction);\n\n              case 4:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function getTransactionByID(_x20) {\n        return _getTransactionByID.apply(this, arguments);\n      }\n\n      return getTransactionByID;\n    }()\n  }, {\n    key: \"getTransactionsByIDs\",\n    value: function () {\n      var _getTransactionsByIDs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(arrayOfTransactionIds) {\n        var transactions, _iterator6, _step6, id, transaction;\n\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                transactions = [];\n                _iterator6 = _createForOfIteratorHelper(arrayOfTransactionIds);\n                _context23.prev = 2;\n\n                _iterator6.s();\n\n              case 4:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context23.next = 20;\n                  break;\n                }\n\n                id = _step6.value;\n                _context23.prev = 6;\n                _context23.next = 9;\n                return this.getTransactionByID(id);\n\n              case 9:\n                transaction = _context23.sent;\n                transactions.push(transaction);\n                _context23.next = 18;\n                break;\n\n              case 13:\n                _context23.prev = 13;\n                _context23.t0 = _context23[\"catch\"](6);\n\n                if (!(_context23.t0 instanceof lisk_db_1.NotFoundError)) {\n                  _context23.next = 17;\n                  break;\n                }\n\n                return _context23.abrupt(\"continue\", 18);\n\n              case 17:\n                throw _context23.t0;\n\n              case 18:\n                _context23.next = 4;\n                break;\n\n              case 20:\n                _context23.next = 25;\n                break;\n\n              case 22:\n                _context23.prev = 22;\n                _context23.t1 = _context23[\"catch\"](2);\n\n                _iterator6.e(_context23.t1);\n\n              case 25:\n                _context23.prev = 25;\n\n                _iterator6.f();\n\n                return _context23.finish(25);\n\n              case 28:\n                return _context23.abrupt(\"return\", transactions);\n\n              case 29:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this, [[2, 22, 25, 28], [6, 13]]);\n      }));\n\n      function getTransactionsByIDs(_x21) {\n        return _getTransactionsByIDs.apply(this, arguments);\n      }\n\n      return getTransactionsByIDs;\n    }()\n  }, {\n    key: \"isTransactionPersisted\",\n    value: function () {\n      var _isTransactionPersisted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(transactionId) {\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                return _context24.abrupt(\"return\", this._db.exists(\"\".concat(constants_1.DB_KEY_TRANSACTIONS_ID, \":\").concat(utils_1.keyString(transactionId))));\n\n              case 1:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function isTransactionPersisted(_x22) {\n        return _isTransactionPersisted.apply(this, arguments);\n      }\n\n      return isTransactionPersisted;\n    }()\n  }, {\n    key: \"saveBlock\",\n    value: function () {\n      var _saveBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(id, height, finalizedHeight, header, payload, stateStore) {\n        var removeFromTemp,\n            heightStr,\n            batch,\n            ids,\n            _iterator7,\n            _step7,\n            _step7$value,\n            txID,\n            value,\n            _args25 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                removeFromTemp = _args25.length > 6 && _args25[6] !== undefined ? _args25[6] : false;\n                heightStr = lisk_db_1.formatInt(height);\n                batch = this._db.batch();\n                batch.put(\"\".concat(constants_1.DB_KEY_BLOCKS_ID, \":\").concat(utils_1.keyString(id)), header);\n                batch.put(\"\".concat(constants_1.DB_KEY_BLOCKS_HEIGHT, \":\").concat(heightStr), id);\n\n                if (payload.length > 0) {\n                  ids = [];\n                  _iterator7 = _createForOfIteratorHelper(payload);\n\n                  try {\n                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                      _step7$value = _step7.value, txID = _step7$value.id, value = _step7$value.value;\n                      ids.push(txID);\n                      batch.put(\"\".concat(constants_1.DB_KEY_TRANSACTIONS_ID, \":\").concat(utils_1.keyString(txID)), value);\n                    }\n                  } catch (err) {\n                    _iterator7.e(err);\n                  } finally {\n                    _iterator7.f();\n                  }\n\n                  batch.put(\"\".concat(constants_1.DB_KEY_TRANSACTIONS_BLOCK_ID, \":\").concat(utils_1.keyString(id)), Buffer.concat(ids));\n                }\n\n                if (removeFromTemp) {\n                  batch.del(\"\".concat(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT, \":\").concat(heightStr));\n                }\n\n                stateStore.finalize(heightStr, batch);\n                _context25.next = 10;\n                return batch.write();\n\n              case 10:\n                _context25.next = 12;\n                return this._cleanUntil(finalizedHeight);\n\n              case 12:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function saveBlock(_x23, _x24, _x25, _x26, _x27, _x28) {\n        return _saveBlock.apply(this, arguments);\n      }\n\n      return saveBlock;\n    }()\n  }, {\n    key: \"deleteBlock\",\n    value: function () {\n      var _deleteBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(id, height, txIDs, fullBlock, stateStore) {\n        var saveToTemp,\n            batch,\n            heightStr,\n            _iterator8,\n            _step8,\n            txID,\n            diffKey,\n            stateDiff,\n            _lisk_codec_1$codec$d,\n            createdStates,\n            updatedStates,\n            deletedStates,\n            _iterator9,\n            _step9,\n            key,\n            _iterator10,\n            _step10,\n            _step10$value,\n            _key,\n            previousValue,\n            _iterator11,\n            _step11,\n            _step11$value,\n            _key2,\n            _previousValue,\n            _args26 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                saveToTemp = _args26.length > 5 && _args26[5] !== undefined ? _args26[5] : false;\n                batch = this._db.batch();\n                heightStr = lisk_db_1.formatInt(height);\n                batch.del(\"\".concat(constants_1.DB_KEY_BLOCKS_ID, \":\").concat(utils_1.keyString(id)));\n                batch.del(\"\".concat(constants_1.DB_KEY_BLOCKS_HEIGHT, \":\").concat(heightStr));\n\n                if (txIDs.length > 0) {\n                  _iterator8 = _createForOfIteratorHelper(txIDs);\n\n                  try {\n                    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                      txID = _step8.value;\n                      batch.del(\"\".concat(constants_1.DB_KEY_TRANSACTIONS_ID, \":\").concat(utils_1.keyString(txID)));\n                    }\n                  } catch (err) {\n                    _iterator8.e(err);\n                  } finally {\n                    _iterator8.f();\n                  }\n\n                  batch.del(\"\".concat(constants_1.DB_KEY_TRANSACTIONS_BLOCK_ID, \":\").concat(utils_1.keyString(id)));\n                }\n\n                if (saveToTemp) {\n                  batch.put(\"\".concat(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT, \":\").concat(heightStr), fullBlock);\n                }\n\n                diffKey = \"\".concat(constants_1.DB_KEY_DIFF_STATE, \":\").concat(heightStr);\n                _context26.next = 10;\n                return this._db.get(diffKey);\n\n              case 10:\n                stateDiff = _context26.sent;\n                _lisk_codec_1$codec$d = lisk_codec_1.codec.decode(schema_1.stateDiffSchema, stateDiff), createdStates = _lisk_codec_1$codec$d.created, updatedStates = _lisk_codec_1$codec$d.updated, deletedStates = _lisk_codec_1$codec$d.deleted;\n                _iterator9 = _createForOfIteratorHelper(createdStates);\n\n                try {\n                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                    key = _step9.value;\n                    batch.del(key);\n                  }\n                } catch (err) {\n                  _iterator9.e(err);\n                } finally {\n                  _iterator9.f();\n                }\n\n                _iterator10 = _createForOfIteratorHelper(deletedStates);\n\n                try {\n                  for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                    _step10$value = _step10.value, _key = _step10$value.key, previousValue = _step10$value.value;\n                    batch.put(_key, previousValue);\n                  }\n                } catch (err) {\n                  _iterator10.e(err);\n                } finally {\n                  _iterator10.f();\n                }\n\n                _iterator11 = _createForOfIteratorHelper(updatedStates);\n\n                try {\n                  for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                    _step11$value = _step11.value, _key2 = _step11$value.key, _previousValue = _step11$value.value;\n                    batch.put(_key2, _previousValue);\n                  }\n                } catch (err) {\n                  _iterator11.e(err);\n                } finally {\n                  _iterator11.f();\n                }\n\n                stateStore.finalize(heightStr, batch);\n                batch.del(diffKey);\n                _context26.next = 22;\n                return batch.write();\n\n              case 22:\n                return _context26.abrupt(\"return\", {\n                  deleted: deletedStates,\n                  created: createdStates,\n                  updated: updatedStates\n                });\n\n              case 23:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function deleteBlock(_x29, _x30, _x31, _x32, _x33) {\n        return _deleteBlock.apply(this, arguments);\n      }\n\n      return deleteBlock;\n    }()\n  }, {\n    key: \"_cleanUntil\",\n    value: function () {\n      var _cleanUntil2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(height) {\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.next = 2;\n                return this._db.clear({\n                  gte: \"\".concat(constants_1.DB_KEY_DIFF_STATE, \":\").concat(lisk_db_1.formatInt(0)),\n                  lt: \"\".concat(constants_1.DB_KEY_DIFF_STATE, \":\").concat(lisk_db_1.formatInt(height))\n                });\n\n              case 2:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function _cleanUntil(_x34) {\n        return _cleanUntil2.apply(this, arguments);\n      }\n\n      return _cleanUntil;\n    }()\n  }, {\n    key: \"_getTransactions\",\n    value: function () {\n      var _getTransactions2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(blockID) {\n        var txIDs, ids, idLength, i, transactions, _i, _txIDs, txID, tx;\n\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                txIDs = [];\n                _context28.prev = 1;\n                _context28.next = 4;\n                return this._db.get(\"\".concat(constants_1.DB_KEY_TRANSACTIONS_BLOCK_ID, \":\").concat(utils_1.keyString(blockID)));\n\n              case 4:\n                ids = _context28.sent;\n                idLength = 32;\n\n                for (i = 0; i < ids.length; i += idLength) {\n                  txIDs.push(ids.slice(i, i + idLength));\n                }\n\n                _context28.next = 13;\n                break;\n\n              case 9:\n                _context28.prev = 9;\n                _context28.t0 = _context28[\"catch\"](1);\n\n                if (_context28.t0 instanceof lisk_db_1.NotFoundError) {\n                  _context28.next = 13;\n                  break;\n                }\n\n                throw _context28.t0;\n\n              case 13:\n                if (!(txIDs.length === 0)) {\n                  _context28.next = 15;\n                  break;\n                }\n\n                return _context28.abrupt(\"return\", []);\n\n              case 15:\n                transactions = [];\n                _i = 0, _txIDs = txIDs;\n\n              case 17:\n                if (!(_i < _txIDs.length)) {\n                  _context28.next = 26;\n                  break;\n                }\n\n                txID = _txIDs[_i];\n                _context28.next = 21;\n                return this._db.get(\"\".concat(constants_1.DB_KEY_TRANSACTIONS_ID, \":\").concat(utils_1.keyString(txID)));\n\n              case 21:\n                tx = _context28.sent;\n                transactions.push(tx);\n\n              case 23:\n                _i++;\n                _context28.next = 17;\n                break;\n\n              case 26:\n                return _context28.abrupt(\"return\", transactions);\n\n              case 27:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this, [[1, 9]]);\n      }));\n\n      function _getTransactions(_x35) {\n        return _getTransactions2.apply(this, arguments);\n      }\n\n      return _getTransactions;\n    }()\n  }]);\n\n  return Storage;\n}();\n\nexports.Storage = Storage;","map":{"version":3,"sources":["../../src/data_access/storage.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Storage = void 0;\nconst lisk_db_1 = require(\"@liskhq/lisk-db\");\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"../utils\");\nconst schema_1 = require(\"../schema\");\nclass Storage {\n    constructor(db) {\n        this._db = db;\n    }\n    async getBlockHeaderByID(id) {\n        const block = await this._db.get(`${constants_1.DB_KEY_BLOCKS_ID}:${utils_1.keyString(id)}`);\n        return block;\n    }\n    async getBlockHeadersByIDs(arrayOfBlockIds) {\n        const blocks = [];\n        for (const id of arrayOfBlockIds) {\n            try {\n                const block = await this._db.get(`${constants_1.DB_KEY_BLOCKS_ID}:${utils_1.keyString(id)}`);\n                blocks.push(block);\n            }\n            catch (dbError) {\n                if (dbError instanceof lisk_db_1.NotFoundError) {\n                    continue;\n                }\n                throw dbError;\n            }\n        }\n        return blocks;\n    }\n    async getBlockHeaderByHeight(height) {\n        const stringHeight = lisk_db_1.formatInt(height);\n        const id = await this._db.get(`${constants_1.DB_KEY_BLOCKS_HEIGHT}:${stringHeight}`);\n        return this.getBlockHeaderByID(id);\n    }\n    async getBlockHeadersByHeightBetween(fromHeight, toHeight) {\n        const stream = this._db.createReadStream({\n            gte: `${constants_1.DB_KEY_BLOCKS_HEIGHT}:${lisk_db_1.formatInt(fromHeight)}`,\n            lte: `${constants_1.DB_KEY_BLOCKS_HEIGHT}:${lisk_db_1.formatInt(toHeight)}`,\n            reverse: true,\n        });\n        const blockIDs = await new Promise((resolve, reject) => {\n            const ids = [];\n            stream\n                .on('data', ({ value }) => {\n                ids.push(value);\n            })\n                .on('error', error => {\n                reject(error);\n            })\n                .on('end', () => {\n                resolve(ids);\n            });\n        });\n        return this.getBlockHeadersByIDs(blockIDs);\n    }\n    async getBlockHeadersWithHeights(heightList) {\n        const blocks = [];\n        for (const height of heightList) {\n            try {\n                const block = await this.getBlockHeaderByHeight(height);\n                blocks.push(block);\n            }\n            catch (dbError) {\n                if (dbError instanceof lisk_db_1.NotFoundError) {\n                    continue;\n                }\n                throw dbError;\n            }\n        }\n        return blocks;\n    }\n    async getLastBlockHeader() {\n        const stream = this._db.createReadStream({\n            gte: lisk_db_1.getFirstPrefix(constants_1.DB_KEY_BLOCKS_HEIGHT),\n            lte: lisk_db_1.getLastPrefix(constants_1.DB_KEY_BLOCKS_HEIGHT),\n            reverse: true,\n            limit: 1,\n        });\n        const [blockID] = await new Promise((resolve, reject) => {\n            const ids = [];\n            stream\n                .on('data', ({ value }) => {\n                ids.push(value);\n            })\n                .on('error', error => {\n                reject(error);\n            })\n                .on('end', () => {\n                resolve(ids);\n            });\n        });\n        if (!blockID) {\n            throw new lisk_db_1.NotFoundError('Last block header not found');\n        }\n        return this.getBlockHeaderByID(blockID);\n    }\n    async getBlockByID(id) {\n        const blockHeader = await this.getBlockHeaderByID(id);\n        const transactions = await this._getTransactions(id);\n        return {\n            header: blockHeader,\n            payload: transactions,\n        };\n    }\n    async getBlocksByIDs(arrayOfBlockIds) {\n        const blocks = [];\n        for (const id of arrayOfBlockIds) {\n            try {\n                const block = await this.getBlockByID(id);\n                blocks.push(block);\n            }\n            catch (dbError) {\n                if (dbError instanceof lisk_db_1.NotFoundError) {\n                    continue;\n                }\n                throw dbError;\n            }\n        }\n        return blocks;\n    }\n    async getBlockByHeight(height) {\n        const header = await this.getBlockHeaderByHeight(height);\n        const blockID = lisk_cryptography_1.hash(header);\n        const transactions = await this._getTransactions(blockID);\n        return {\n            header,\n            payload: transactions,\n        };\n    }\n    async getBlocksByHeightBetween(fromHeight, toHeight) {\n        const headers = await this.getBlockHeadersByHeightBetween(fromHeight, toHeight);\n        const blocks = [];\n        for (const header of headers) {\n            const blockID = lisk_cryptography_1.hash(header);\n            const transactions = await this._getTransactions(blockID);\n            blocks.push({ header, payload: transactions });\n        }\n        return blocks;\n    }\n    async getLastBlock() {\n        const header = await this.getLastBlockHeader();\n        const blockID = lisk_cryptography_1.hash(header);\n        const transactions = await this._getTransactions(blockID);\n        return {\n            header,\n            payload: transactions,\n        };\n    }\n    async getTempBlocks() {\n        const stream = this._db.createReadStream({\n            gte: lisk_db_1.getFirstPrefix(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT),\n            lte: lisk_db_1.getLastPrefix(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT),\n            reverse: true,\n        });\n        const tempBlocks = await new Promise((resolve, reject) => {\n            const blocks = [];\n            stream\n                .on('data', ({ value }) => {\n                blocks.push(value);\n            })\n                .on('error', error => {\n                reject(error);\n            })\n                .on('end', () => {\n                resolve(blocks);\n            });\n        });\n        return tempBlocks;\n    }\n    async isTempBlockEmpty() {\n        const stream = this._db.createReadStream({\n            gte: lisk_db_1.getFirstPrefix(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT),\n            lte: lisk_db_1.getLastPrefix(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT),\n            limit: 1,\n        });\n        const tempBlocks = await new Promise((resolve, reject) => {\n            const blocks = [];\n            stream\n                .on('data', ({ value }) => {\n                blocks.push(value);\n            })\n                .on('error', error => {\n                reject(error);\n            })\n                .on('end', () => {\n                resolve(blocks);\n            });\n        });\n        return tempBlocks.length === 0;\n    }\n    async clearTempBlocks() {\n        await this._db.clear({\n            gte: lisk_db_1.getFirstPrefix(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT),\n            lte: lisk_db_1.getLastPrefix(constants_1.DB_KEY_TEMPBLOCKS_HEIGHT),\n        });\n    }\n    async isBlockPersisted(blockID) {\n        return this._db.exists(`${constants_1.DB_KEY_BLOCKS_ID}:${utils_1.keyString(blockID)}`);\n    }\n    async getChainState(key) {\n        try {\n            const value = await this._db.get(`${constants_1.DB_KEY_CHAIN_STATE}:${key}`);\n            return value;\n        }\n        catch (error) {\n            if (error instanceof lisk_db_1.NotFoundError) {\n                return undefined;\n            }\n            throw error;\n        }\n    }\n    async getConsensusState(key) {\n        try {\n            const value = await this._db.get(`${constants_1.DB_KEY_CONSENSUS_STATE}:${key}`);\n            return value;\n        }\n        catch (error) {\n            if (error instanceof lisk_db_1.NotFoundError) {\n                return undefined;\n            }\n            throw error;\n        }\n    }\n    async setConsensusState(key, val) {\n        await this._db.put(`${constants_1.DB_KEY_CONSENSUS_STATE}:${key}`, val);\n    }\n    async getAccountByAddress(address) {\n        const account = await this._db.get(`${constants_1.DB_KEY_ACCOUNTS_ADDRESS}:${utils_1.keyString(address)}`);\n        return account;\n    }\n    async getAccountsByPublicKey(arrayOfPublicKeys) {\n        const addresses = arrayOfPublicKeys.map(lisk_cryptography_1.getAddressFromPublicKey);\n        return this.getAccountsByAddress(addresses);\n    }\n    async getAccountsByAddress(arrayOfAddresses) {\n        const accounts = [];\n        for (const address of arrayOfAddresses) {\n            try {\n                const account = await this.getAccountByAddress(address);\n                accounts.push(account);\n            }\n            catch (dbError) {\n                if (dbError instanceof lisk_db_1.NotFoundError) {\n                    continue;\n                }\n                throw dbError;\n            }\n        }\n        return accounts;\n    }\n    async getTransactionByID(id) {\n        const transaction = await this._db.get(`${constants_1.DB_KEY_TRANSACTIONS_ID}:${utils_1.keyString(id)}`);\n        return transaction;\n    }\n    async getTransactionsByIDs(arrayOfTransactionIds) {\n        const transactions = [];\n        for (const id of arrayOfTransactionIds) {\n            try {\n                const transaction = await this.getTransactionByID(id);\n                transactions.push(transaction);\n            }\n            catch (dbError) {\n                if (dbError instanceof lisk_db_1.NotFoundError) {\n                    continue;\n                }\n                throw dbError;\n            }\n        }\n        return transactions;\n    }\n    async isTransactionPersisted(transactionId) {\n        return this._db.exists(`${constants_1.DB_KEY_TRANSACTIONS_ID}:${utils_1.keyString(transactionId)}`);\n    }\n    async saveBlock(id, height, finalizedHeight, header, payload, stateStore, removeFromTemp = false) {\n        const heightStr = lisk_db_1.formatInt(height);\n        const batch = this._db.batch();\n        batch.put(`${constants_1.DB_KEY_BLOCKS_ID}:${utils_1.keyString(id)}`, header);\n        batch.put(`${constants_1.DB_KEY_BLOCKS_HEIGHT}:${heightStr}`, id);\n        if (payload.length > 0) {\n            const ids = [];\n            for (const { id: txID, value } of payload) {\n                ids.push(txID);\n                batch.put(`${constants_1.DB_KEY_TRANSACTIONS_ID}:${utils_1.keyString(txID)}`, value);\n            }\n            batch.put(`${constants_1.DB_KEY_TRANSACTIONS_BLOCK_ID}:${utils_1.keyString(id)}`, Buffer.concat(ids));\n        }\n        if (removeFromTemp) {\n            batch.del(`${constants_1.DB_KEY_TEMPBLOCKS_HEIGHT}:${heightStr}`);\n        }\n        stateStore.finalize(heightStr, batch);\n        await batch.write();\n        await this._cleanUntil(finalizedHeight);\n    }\n    async deleteBlock(id, height, txIDs, fullBlock, stateStore, saveToTemp = false) {\n        const batch = this._db.batch();\n        const heightStr = lisk_db_1.formatInt(height);\n        batch.del(`${constants_1.DB_KEY_BLOCKS_ID}:${utils_1.keyString(id)}`);\n        batch.del(`${constants_1.DB_KEY_BLOCKS_HEIGHT}:${heightStr}`);\n        if (txIDs.length > 0) {\n            for (const txID of txIDs) {\n                batch.del(`${constants_1.DB_KEY_TRANSACTIONS_ID}:${utils_1.keyString(txID)}`);\n            }\n            batch.del(`${constants_1.DB_KEY_TRANSACTIONS_BLOCK_ID}:${utils_1.keyString(id)}`);\n        }\n        if (saveToTemp) {\n            batch.put(`${constants_1.DB_KEY_TEMPBLOCKS_HEIGHT}:${heightStr}`, fullBlock);\n        }\n        const diffKey = `${constants_1.DB_KEY_DIFF_STATE}:${heightStr}`;\n        const stateDiff = await this._db.get(diffKey);\n        const { created: createdStates, updated: updatedStates, deleted: deletedStates, } = lisk_codec_1.codec.decode(schema_1.stateDiffSchema, stateDiff);\n        for (const key of createdStates) {\n            batch.del(key);\n        }\n        for (const { key, value: previousValue } of deletedStates) {\n            batch.put(key, previousValue);\n        }\n        for (const { key, value: previousValue } of updatedStates) {\n            batch.put(key, previousValue);\n        }\n        stateStore.finalize(heightStr, batch);\n        batch.del(diffKey);\n        await batch.write();\n        return {\n            deleted: deletedStates,\n            created: createdStates,\n            updated: updatedStates,\n        };\n    }\n    async _cleanUntil(height) {\n        await this._db.clear({\n            gte: `${constants_1.DB_KEY_DIFF_STATE}:${lisk_db_1.formatInt(0)}`,\n            lt: `${constants_1.DB_KEY_DIFF_STATE}:${lisk_db_1.formatInt(height)}`,\n        });\n    }\n    async _getTransactions(blockID) {\n        const txIDs = [];\n        try {\n            const ids = await this._db.get(`${constants_1.DB_KEY_TRANSACTIONS_BLOCK_ID}:${utils_1.keyString(blockID)}`);\n            const idLength = 32;\n            for (let i = 0; i < ids.length; i += idLength) {\n                txIDs.push(ids.slice(i, i + idLength));\n            }\n        }\n        catch (error) {\n            if (!(error instanceof lisk_db_1.NotFoundError)) {\n                throw error;\n            }\n        }\n        if (txIDs.length === 0) {\n            return [];\n        }\n        const transactions = [];\n        for (const txID of txIDs) {\n            const tx = await this._db.get(`${constants_1.DB_KEY_TRANSACTIONS_ID}:${utils_1.keyString(txID)}`);\n            transactions.push(tx);\n        }\n        return transactions;\n    }\n}\nexports.Storage = Storage;\n//# sourceMappingURL=storage.js.map"]},"metadata":{},"sourceType":"script"}