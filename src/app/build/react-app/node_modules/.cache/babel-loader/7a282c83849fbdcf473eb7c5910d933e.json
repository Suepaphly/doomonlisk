{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MonitorPlugin = void 0;\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nvar lisk_framework_1 = require(\"lisk-framework\");\n\nvar express = require(\"express\");\n\nvar cors = require(\"cors\");\n\nvar rateLimit = require(\"express-rate-limit\");\n\nvar middlewares = require(\"./middlewares\");\n\nvar config = require(\"./defaults\");\n\nvar controllers = require(\"./controllers\");\n\nvar schema_1 = require(\"./schema\");\n\nvar pJSON = require('../package.json');\n\nvar MonitorPlugin = /*#__PURE__*/function (_lisk_framework_1$Bas) {\n  _inherits(MonitorPlugin, _lisk_framework_1$Bas);\n\n  var _super = _createSuper(MonitorPlugin);\n\n  function MonitorPlugin() {\n    _classCallCheck(this, MonitorPlugin);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MonitorPlugin, [{\n    key: \"defaults\",\n    get: function get() {\n      return config.defaultConfig;\n    }\n  }, {\n    key: \"events\",\n    get: function get() {\n      return [];\n    }\n  }, {\n    key: \"actions\",\n    get: function get() {\n      var _this = this;\n\n      return {\n        getTransactionStats: function () {\n          var _getTransactionStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    return _context.abrupt(\"return\", controllers.transactions.getTransactionStats(_this._channel, _this._state));\n\n                  case 1:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          function getTransactionStats() {\n            return _getTransactionStats.apply(this, arguments);\n          }\n\n          return getTransactionStats;\n        }(),\n        getBlockStats: function () {\n          var _getBlockStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    return _context2.abrupt(\"return\", controllers.blocks.getBlockStats(_this._channel, _this._state));\n\n                  case 1:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n          function getBlockStats() {\n            return _getBlockStats.apply(this, arguments);\n          }\n\n          return getBlockStats;\n        }(),\n        getNetworkStats: function () {\n          var _getNetworkStats = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    return _context3.abrupt(\"return\", controllers.network.getNetworkStats(_this._channel));\n\n                  case 1:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3);\n          }));\n\n          function getNetworkStats() {\n            return _getNetworkStats.apply(this, arguments);\n          }\n\n          return getNetworkStats;\n        }(),\n        getForkStats: function getForkStats() {\n          return controllers.forks.getForkStats(_this._state);\n        }\n      };\n    }\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(channel) {\n        var _this2 = this;\n\n        var options;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this._app = express();\n                options = lisk_utils_1.objects.mergeDeep({}, config.defaultConfig.default, this.options);\n                this._channel = channel;\n                this._state = {\n                  forks: {\n                    forkEventCount: 0,\n                    blockHeaders: {}\n                  },\n                  transactions: {},\n                  blocks: {}\n                };\n\n                this._channel.once('app:ready', function () {\n                  _this2._registerMiddlewares(options);\n\n                  _this2._registerControllers();\n\n                  _this2._registerAfterMiddlewares(options);\n\n                  _this2._subscribeToEvents();\n\n                  _this2._server = _this2._app.listen(options.port, options.host);\n                });\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function load(_x) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"unload\",\n    value: function () {\n      var _unload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return new Promise(function (resolve, reject) {\n                  _this3._server.close(function (err) {\n                    if (err) {\n                      reject(err);\n                      return;\n                    }\n\n                    resolve();\n                  });\n                });\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function unload() {\n        return _unload.apply(this, arguments);\n      }\n\n      return unload;\n    }()\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._state;\n    }\n  }, {\n    key: \"_registerMiddlewares\",\n    value: function _registerMiddlewares(options) {\n      this._app.use(cors(options.cors));\n\n      this._app.use(express.json());\n\n      this._app.use(rateLimit(options.limits));\n\n      this._app.use(middlewares.whiteListMiddleware(options));\n    }\n  }, {\n    key: \"_registerAfterMiddlewares\",\n    value: function _registerAfterMiddlewares(_options) {\n      this._app.use(middlewares.errorMiddleware());\n    }\n  }, {\n    key: \"_registerControllers\",\n    value: function _registerControllers() {\n      this._app.get('/api/prometheus/metrics', controllers.prometheusExport.getData(this._channel, this._state));\n    }\n  }, {\n    key: \"_subscribeToEvents\",\n    value: function _subscribeToEvents() {\n      var _this4 = this;\n\n      this._channel.subscribe('app:network:event', function (eventData) {\n        var event = eventData.event,\n            data = eventData.data;\n\n        if (event === 'postTransactionsAnnouncement') {\n          var errors = lisk_validator_1.validator.validate(schema_1.transactionAnnouncementSchema, data);\n\n          if (errors.length > 0) {\n            return;\n          }\n\n          _this4._handlePostTransactionAnnounce(data);\n        }\n\n        if (event === 'postBlock') {\n          var _errors = lisk_validator_1.validator.validate(schema_1.postBlockEventSchema, data);\n\n          if (_errors.length > 0) {\n            return;\n          }\n\n          _this4._handlePostBlock(data);\n        }\n      });\n\n      this._channel.subscribe('app:chain:fork', function (data) {\n        var block = data.block;\n\n        _this4._handleFork(block);\n      });\n    }\n  }, {\n    key: \"_handlePostTransactionAnnounce\",\n    value: function _handlePostTransactionAnnounce(data) {\n      var _iterator = _createForOfIteratorHelper(data.transactionIds),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var aTransactionId = _step.value;\n\n          if (this._state.transactions[aTransactionId]) {\n            this._state.transactions[aTransactionId].count += 1;\n          } else {\n            this._state.transactions[aTransactionId] = {\n              count: 1,\n              timeReceived: Date.now()\n            };\n\n            this._cleanUpTransactionStats();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"_cleanUpTransactionStats\",\n    value: function _cleanUpTransactionStats() {\n      var expiryTime = 600000;\n\n      for (var _i = 0, _Object$keys = Object.keys(this._state.transactions); _i < _Object$keys.length; _i++) {\n        var transactionID = _Object$keys[_i];\n\n        if (Date.now() - this._state.transactions[transactionID].timeReceived > expiryTime) {\n          delete this._state.transactions[transactionID];\n        }\n      }\n    }\n  }, {\n    key: \"_handleFork\",\n    value: function _handleFork(block) {\n      this._state.forks.forkEventCount += 1;\n\n      var _lisk_codec_1$codec$d = lisk_codec_1.codec.decode(this.schemas.block, Buffer.from(block, 'hex')),\n          header = _lisk_codec_1$codec$d.header;\n\n      var blockId = lisk_cryptography_1.hash(header).toString('hex');\n\n      if (this._state.forks.blockHeaders[blockId]) {\n        this._state.forks.blockHeaders[blockId].timeReceived = Date.now();\n      } else {\n        var decodedHeader = lisk_codec_1.codec.decodeJSON(this.schemas.blockHeader, header);\n        this._state.forks.blockHeaders[blockId] = {\n          blockHeader: decodedHeader,\n          timeReceived: Date.now()\n        };\n      }\n    }\n  }, {\n    key: \"_handlePostBlock\",\n    value: function _handlePostBlock(data) {\n      var decodedBlock = lisk_codec_1.codec.decode(this.schemas.block, Buffer.from(data.block, 'hex'));\n      var decodedBlockHeader = lisk_codec_1.codec.decode(this.schemas.blockHeader, decodedBlock.header);\n      var blockId = lisk_cryptography_1.hash(decodedBlock.header);\n\n      if (!this._state.blocks[blockId.toString('hex')]) {\n        this._state.blocks[blockId.toString('hex')] = {\n          count: 0,\n          height: decodedBlockHeader.height\n        };\n      }\n\n      this._state.blocks[blockId.toString('hex')].count += 1;\n\n      for (var _i2 = 0, _Object$keys2 = Object.keys(this._state.blocks); _i2 < _Object$keys2.length; _i2++) {\n        var id = _Object$keys2[_i2];\n        var blockInfo = this._state.blocks[id];\n\n        if (blockInfo.height < decodedBlockHeader.height - 300) {\n          delete this._state.blocks[id];\n        }\n      }\n    }\n  }], [{\n    key: \"alias\",\n    get: function get() {\n      return 'monitor';\n    }\n  }, {\n    key: \"info\",\n    get: function get() {\n      return {\n        author: pJSON.author,\n        version: pJSON.version,\n        name: pJSON.name\n      };\n    }\n  }]);\n\n  return MonitorPlugin;\n}(lisk_framework_1.BasePlugin);\n\nexports.MonitorPlugin = MonitorPlugin;","map":{"version":3,"sources":["../src/monitor_plugin.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MonitorPlugin = void 0;\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nconst lisk_framework_1 = require(\"lisk-framework\");\nconst express = require(\"express\");\nconst cors = require(\"cors\");\nconst rateLimit = require(\"express-rate-limit\");\nconst middlewares = require(\"./middlewares\");\nconst config = require(\"./defaults\");\nconst controllers = require(\"./controllers\");\nconst schema_1 = require(\"./schema\");\nconst pJSON = require('../package.json');\nclass MonitorPlugin extends lisk_framework_1.BasePlugin {\n    static get alias() {\n        return 'monitor';\n    }\n    static get info() {\n        return {\n            author: pJSON.author,\n            version: pJSON.version,\n            name: pJSON.name,\n        };\n    }\n    get defaults() {\n        return config.defaultConfig;\n    }\n    get events() {\n        return [];\n    }\n    get actions() {\n        return {\n            getTransactionStats: async () => controllers.transactions.getTransactionStats(this._channel, this._state),\n            getBlockStats: async () => controllers.blocks.getBlockStats(this._channel, this._state),\n            getNetworkStats: async () => controllers.network.getNetworkStats(this._channel),\n            getForkStats: () => controllers.forks.getForkStats(this._state),\n        };\n    }\n    async load(channel) {\n        this._app = express();\n        const options = lisk_utils_1.objects.mergeDeep({}, config.defaultConfig.default, this.options);\n        this._channel = channel;\n        this._state = {\n            forks: {\n                forkEventCount: 0,\n                blockHeaders: {},\n            },\n            transactions: {},\n            blocks: {},\n        };\n        this._channel.once('app:ready', () => {\n            this._registerMiddlewares(options);\n            this._registerControllers();\n            this._registerAfterMiddlewares(options);\n            this._subscribeToEvents();\n            this._server = this._app.listen(options.port, options.host);\n        });\n    }\n    async unload() {\n        await new Promise((resolve, reject) => {\n            this._server.close(err => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve();\n            });\n        });\n    }\n    get state() {\n        return this._state;\n    }\n    _registerMiddlewares(options) {\n        this._app.use(cors(options.cors));\n        this._app.use(express.json());\n        this._app.use(rateLimit(options.limits));\n        this._app.use(middlewares.whiteListMiddleware(options));\n    }\n    _registerAfterMiddlewares(_options) {\n        this._app.use(middlewares.errorMiddleware());\n    }\n    _registerControllers() {\n        this._app.get('/api/prometheus/metrics', controllers.prometheusExport.getData(this._channel, this._state));\n    }\n    _subscribeToEvents() {\n        this._channel.subscribe('app:network:event', (eventData) => {\n            const { event, data } = eventData;\n            if (event === 'postTransactionsAnnouncement') {\n                const errors = lisk_validator_1.validator.validate(schema_1.transactionAnnouncementSchema, data);\n                if (errors.length > 0) {\n                    return;\n                }\n                this._handlePostTransactionAnnounce(data);\n            }\n            if (event === 'postBlock') {\n                const errors = lisk_validator_1.validator.validate(schema_1.postBlockEventSchema, data);\n                if (errors.length > 0) {\n                    return;\n                }\n                this._handlePostBlock(data);\n            }\n        });\n        this._channel.subscribe('app:chain:fork', (data) => {\n            const { block } = data;\n            this._handleFork(block);\n        });\n    }\n    _handlePostTransactionAnnounce(data) {\n        for (const aTransactionId of data.transactionIds) {\n            if (this._state.transactions[aTransactionId]) {\n                this._state.transactions[aTransactionId].count += 1;\n            }\n            else {\n                this._state.transactions[aTransactionId] = {\n                    count: 1,\n                    timeReceived: Date.now(),\n                };\n                this._cleanUpTransactionStats();\n            }\n        }\n    }\n    _cleanUpTransactionStats() {\n        const expiryTime = 600000;\n        for (const transactionID of Object.keys(this._state.transactions)) {\n            if (Date.now() - this._state.transactions[transactionID].timeReceived > expiryTime) {\n                delete this._state.transactions[transactionID];\n            }\n        }\n    }\n    _handleFork(block) {\n        this._state.forks.forkEventCount += 1;\n        const { header } = lisk_codec_1.codec.decode(this.schemas.block, Buffer.from(block, 'hex'));\n        const blockId = lisk_cryptography_1.hash(header).toString('hex');\n        if (this._state.forks.blockHeaders[blockId]) {\n            this._state.forks.blockHeaders[blockId].timeReceived = Date.now();\n        }\n        else {\n            const decodedHeader = lisk_codec_1.codec.decodeJSON(this.schemas.blockHeader, header);\n            this._state.forks.blockHeaders[blockId] = {\n                blockHeader: decodedHeader,\n                timeReceived: Date.now(),\n            };\n        }\n    }\n    _handlePostBlock(data) {\n        const decodedBlock = lisk_codec_1.codec.decode(this.schemas.block, Buffer.from(data.block, 'hex'));\n        const decodedBlockHeader = lisk_codec_1.codec.decode(this.schemas.blockHeader, decodedBlock.header);\n        const blockId = lisk_cryptography_1.hash(decodedBlock.header);\n        if (!this._state.blocks[blockId.toString('hex')]) {\n            this._state.blocks[blockId.toString('hex')] = {\n                count: 0,\n                height: decodedBlockHeader.height,\n            };\n        }\n        this._state.blocks[blockId.toString('hex')].count += 1;\n        for (const id of Object.keys(this._state.blocks)) {\n            const blockInfo = this._state.blocks[id];\n            if (blockInfo.height < decodedBlockHeader.height - 300) {\n                delete this._state.blocks[id];\n            }\n        }\n    }\n}\nexports.MonitorPlugin = MonitorPlugin;\n//# sourceMappingURL=monitor_plugin.js.map"]},"metadata":{},"sourceType":"script"}