{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDefaultAccount = exports.defaultAccounts = exports.defaultFaucetAccount = void 0;\n\nvar lisk_chain_1 = require(\"@liskhq/lisk-chain\");\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nvar utils_1 = require(\"../utils\");\n\nvar config_1 = require(\"./config\");\n\nexports.defaultFaucetAccount = {\n  address: Buffer.from('d04699e57c4a3846c988f3c15306796f8eae5c1c', 'hex'),\n  publicKey: Buffer.from('0fe9a3f1a21b5530f27f87a414b549e79a940bf24fdf2b2f05e7f22aeeecc86a', 'hex'),\n  passphrase: 'peanut hundred pen hawk invite exclude brain chunk gadget wait wrong ready',\n  balance: '10000000000000000',\n  encryptedPassphrase: 'iterations=10&cipherText=6541c04d7a46eacd666c07fbf030fef32c5db324466e3422e59818317ac5d15cfffb80c5f1e2589eaa6da4f8d611a94cba92eee86722fc0a4015a37cff43a5a699601121fbfec11ea022&iv=141edfe6da3a9917a42004be&salt=f523bba8316c45246c6ffa848b806188&tag=4ffb5c753d4a1dc96364c4a54865521a&version=1',\n  password: config_1.defaultPassword\n};\n\nvar defaultAccounts = function defaultAccounts() {\n  return config_1.defaultConfig.forging.delegates.map(function (account) {\n    return {\n      address: Buffer.from(account.address, 'hex')\n    };\n  });\n};\n\nexports.defaultAccounts = defaultAccounts;\n\nvar createDefaultAccount = function createDefaultAccount() {\n  var modules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _a;\n\n  var _lisk_chain_1$getAcco = lisk_chain_1.getAccountSchemaWithDefault(utils_1.getAccountSchemaFromModules(modules)),\n      defaultAccountData = _lisk_chain_1$getAcco.default;\n\n  var account = lisk_utils_1.objects.mergeDeep({}, defaultAccountData, data);\n  account.address = (_a = account.address) !== null && _a !== void 0 ? _a : lisk_cryptography_1.getRandomBytes(20);\n  return lisk_utils_1.objects.cloneDeep(account);\n};\n\nexports.createDefaultAccount = createDefaultAccount;","map":{"version":3,"sources":["../../../src/testing/fixtures/accounts.ts"],"names":[],"mappings":";;;;;;;AAcA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAGA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEa,OAAA,CAAA,oBAAA,GAAuB;AACnC,EAAA,OAAO,EAAE,MAAM,CAAC,IAAP,CAAY,0CAAZ,EAAwD,KAAxD,CAD0B;AAEnC,EAAA,SAAS,EAAE,MAAM,CAAC,IAAP,CAAY,kEAAZ,EAAgF,KAAhF,CAFwB;AAGnC,EAAA,UAAU,EAAE,4EAHuB;AAInC,EAAA,OAAO,EAAE,mBAJ0B;AAKnC,EAAA,mBAAmB,EAClB,gSANkC;AAOnC,EAAA,QAAQ,EAAE,QAAA,CAAA;AAPyB,CAAvB;;AAUN,IAAM,eAAe,GAAG,SAAlB,eAAkB;AAAA,SAC9B,QAAA,CAAA,aAAA,CAAc,OAAd,CAAsB,SAAtB,CAAgC,GAAhC,CACC,UAAA,OAAO;AAAA,WAAK;AAAE,MAAA,OAAO,EAAE,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,OAApB,EAA6B,KAA7B;AAAX,KAAL;AAAA,GADR,CAD8B;AAAA,CAAxB;;AAAM,OAAA,CAAA,eAAA,GAAe,eAAf;;AAKN,IAAM,oBAAoB,GAAG,SAAvB,oBAAuB,GAGpB;AAAA,MAFf,OAEe,uEAFU,EAEV;AAAA,MADf,IACe,uEADiB,EACjB;;;;AACf,8BAAwC,YAAA,CAAA,2BAAA,CACvC,OAAA,CAAA,2BAAA,CAA4B,OAA5B,CADuC,CAAxC;AAAA,MAAiB,kBAAjB,yBAAQ,OAAR;;AAIA,MAAM,OAAO,GAAG,YAAA,CAAA,OAAA,CAAQ,SAAR,CAAkB,EAAlB,EAAsB,kBAAtB,EAA0C,IAA1C,CAAhB;AACA,EAAA,OAAO,CAAC,OAAR,GAAkB,CAAA,EAAA,GAAA,OAAO,CAAC,OAAR,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,EAAf,GAAmB,mBAAA,CAAA,cAAA,CAAe,EAAf,CAArC;AAEA,SAAO,YAAA,CAAA,OAAA,CAAQ,SAAR,CAAkB,OAAlB,CAAP;AACA,CAZM;;AAAM,OAAA,CAAA,oBAAA,GAAoB,oBAApB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createDefaultAccount = exports.defaultAccounts = exports.defaultFaucetAccount = void 0;\nconst lisk_chain_1 = require(\"@liskhq/lisk-chain\");\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nconst utils_1 = require(\"../utils\");\nconst config_1 = require(\"./config\");\nexports.defaultFaucetAccount = {\n    address: Buffer.from('d04699e57c4a3846c988f3c15306796f8eae5c1c', 'hex'),\n    publicKey: Buffer.from('0fe9a3f1a21b5530f27f87a414b549e79a940bf24fdf2b2f05e7f22aeeecc86a', 'hex'),\n    passphrase: 'peanut hundred pen hawk invite exclude brain chunk gadget wait wrong ready',\n    balance: '10000000000000000',\n    encryptedPassphrase: 'iterations=10&cipherText=6541c04d7a46eacd666c07fbf030fef32c5db324466e3422e59818317ac5d15cfffb80c5f1e2589eaa6da4f8d611a94cba92eee86722fc0a4015a37cff43a5a699601121fbfec11ea022&iv=141edfe6da3a9917a42004be&salt=f523bba8316c45246c6ffa848b806188&tag=4ffb5c753d4a1dc96364c4a54865521a&version=1',\n    password: config_1.defaultPassword,\n};\nconst defaultAccounts = () => config_1.defaultConfig.forging.delegates.map(account => ({ address: Buffer.from(account.address, 'hex') }));\nexports.defaultAccounts = defaultAccounts;\nconst createDefaultAccount = (modules = [], data = {}) => {\n    var _a;\n    const { default: defaultAccountData } = lisk_chain_1.getAccountSchemaWithDefault(utils_1.getAccountSchemaFromModules(modules));\n    const account = lisk_utils_1.objects.mergeDeep({}, defaultAccountData, data);\n    account.address = (_a = account.address) !== null && _a !== void 0 ? _a : lisk_cryptography_1.getRandomBytes(20);\n    return lisk_utils_1.objects.cloneDeep(account);\n};\nexports.createDefaultAccount = createDefaultAccount;\n//# sourceMappingURL=accounts.js.map"]},"metadata":{},"sourceType":"script"}