{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertLSKToBeddows = exports.convertBeddowsToLSK = void 0;\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nvar FIXED_POINT = Math.pow(10, 8);\nvar LISK_MAX_DECIMAL_POINTS = 8;\n\nvar getDecimalPlaces = function getDecimalPlaces(amount) {\n  return (amount.split('.')[1] || '').length;\n};\n\nvar convertBeddowsToLSK = function convertBeddowsToLSK(beddowsAmount) {\n  if (typeof beddowsAmount !== 'string') {\n    throw new Error('Cannot convert non-string amount');\n  }\n\n  if (getDecimalPlaces(beddowsAmount)) {\n    throw new Error('Beddows amount should not have decimal points');\n  }\n\n  var beddowsAmountBigInt = BigInt(beddowsAmount);\n\n  if (beddowsAmountBigInt > lisk_validator_1.MAX_UINT64) {\n    throw new Error('Beddows amount out of range');\n  }\n\n  var int = (beddowsAmountBigInt / BigInt(FIXED_POINT)).toString();\n  var floating = Number(beddowsAmountBigInt % BigInt(FIXED_POINT)) / FIXED_POINT;\n  var floatingPointsSplit = floating.toLocaleString('en-US', {\n    maximumFractionDigits: LISK_MAX_DECIMAL_POINTS\n  }).split('.')[1];\n  var res = floating !== 0 ? \"\".concat(int, \".\").concat(floatingPointsSplit) : int;\n  return res;\n};\n\nexports.convertBeddowsToLSK = convertBeddowsToLSK;\n\nvar convertLSKToBeddows = function convertLSKToBeddows(lskAmount) {\n  var _a;\n\n  if (typeof lskAmount !== 'string') {\n    throw new Error('Cannot convert non-string amount');\n  }\n\n  if (getDecimalPlaces(lskAmount) > LISK_MAX_DECIMAL_POINTS) {\n    throw new Error('LSK amount has too many decimal points');\n  }\n\n  var splitAmount = lskAmount.split('.');\n  var liskAmountInt = BigInt(splitAmount[0]);\n  var liskAmountFloatBigInt = BigInt(((_a = splitAmount[1]) !== null && _a !== void 0 ? _a : '0').padEnd(LISK_MAX_DECIMAL_POINTS, '0'));\n  var beddowsAmountBigInt = liskAmountInt * BigInt(FIXED_POINT) + liskAmountFloatBigInt;\n\n  if (beddowsAmountBigInt > lisk_validator_1.MAX_UINT64) {\n    throw new Error('LSK amount out of range');\n  }\n\n  return beddowsAmountBigInt.toString();\n};\n\nexports.convertLSKToBeddows = convertLSKToBeddows;","map":{"version":3,"sources":["../src/format.ts"],"names":[],"mappings":";;;;;;;AAcA,IAAA,gBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAEA,IAAM,WAAW,YAAG,EAAH,EAAS,CAAT,CAAjB;AACA,IAAM,uBAAuB,GAAG,CAAhC;;AACA,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,MAAD;AAAA,SAExB,CAAC,MAAM,CAAC,KAAP,CAAa,GAAb,EAAkB,CAAlB,KAAwB,EAAzB,EAA6B,MAFL;AAAA,CAAzB;;AAIO,IAAM,mBAAmB,GAAG,SAAtB,mBAAsB,CAAC,aAAD,EAAmC;AACrE,MAAI,OAAO,aAAP,KAAyB,QAA7B,EAAuC;AACtC,UAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACA;;AACD,MAAI,gBAAgB,CAAC,aAAD,CAApB,EAAqC;AACpC,UAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACA;;AACD,MAAM,mBAAmB,GAAG,MAAM,CAAC,aAAD,CAAlC;;AACA,MAAI,mBAAmB,GAAG,gBAAA,CAAA,UAA1B,EAAsC;AACrC,UAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACA;;AACD,MAAM,GAAG,GAAG,CAAC,mBAAmB,GAAG,MAAM,CAAC,WAAD,CAA7B,EAA4C,QAA5C,EAAZ;AACA,MAAM,QAAQ,GAAG,MAAM,CAAC,mBAAmB,GAAG,MAAM,CAAC,WAAD,CAA7B,CAAN,GAAoD,WAArE;AACA,MAAM,mBAAmB,GAAG,QAAQ,CAClC,cAD0B,CACX,OADW,EACF;AACxB,IAAA,qBAAqB,EAAE;AADC,GADE,EAI1B,KAJ0B,CAIpB,GAJoB,EAIf,CAJe,CAA5B;AAKA,MAAM,GAAG,GAAG,QAAQ,KAAK,CAAb,aAAoB,GAApB,cAA2B,mBAA3B,IAAmD,GAA/D;AAEA,SAAO,GAAP;AACA,CArBM;;AAAM,OAAA,CAAA,mBAAA,GAAmB,mBAAnB;;AAuBN,IAAM,mBAAmB,GAAG,SAAtB,mBAAsB,CAAC,SAAD,EAA+B;;;AACjE,MAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AAClC,UAAM,IAAI,KAAJ,CAAU,kCAAV,CAAN;AACA;;AACD,MAAI,gBAAgB,CAAC,SAAD,CAAhB,GAA8B,uBAAlC,EAA2D;AAC1D,UAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACA;;AACD,MAAM,WAAW,GAAG,SAAS,CAAC,KAAV,CAAgB,GAAhB,CAApB;AACA,MAAM,aAAa,GAAG,MAAM,CAAC,WAAW,CAAC,CAAD,CAAZ,CAA5B;AACA,MAAM,qBAAqB,GAAG,MAAM,CACnC,CAAC,CAAA,EAAA,GAAA,WAAW,CAAC,CAAD,CAAX,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAkB,GAAnB,EAAwB,MAAxB,CAA+B,uBAA/B,EAAwD,GAAxD,CADmC,CAApC;AAGA,MAAM,mBAAmB,GAAG,aAAa,GAAG,MAAM,CAAC,WAAD,CAAtB,GAAsC,qBAAlE;;AACA,MAAI,mBAAmB,GAAG,gBAAA,CAAA,UAA1B,EAAsC;AACrC,UAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACA;;AAED,SAAO,mBAAmB,CAAC,QAApB,EAAP;AACA,CAlBM;;AAAM,OAAA,CAAA,mBAAA,GAAmB,mBAAnB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.convertLSKToBeddows = exports.convertBeddowsToLSK = void 0;\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst FIXED_POINT = 10 ** 8;\nconst LISK_MAX_DECIMAL_POINTS = 8;\nconst getDecimalPlaces = (amount) => (amount.split('.')[1] || '').length;\nconst convertBeddowsToLSK = (beddowsAmount) => {\n    if (typeof beddowsAmount !== 'string') {\n        throw new Error('Cannot convert non-string amount');\n    }\n    if (getDecimalPlaces(beddowsAmount)) {\n        throw new Error('Beddows amount should not have decimal points');\n    }\n    const beddowsAmountBigInt = BigInt(beddowsAmount);\n    if (beddowsAmountBigInt > lisk_validator_1.MAX_UINT64) {\n        throw new Error('Beddows amount out of range');\n    }\n    const int = (beddowsAmountBigInt / BigInt(FIXED_POINT)).toString();\n    const floating = Number(beddowsAmountBigInt % BigInt(FIXED_POINT)) / FIXED_POINT;\n    const floatingPointsSplit = floating\n        .toLocaleString('en-US', {\n        maximumFractionDigits: LISK_MAX_DECIMAL_POINTS,\n    })\n        .split('.')[1];\n    const res = floating !== 0 ? `${int}.${floatingPointsSplit}` : int;\n    return res;\n};\nexports.convertBeddowsToLSK = convertBeddowsToLSK;\nconst convertLSKToBeddows = (lskAmount) => {\n    var _a;\n    if (typeof lskAmount !== 'string') {\n        throw new Error('Cannot convert non-string amount');\n    }\n    if (getDecimalPlaces(lskAmount) > LISK_MAX_DECIMAL_POINTS) {\n        throw new Error('LSK amount has too many decimal points');\n    }\n    const splitAmount = lskAmount.split('.');\n    const liskAmountInt = BigInt(splitAmount[0]);\n    const liskAmountFloatBigInt = BigInt(((_a = splitAmount[1]) !== null && _a !== void 0 ? _a : '0').padEnd(LISK_MAX_DECIMAL_POINTS, '0'));\n    const beddowsAmountBigInt = liskAmountInt * BigInt(FIXED_POINT) + liskAmountFloatBigInt;\n    if (beddowsAmountBigInt > lisk_validator_1.MAX_UINT64) {\n        throw new Error('LSK amount out of range');\n    }\n    return beddowsAmountBigInt.toString();\n};\nexports.convertLSKToBeddows = convertLSKToBeddows;\n//# sourceMappingURL=format.js.map"]},"metadata":{},"sourceType":"script"}