{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateForging = exports.getForgingStatus = void 0;\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nvar updateForgingParams = {\n  type: 'object',\n  required: ['address', 'password', 'forging'],\n  properties: {\n    address: {\n      type: 'string',\n      description: 'Address should be a hex string'\n    },\n    password: {\n      type: 'string',\n      description: 'Password should be a string'\n    },\n    forging: {\n      type: 'boolean',\n      description: 'Boolean flag to enable or disable forging'\n    },\n    height: {\n      type: 'number',\n      description: 'Delegates previously forged height'\n    },\n    maxHeightPreviouslyForged: {\n      type: 'number',\n      description: 'Delegates previously forged height'\n    },\n    maxHeightPrevoted: {\n      type: 'number',\n      description: 'Delegates largest prevoted height for a block'\n    },\n    overwrite: {\n      type: 'boolean',\n      description: 'Boolean flag to overwrite forger info'\n    }\n  }\n};\n\nvar isLessThanZero = function isLessThanZero(value) {\n  return value === null || value === undefined || value < 0;\n};\n\nvar getForgingStatus = function getForgingStatus(channel) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_req, res) {\n      var forgingDelegates;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return channel.invoke('app:getForgingStatus');\n\n            case 2:\n              forgingDelegates = _context.sent;\n              res.status(200).json({\n                meta: {\n                  count: forgingDelegates.length\n                },\n                data: forgingDelegates\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexports.getForgingStatus = getForgingStatus;\n\nvar updateForging = function updateForging(channel) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res, next) {\n      var errors, _req$body, address, password, forging, height, maxHeightPreviouslyForged, maxHeightPrevoted, overwrite, result;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              errors = lisk_validator_1.validator.validate(updateForgingParams, req.body);\n\n              if (!errors.length) {\n                _context2.next = 4;\n                break;\n              }\n\n              res.status(400).send({\n                errors: [{\n                  message: new lisk_validator_1.LiskValidationError(_toConsumableArray(errors)).message\n                }]\n              });\n              return _context2.abrupt(\"return\");\n\n            case 4:\n              _req$body = req.body, address = _req$body.address, password = _req$body.password, forging = _req$body.forging, height = _req$body.height, maxHeightPreviouslyForged = _req$body.maxHeightPreviouslyForged, maxHeightPrevoted = _req$body.maxHeightPrevoted, overwrite = _req$body.overwrite;\n\n              if (lisk_validator_1.isHexString(address)) {\n                _context2.next = 8;\n                break;\n              }\n\n              res.status(400).send({\n                errors: [{\n                  message: 'The address parameter should be a hex string.'\n                }]\n              });\n              return _context2.abrupt(\"return\");\n\n            case 8:\n              if (!(isLessThanZero(maxHeightPreviouslyForged) || isLessThanZero(maxHeightPrevoted) || isLessThanZero(height))) {\n                _context2.next = 11;\n                break;\n              }\n\n              res.status(400).send({\n                errors: [{\n                  message: 'The maxHeightPreviouslyForged, maxHeightPrevoted, height parameter must be specified and greater than or equal to 0.'\n                }]\n              });\n              return _context2.abrupt(\"return\");\n\n            case 11:\n              _context2.prev = 11;\n              _context2.next = 14;\n              return channel.invoke('app:updateForgingStatus', {\n                address: address,\n                password: password,\n                forging: forging,\n                height: height,\n                maxHeightPreviouslyForged: maxHeightPreviouslyForged,\n                maxHeightPrevoted: maxHeightPrevoted,\n                overwrite: overwrite\n              });\n\n            case 14:\n              result = _context2.sent;\n              res.status(200).json({\n                meta: {\n                  count: 1\n                },\n                data: {\n                  address: result.address,\n                  forging: result.forging,\n                  height: height,\n                  maxHeightPreviouslyForged: maxHeightPreviouslyForged,\n                  maxHeightPrevoted: maxHeightPrevoted\n                }\n              });\n              _context2.next = 21;\n              break;\n\n            case 18:\n              _context2.prev = 18;\n              _context2.t0 = _context2[\"catch\"](11);\n              next(_context2.t0);\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[11, 18]]);\n    }));\n\n    return function (_x3, _x4, _x5) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\n\nexports.updateForging = updateForging;","map":{"version":3,"sources":["../../src/controllers/forging.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateForging = exports.getForgingStatus = void 0;\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst updateForgingParams = {\n    type: 'object',\n    required: ['address', 'password', 'forging'],\n    properties: {\n        address: {\n            type: 'string',\n            description: 'Address should be a hex string',\n        },\n        password: {\n            type: 'string',\n            description: 'Password should be a string',\n        },\n        forging: {\n            type: 'boolean',\n            description: 'Boolean flag to enable or disable forging',\n        },\n        height: {\n            type: 'number',\n            description: 'Delegates previously forged height',\n        },\n        maxHeightPreviouslyForged: {\n            type: 'number',\n            description: 'Delegates previously forged height',\n        },\n        maxHeightPrevoted: {\n            type: 'number',\n            description: 'Delegates largest prevoted height for a block',\n        },\n        overwrite: {\n            type: 'boolean',\n            description: 'Boolean flag to overwrite forger info',\n        },\n    },\n};\nconst isLessThanZero = (value) => value === null || value === undefined || value < 0;\nconst getForgingStatus = (channel) => async (_req, res) => {\n    const forgingDelegates = await channel.invoke('app:getForgingStatus');\n    res.status(200).json({\n        meta: { count: forgingDelegates.length },\n        data: forgingDelegates,\n    });\n};\nexports.getForgingStatus = getForgingStatus;\nconst updateForging = (channel) => async (req, res, next) => {\n    const errors = lisk_validator_1.validator.validate(updateForgingParams, req.body);\n    if (errors.length) {\n        res.status(400).send({\n            errors: [{ message: new lisk_validator_1.LiskValidationError([...errors]).message }],\n        });\n        return;\n    }\n    const { address, password, forging, height, maxHeightPreviouslyForged, maxHeightPrevoted, overwrite, } = req.body;\n    if (!lisk_validator_1.isHexString(address)) {\n        res.status(400).send({\n            errors: [{ message: 'The address parameter should be a hex string.' }],\n        });\n        return;\n    }\n    if (isLessThanZero(maxHeightPreviouslyForged) ||\n        isLessThanZero(maxHeightPrevoted) ||\n        isLessThanZero(height)) {\n        res.status(400).send({\n            errors: [\n                {\n                    message: 'The maxHeightPreviouslyForged, maxHeightPrevoted, height parameter must be specified and greater than or equal to 0.',\n                },\n            ],\n        });\n        return;\n    }\n    try {\n        const result = await channel.invoke('app:updateForgingStatus', {\n            address,\n            password,\n            forging,\n            height,\n            maxHeightPreviouslyForged,\n            maxHeightPrevoted,\n            overwrite,\n        });\n        res.status(200).json({\n            meta: { count: 1 },\n            data: {\n                address: result.address,\n                forging: result.forging,\n                height,\n                maxHeightPreviouslyForged,\n                maxHeightPrevoted,\n            },\n        });\n    }\n    catch (err) {\n        next(err);\n    }\n};\nexports.updateForging = updateForging;\n//# sourceMappingURL=forging.js.map"]},"metadata":{},"sourceType":"script"}