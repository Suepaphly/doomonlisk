{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Broadcaster = void 0;\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar schemas_1 = require(\"./schemas\");\n\nvar ENDPOINT_BROADCAST_TRANSACTIONS = 'postTransactionsAnnouncement';\n\nvar Broadcaster = /*#__PURE__*/function () {\n  function Broadcaster(_ref) {\n    var _this = this;\n\n    var transactionPool = _ref.transactionPool,\n        releaseLimit = _ref.releaseLimit,\n        interval = _ref.interval,\n        logger = _ref.logger,\n        networkModule = _ref.networkModule;\n\n    _classCallCheck(this, Broadcaster);\n\n    this._logger = logger;\n    this._transactionPool = transactionPool;\n    this._networkModule = networkModule;\n    this._config = {\n      releaseLimit: releaseLimit,\n      interval: interval\n    };\n    this._transactionIdQueue = [];\n    setInterval(function () {\n      try {\n        _this._broadcast();\n      } catch (err) {\n        _this._logger.error({\n          err: err\n        }, 'Failed to broadcast information');\n      }\n    }, this._config.interval);\n  }\n\n  _createClass(Broadcaster, [{\n    key: \"enqueueTransactionId\",\n    value: function enqueueTransactionId(transactionId) {\n      if (this._transactionIdQueue.find(function (id) {\n        return id.equals(transactionId);\n      }) !== undefined) {\n        return false;\n      }\n\n      this._transactionIdQueue.push(transactionId);\n\n      return true;\n    }\n  }, {\n    key: \"_broadcast\",\n    value: function _broadcast() {\n      var _this2 = this;\n\n      this._transactionIdQueue = this._transactionIdQueue.filter(function (id) {\n        return _this2._transactionPool.contains(id);\n      });\n\n      if (this._transactionIdQueue.length > 0) {\n        var transactionIds = this._transactionIdQueue.slice(0, this._config.releaseLimit);\n\n        var data = lisk_codec_1.codec.encode(schemas_1.transactionIdsSchema, {\n          transactionIds: transactionIds\n        });\n\n        this._networkModule.broadcast({\n          event: ENDPOINT_BROADCAST_TRANSACTIONS,\n          data: data\n        });\n\n        this._transactionIdQueue = this._transactionIdQueue.filter(function (id) {\n          return !transactionIds.includes(id);\n        });\n      }\n    }\n  }]);\n\n  return Broadcaster;\n}();\n\nexports.Broadcaster = Broadcaster;","map":{"version":3,"sources":["../../../src/node/transport/broadcaster.ts"],"names":[],"mappings":";;;;;;;;;;;AAcA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAKA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,IAAM,+BAA+B,GAAG,8BAAxC;;IAaa,W;AAOZ,6BAMyB;AAAA;;AAAA,QALxB,eAKwB,QALxB,eAKwB;AAAA,QAJxB,YAIwB,QAJxB,YAIwB;AAAA,QAHxB,QAGwB,QAHxB,QAGwB;AAAA,QAFxB,MAEwB,QAFxB,MAEwB;AAAA,QADxB,aACwB,QADxB,aACwB;;AAAA;;AACxB,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,gBAAL,GAAwB,eAAxB;AACA,SAAK,cAAL,GAAsB,aAAtB;AACA,SAAK,OAAL,GAAe;AACd,MAAA,YAAY,EAAZ,YADc;AAEd,MAAA,QAAQ,EAAR;AAFc,KAAf;AAIA,SAAK,mBAAL,GAA2B,EAA3B;AAGA,IAAA,WAAW,CAAC,YAAK;AAChB,UAAI;AACH,QAAA,KAAI,CAAC,UAAL;AACA,OAFD,CAEE,OAAO,GAAP,EAAY;AAEb,QAAA,KAAI,CAAC,OAAL,CAAa,KAAb,CAAmB;AAAE,UAAA,GAAG,EAAH;AAAF,SAAnB,EAA4B,iCAA5B;AACA;AACD,KAPU,EAOR,KAAK,OAAL,CAAa,QAPL,CAAX;AAQA;;;;WAEM,8BAAqB,aAArB,EAA0C;AAChD,UAAI,KAAK,mBAAL,CAAyB,IAAzB,CAA8B,UAAA,EAAE;AAAA,eAAI,EAAE,CAAC,MAAH,CAAU,aAAV,CAAJ;AAAA,OAAhC,MAAkE,SAAtE,EAAiF;AAChF,eAAO,KAAP;AACA;;AACD,WAAK,mBAAL,CAAyB,IAAzB,CAA8B,aAA9B;;AAEA,aAAO,IAAP;AACA;;;WAEO,sBAAU;AAAA;;AACjB,WAAK,mBAAL,GAA2B,KAAK,mBAAL,CAAyB,MAAzB,CAAgC,UAAA,EAAE;AAAA,eAC5D,MAAI,CAAC,gBAAL,CAAsB,QAAtB,CAA+B,EAA/B,CAD4D;AAAA,OAAlC,CAA3B;;AAGA,UAAI,KAAK,mBAAL,CAAyB,MAAzB,GAAkC,CAAtC,EAAyC;AACxC,YAAM,cAAc,GAAG,KAAK,mBAAL,CAAyB,KAAzB,CAA+B,CAA/B,EAAkC,KAAK,OAAL,CAAa,YAA/C,CAAvB;;AACA,YAAM,IAAI,GAAG,YAAA,CAAA,KAAA,CAAM,MAAN,CAAa,SAAA,CAAA,oBAAb,EAAmC;AAAE,UAAA,cAAc,EAAd;AAAF,SAAnC,CAAb;;AACA,aAAK,cAAL,CAAoB,SAApB,CAA8B;AAC7B,UAAA,KAAK,EAAE,+BADsB;AAE7B,UAAA,IAAI,EAAJ;AAF6B,SAA9B;;AAKA,aAAK,mBAAL,GAA2B,KAAK,mBAAL,CAAyB,MAAzB,CAC1B,UAAA,EAAE;AAAA,iBAAI,CAAC,cAAc,CAAC,QAAf,CAAwB,EAAxB,CAAL;AAAA,SADwB,CAA3B;AAGA;AACD;;;;;;AA3DF,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Broadcaster = void 0;\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst schemas_1 = require(\"./schemas\");\nconst ENDPOINT_BROADCAST_TRANSACTIONS = 'postTransactionsAnnouncement';\nclass Broadcaster {\n    constructor({ transactionPool, releaseLimit, interval, logger, networkModule, }) {\n        this._logger = logger;\n        this._transactionPool = transactionPool;\n        this._networkModule = networkModule;\n        this._config = {\n            releaseLimit,\n            interval,\n        };\n        this._transactionIdQueue = [];\n        setInterval(() => {\n            try {\n                this._broadcast();\n            }\n            catch (err) {\n                this._logger.error({ err }, 'Failed to broadcast information');\n            }\n        }, this._config.interval);\n    }\n    enqueueTransactionId(transactionId) {\n        if (this._transactionIdQueue.find(id => id.equals(transactionId)) !== undefined) {\n            return false;\n        }\n        this._transactionIdQueue.push(transactionId);\n        return true;\n    }\n    _broadcast() {\n        this._transactionIdQueue = this._transactionIdQueue.filter(id => this._transactionPool.contains(id));\n        if (this._transactionIdQueue.length > 0) {\n            const transactionIds = this._transactionIdQueue.slice(0, this._config.releaseLimit);\n            const data = lisk_codec_1.codec.encode(schemas_1.transactionIdsSchema, { transactionIds });\n            this._networkModule.broadcast({\n                event: ENDPOINT_BROADCAST_TRANSACTIONS,\n                data,\n            });\n            this._transactionIdQueue = this._transactionIdQueue.filter(id => !transactionIds.includes(id));\n        }\n    }\n}\nexports.Broadcaster = Broadcaster;\n//# sourceMappingURL=broadcaster.js.map"]},"metadata":{},"sourceType":"script"}