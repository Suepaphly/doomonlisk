{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isCsv = exports.isVersionMatch = exports.isStringEndsWith = exports.isPort = exports.isIP = exports.isIPV6 = exports.isIPV4 = exports.isProtocolString = exports.isGreaterThanRangedVersion = exports.isLessThanRangedVersion = exports.isRangedSemVer = exports.isSemVer = exports.isEncryptedPassphrase = exports.isHexString = exports.isValidInteger = exports.isBytes = exports.isUInt64 = exports.isSInt64 = exports.isUInt32 = exports.isSInt32 = exports.isBoolean = exports.isString = exports.isNumberString = void 0;\n\nvar semver_1 = require(\"semver\");\n\nvar validator_1 = require(\"validator\");\n\nvar constants_1 = require(\"./constants\");\n\nvar isNumberString = function isNumberString(num) {\n  if (typeof num !== 'string') {\n    return false;\n  }\n\n  return validator_1.default.isInt(num);\n};\n\nexports.isNumberString = isNumberString;\n\nvar isString = function isString(data) {\n  return typeof data === 'string';\n};\n\nexports.isString = isString;\n\nvar isBoolean = function isBoolean(data) {\n  return typeof data === 'boolean';\n};\n\nexports.isBoolean = isBoolean;\n\nvar isSInt32 = function isSInt32(data) {\n  if (typeof data === 'number' && Number.isInteger(data)) {\n    return data <= constants_1.MAX_SINT32 && data >= constants_1.MIN_SINT32;\n  }\n\n  return false;\n};\n\nexports.isSInt32 = isSInt32;\n\nvar isUInt32 = function isUInt32(data) {\n  if (typeof data === 'number' && Number.isInteger(data)) {\n    return data <= constants_1.MAX_UINT32 && data >= 0;\n  }\n\n  return false;\n};\n\nexports.isUInt32 = isUInt32;\n\nvar isSInt64 = function isSInt64(data) {\n  return typeof data === 'bigint' ? data <= constants_1.MAX_SINT64 && data >= constants_1.MIN_SINT64 : false;\n};\n\nexports.isSInt64 = isSInt64;\n\nvar isUInt64 = function isUInt64(data) {\n  return typeof data === 'bigint' ? data <= constants_1.MAX_UINT64 && data >= BigInt(0) : false;\n};\n\nexports.isUInt64 = isUInt64;\n\nvar isBytes = function isBytes(data) {\n  return Buffer.isBuffer(data);\n};\n\nexports.isBytes = isBytes;\n\nvar isValidInteger = function isValidInteger(num) {\n  return typeof num === 'number' ? Math.floor(num) === num : false;\n};\n\nexports.isValidInteger = isValidInteger;\n\nvar isHexString = function isHexString(data) {\n  if (typeof data !== 'string') {\n    return false;\n  }\n\n  return data === '' || /^[a-f0-9]+$/i.test(data);\n};\n\nexports.isHexString = isHexString;\n\nvar isEncryptedPassphrase = function isEncryptedPassphrase(data) {\n  var keyRegExp = /[a-zA-Z0-9]{2,15}/;\n  var valueRegExp = /[a-f0-9]{1,512}/;\n  var keyValueRegExp = new RegExp(\"\".concat(keyRegExp.source, \"=\").concat(valueRegExp.source));\n  var encryptedPassphraseRegExp = new RegExp(\"^(\".concat(keyValueRegExp.source, \")(?:&(\").concat(keyValueRegExp.source, \")){0,10}$\"));\n  return encryptedPassphraseRegExp.test(data);\n};\n\nexports.isEncryptedPassphrase = isEncryptedPassphrase;\n\nvar isSemVer = function isSemVer(version) {\n  return !!semver_1.valid(version);\n};\n\nexports.isSemVer = isSemVer;\n\nvar isRangedSemVer = function isRangedSemVer(version) {\n  return !!semver_1.validRange(version);\n};\n\nexports.isRangedSemVer = isRangedSemVer;\nexports.isLessThanRangedVersion = semver_1.ltr;\nexports.isGreaterThanRangedVersion = semver_1.gtr;\n\nvar isProtocolString = function isProtocolString(data) {\n  return /^(\\d|[1-9]\\d{1,2})\\.(\\d|[1-9]\\d{1,2})$/.test(data);\n};\n\nexports.isProtocolString = isProtocolString;\nvar IPV4_NUMBER = '4';\nvar IPV6_NUMBER = '6';\n\nvar isIPV4 = function isIPV4(data) {\n  return validator_1.default.isIP(data, IPV4_NUMBER);\n};\n\nexports.isIPV4 = isIPV4;\n\nvar isIPV6 = function isIPV6(data) {\n  return validator_1.default.isIP(data, IPV6_NUMBER);\n};\n\nexports.isIPV6 = isIPV6;\n\nvar isIP = function isIP(data) {\n  return exports.isIPV4(data) || exports.isIPV6(data);\n};\n\nexports.isIP = isIP;\n\nvar isPort = function isPort(port) {\n  return validator_1.default.isPort(port);\n};\n\nexports.isPort = isPort;\n\nvar isStringEndsWith = function isStringEndsWith(target, suffixes) {\n  return suffixes.some(function (suffix) {\n    return target.endsWith(suffix);\n  });\n};\n\nexports.isStringEndsWith = isStringEndsWith;\nexports.isVersionMatch = semver_1.gte;\n\nvar isCsv = function isCsv(data) {\n  if (typeof data !== 'string') {\n    return false;\n  }\n\n  var csvAsArray = data.split(',');\n\n  if (csvAsArray.length > 0) {\n    return true;\n  }\n\n  return false;\n};\n\nexports.isCsv = isCsv;","map":{"version":3,"sources":["../src/validation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isCsv = exports.isVersionMatch = exports.isStringEndsWith = exports.isPort = exports.isIP = exports.isIPV6 = exports.isIPV4 = exports.isProtocolString = exports.isGreaterThanRangedVersion = exports.isLessThanRangedVersion = exports.isRangedSemVer = exports.isSemVer = exports.isEncryptedPassphrase = exports.isHexString = exports.isValidInteger = exports.isBytes = exports.isUInt64 = exports.isSInt64 = exports.isUInt32 = exports.isSInt32 = exports.isBoolean = exports.isString = exports.isNumberString = void 0;\nconst semver_1 = require(\"semver\");\nconst validator_1 = require(\"validator\");\nconst constants_1 = require(\"./constants\");\nconst isNumberString = (num) => {\n    if (typeof num !== 'string') {\n        return false;\n    }\n    return validator_1.default.isInt(num);\n};\nexports.isNumberString = isNumberString;\nconst isString = (data) => typeof data === 'string';\nexports.isString = isString;\nconst isBoolean = (data) => typeof data === 'boolean';\nexports.isBoolean = isBoolean;\nconst isSInt32 = (data) => {\n    if (typeof data === 'number' && Number.isInteger(data)) {\n        return data <= constants_1.MAX_SINT32 && data >= constants_1.MIN_SINT32;\n    }\n    return false;\n};\nexports.isSInt32 = isSInt32;\nconst isUInt32 = (data) => {\n    if (typeof data === 'number' && Number.isInteger(data)) {\n        return data <= constants_1.MAX_UINT32 && data >= 0;\n    }\n    return false;\n};\nexports.isUInt32 = isUInt32;\nconst isSInt64 = (data) => typeof data === 'bigint' ? data <= constants_1.MAX_SINT64 && data >= constants_1.MIN_SINT64 : false;\nexports.isSInt64 = isSInt64;\nconst isUInt64 = (data) => typeof data === 'bigint' ? data <= constants_1.MAX_UINT64 && data >= BigInt(0) : false;\nexports.isUInt64 = isUInt64;\nconst isBytes = (data) => Buffer.isBuffer(data);\nexports.isBytes = isBytes;\nconst isValidInteger = (num) => typeof num === 'number' ? Math.floor(num) === num : false;\nexports.isValidInteger = isValidInteger;\nconst isHexString = (data) => {\n    if (typeof data !== 'string') {\n        return false;\n    }\n    return data === '' || /^[a-f0-9]+$/i.test(data);\n};\nexports.isHexString = isHexString;\nconst isEncryptedPassphrase = (data) => {\n    const keyRegExp = /[a-zA-Z0-9]{2,15}/;\n    const valueRegExp = /[a-f0-9]{1,512}/;\n    const keyValueRegExp = new RegExp(`${keyRegExp.source}=${valueRegExp.source}`);\n    const encryptedPassphraseRegExp = new RegExp(`^(${keyValueRegExp.source})(?:&(${keyValueRegExp.source})){0,10}$`);\n    return encryptedPassphraseRegExp.test(data);\n};\nexports.isEncryptedPassphrase = isEncryptedPassphrase;\nconst isSemVer = (version) => !!semver_1.valid(version);\nexports.isSemVer = isSemVer;\nconst isRangedSemVer = (version) => !!semver_1.validRange(version);\nexports.isRangedSemVer = isRangedSemVer;\nexports.isLessThanRangedVersion = semver_1.ltr;\nexports.isGreaterThanRangedVersion = semver_1.gtr;\nconst isProtocolString = (data) => /^(\\d|[1-9]\\d{1,2})\\.(\\d|[1-9]\\d{1,2})$/.test(data);\nexports.isProtocolString = isProtocolString;\nconst IPV4_NUMBER = '4';\nconst IPV6_NUMBER = '6';\nconst isIPV4 = (data) => validator_1.default.isIP(data, IPV4_NUMBER);\nexports.isIPV4 = isIPV4;\nconst isIPV6 = (data) => validator_1.default.isIP(data, IPV6_NUMBER);\nexports.isIPV6 = isIPV6;\nconst isIP = (data) => exports.isIPV4(data) || exports.isIPV6(data);\nexports.isIP = isIP;\nconst isPort = (port) => validator_1.default.isPort(port);\nexports.isPort = isPort;\nconst isStringEndsWith = (target, suffixes) => suffixes.some(suffix => target.endsWith(suffix));\nexports.isStringEndsWith = isStringEndsWith;\nexports.isVersionMatch = semver_1.gte;\nconst isCsv = (data) => {\n    if (typeof data !== 'string') {\n        return false;\n    }\n    const csvAsArray = data.split(',');\n    if (csvAsArray.length > 0) {\n        return true;\n    }\n    return false;\n};\nexports.isCsv = isCsv;\n//# sourceMappingURL=validation.js.map"]},"metadata":{},"sourceType":"script"}