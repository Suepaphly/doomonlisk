{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VoteTransactionAsset = void 0;\n\nvar base_asset_1 = require(\"../../base_asset\");\n\nvar errors_1 = require(\"../../../errors\");\n\nvar constants_1 = require(\"../constants\");\n\nvar utils_1 = require(\"../utils\");\n\nvar VoteTransactionAsset = /*#__PURE__*/function (_base_asset_1$BaseAss) {\n  _inherits(VoteTransactionAsset, _base_asset_1$BaseAss);\n\n  var _super = _createSuper(VoteTransactionAsset);\n\n  function VoteTransactionAsset() {\n    var _this;\n\n    _classCallCheck(this, VoteTransactionAsset);\n\n    _this = _super.apply(this, arguments);\n    _this.name = 'voteDelegate';\n    _this.id = 1;\n    _this.schema = {\n      $id: 'lisk/dpos/vote',\n      type: 'object',\n      required: ['votes'],\n      properties: {\n        votes: {\n          type: 'array',\n          minItems: 1,\n          maxItems: 20,\n          items: {\n            type: 'object',\n            required: ['delegateAddress', 'amount'],\n            properties: {\n              delegateAddress: {\n                dataType: 'bytes',\n                fieldNumber: 1,\n                minLength: 20,\n                maxLength: 20\n              },\n              amount: {\n                dataType: 'sint64',\n                fieldNumber: 2\n              }\n            }\n          },\n          fieldNumber: 1\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(VoteTransactionAsset, [{\n    key: \"validate\",\n    value: function validate(_ref) {\n      var asset = _ref.asset;\n      var upVoteCount = 0;\n      var downVoteCount = 0;\n      var addressSet = {};\n\n      var _iterator = _createForOfIteratorHelper(asset.votes),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var vote = _step.value;\n          addressSet[vote.delegateAddress.toString('hex')] = true;\n\n          if (vote.amount === BigInt(0)) {\n            throw new errors_1.ValidationError('Amount cannot be 0.', '');\n          }\n\n          if (vote.amount % constants_1.TEN_UNIT !== BigInt(0)) {\n            throw new errors_1.ValidationError('Amount should be multiple of 10 * 10^8.', vote.amount.toString());\n          }\n\n          if (vote.amount > BigInt(0)) {\n            upVoteCount += 1;\n          } else if (vote.amount < BigInt(0)) {\n            downVoteCount += 1;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (upVoteCount > constants_1.MAX_VOTE) {\n        throw new errors_1.ValidationError('Upvote can only be casted upto 10.', upVoteCount.toString());\n      }\n\n      if (downVoteCount > constants_1.MAX_VOTE) {\n        throw new errors_1.ValidationError('Downvote can only be casted upto 10.', downVoteCount.toString());\n      }\n\n      if (Object.keys(addressSet).length !== asset.votes.length) {\n        throw new errors_1.ValidationError('Delegate address must be unique.', asset.votes.map(function (v) {\n          return v.delegateAddress.toString('hex');\n        }).join());\n      }\n    }\n  }, {\n    key: \"apply\",\n    value: function () {\n      var _apply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var asset, transaction, store, reducerHandler, assetCopy, _iterator2, _step2, _loop;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                asset = _ref2.asset, transaction = _ref2.transaction, store = _ref2.stateStore, reducerHandler = _ref2.reducerHandler;\n                assetCopy = _toConsumableArray(asset.votes);\n                assetCopy.sort(function (a, b) {\n                  var diff = a.amount - b.amount;\n\n                  if (diff > BigInt(0)) {\n                    return 1;\n                  }\n\n                  if (diff < BigInt(0)) {\n                    return -1;\n                  }\n\n                  return 0;\n                });\n                _iterator2 = _createForOfIteratorHelper(assetCopy);\n                _context2.prev = 4;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var vote, sender, votedDelegate, originalUpvoteIndex, _originalUpvoteIndex, index, upvote, delegate;\n\n                  return _regeneratorRuntime.wrap(function _loop$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          vote = _step2.value;\n                          _context.next = 3;\n                          return store.account.get(transaction.senderAddress);\n\n                        case 3:\n                          sender = _context.sent;\n                          _context.next = 6;\n                          return store.account.get(vote.delegateAddress);\n\n                        case 6:\n                          votedDelegate = _context.sent;\n\n                          if (!(votedDelegate.dpos.delegate.username === '')) {\n                            _context.next = 9;\n                            break;\n                          }\n\n                          throw new Error(\"Voted delegate address \".concat(votedDelegate.address.toString('hex'), \" is not registered.\"));\n\n                        case 9:\n                          if (!(vote.amount < BigInt(0))) {\n                            _context.next = 23;\n                            break;\n                          }\n\n                          originalUpvoteIndex = sender.dpos.sentVotes.findIndex(function (senderVote) {\n                            return senderVote.delegateAddress.equals(vote.delegateAddress);\n                          });\n\n                          if (!(originalUpvoteIndex < 0)) {\n                            _context.next = 13;\n                            break;\n                          }\n\n                          throw new Error('Cannot cast downvote to delegate who is not upvoted.');\n\n                        case 13:\n                          sender.dpos.sentVotes[originalUpvoteIndex].amount += vote.amount;\n\n                          if (!(sender.dpos.sentVotes[originalUpvoteIndex].amount < BigInt(0))) {\n                            _context.next = 16;\n                            break;\n                          }\n\n                          throw new Error('The downvote amount cannot be greater than upvoted amount.');\n\n                        case 16:\n                          if (sender.dpos.sentVotes[originalUpvoteIndex].amount === BigInt(0)) {\n                            sender.dpos.sentVotes = sender.dpos.sentVotes.filter(function (senderVote) {\n                              return !senderVote.delegateAddress.equals(vote.delegateAddress);\n                            });\n                          }\n\n                          sender.dpos.unlocking.push({\n                            delegateAddress: vote.delegateAddress,\n                            amount: BigInt(-1) * vote.amount,\n                            unvoteHeight: store.chain.lastBlockHeaders[0].height + 1\n                          });\n                          utils_1.sortUnlocking(sender.dpos.unlocking);\n\n                          if (!(sender.dpos.unlocking.length > constants_1.MAX_UNLOCKING)) {\n                            _context.next = 21;\n                            break;\n                          }\n\n                          throw new Error(\"Cannot downvote which exceeds account.dpos.unlocking to have more than \".concat(constants_1.MAX_UNLOCKING.toString(), \".\"));\n\n                        case 21:\n                          _context.next = 33;\n                          break;\n\n                        case 23:\n                          _originalUpvoteIndex = sender.dpos.sentVotes.findIndex(function (senderVote) {\n                            return senderVote.delegateAddress.equals(vote.delegateAddress);\n                          });\n                          index = _originalUpvoteIndex > -1 ? _originalUpvoteIndex : sender.dpos.sentVotes.length;\n                          upvote = _originalUpvoteIndex > -1 ? sender.dpos.sentVotes[_originalUpvoteIndex] : {\n                            delegateAddress: vote.delegateAddress,\n                            amount: BigInt(0)\n                          };\n                          upvote.amount += vote.amount;\n                          _context.next = 29;\n                          return reducerHandler.invoke('token:debit', {\n                            address: transaction.senderAddress,\n                            amount: vote.amount\n                          });\n\n                        case 29:\n                          sender.dpos.sentVotes[index] = upvote;\n                          sender.dpos.sentVotes.sort(function (a, b) {\n                            return a.delegateAddress.compare(b.delegateAddress);\n                          });\n\n                          if (!(sender.dpos.sentVotes.length > constants_1.MAX_VOTE)) {\n                            _context.next = 33;\n                            break;\n                          }\n\n                          throw new Error(\"Account can only vote upto \".concat(constants_1.MAX_VOTE.toString(), \".\"));\n\n                        case 33:\n                          _context.next = 35;\n                          return store.account.set(sender.address, sender);\n\n                        case 35:\n                          _context.next = 37;\n                          return store.account.get(vote.delegateAddress);\n\n                        case 37:\n                          delegate = _context.sent;\n                          delegate.dpos.delegate.totalVotesReceived += vote.amount;\n                          _context.next = 41;\n                          return store.account.set(delegate.address, delegate);\n\n                        case 41:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n\n                _iterator2.s();\n\n              case 7:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                return _context2.delegateYield(_loop(), \"t0\", 9);\n\n              case 9:\n                _context2.next = 7;\n                break;\n\n              case 11:\n                _context2.next = 16;\n                break;\n\n              case 13:\n                _context2.prev = 13;\n                _context2.t1 = _context2[\"catch\"](4);\n\n                _iterator2.e(_context2.t1);\n\n              case 16:\n                _context2.prev = 16;\n\n                _iterator2.f();\n\n                return _context2.finish(16);\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, null, [[4, 13, 16, 19]]);\n      }));\n\n      function apply(_x) {\n        return _apply.apply(this, arguments);\n      }\n\n      return apply;\n    }()\n  }]);\n\n  return VoteTransactionAsset;\n}(base_asset_1.BaseAsset);\n\nexports.VoteTransactionAsset = VoteTransactionAsset;","map":{"version":3,"sources":["../../../../src/modules/dpos/transaction_assets/vote_transaction_asset.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VoteTransactionAsset = void 0;\nconst base_asset_1 = require(\"../../base_asset\");\nconst errors_1 = require(\"../../../errors\");\nconst constants_1 = require(\"../constants\");\nconst utils_1 = require(\"../utils\");\nclass VoteTransactionAsset extends base_asset_1.BaseAsset {\n    constructor() {\n        super(...arguments);\n        this.name = 'voteDelegate';\n        this.id = 1;\n        this.schema = {\n            $id: 'lisk/dpos/vote',\n            type: 'object',\n            required: ['votes'],\n            properties: {\n                votes: {\n                    type: 'array',\n                    minItems: 1,\n                    maxItems: 20,\n                    items: {\n                        type: 'object',\n                        required: ['delegateAddress', 'amount'],\n                        properties: {\n                            delegateAddress: {\n                                dataType: 'bytes',\n                                fieldNumber: 1,\n                                minLength: 20,\n                                maxLength: 20,\n                            },\n                            amount: {\n                                dataType: 'sint64',\n                                fieldNumber: 2,\n                            },\n                        },\n                    },\n                    fieldNumber: 1,\n                },\n            },\n        };\n    }\n    validate({ asset }) {\n        let upVoteCount = 0;\n        let downVoteCount = 0;\n        const addressSet = {};\n        for (const vote of asset.votes) {\n            addressSet[vote.delegateAddress.toString('hex')] = true;\n            if (vote.amount === BigInt(0)) {\n                throw new errors_1.ValidationError('Amount cannot be 0.', '');\n            }\n            if (vote.amount % constants_1.TEN_UNIT !== BigInt(0)) {\n                throw new errors_1.ValidationError('Amount should be multiple of 10 * 10^8.', vote.amount.toString());\n            }\n            if (vote.amount > BigInt(0)) {\n                upVoteCount += 1;\n            }\n            else if (vote.amount < BigInt(0)) {\n                downVoteCount += 1;\n            }\n        }\n        if (upVoteCount > constants_1.MAX_VOTE) {\n            throw new errors_1.ValidationError('Upvote can only be casted upto 10.', upVoteCount.toString());\n        }\n        if (downVoteCount > constants_1.MAX_VOTE) {\n            throw new errors_1.ValidationError('Downvote can only be casted upto 10.', downVoteCount.toString());\n        }\n        if (Object.keys(addressSet).length !== asset.votes.length) {\n            throw new errors_1.ValidationError('Delegate address must be unique.', asset.votes.map(v => v.delegateAddress.toString('hex')).join());\n        }\n    }\n    async apply({ asset, transaction, stateStore: store, reducerHandler, }) {\n        const assetCopy = [...asset.votes];\n        assetCopy.sort((a, b) => {\n            const diff = a.amount - b.amount;\n            if (diff > BigInt(0)) {\n                return 1;\n            }\n            if (diff < BigInt(0)) {\n                return -1;\n            }\n            return 0;\n        });\n        for (const vote of assetCopy) {\n            const sender = await store.account.get(transaction.senderAddress);\n            const votedDelegate = await store.account.get(vote.delegateAddress);\n            if (votedDelegate.dpos.delegate.username === '') {\n                throw new Error(`Voted delegate address ${votedDelegate.address.toString('hex')} is not registered.`);\n            }\n            if (vote.amount < BigInt(0)) {\n                const originalUpvoteIndex = sender.dpos.sentVotes.findIndex(senderVote => senderVote.delegateAddress.equals(vote.delegateAddress));\n                if (originalUpvoteIndex < 0) {\n                    throw new Error('Cannot cast downvote to delegate who is not upvoted.');\n                }\n                sender.dpos.sentVotes[originalUpvoteIndex].amount += vote.amount;\n                if (sender.dpos.sentVotes[originalUpvoteIndex].amount < BigInt(0)) {\n                    throw new Error('The downvote amount cannot be greater than upvoted amount.');\n                }\n                if (sender.dpos.sentVotes[originalUpvoteIndex].amount === BigInt(0)) {\n                    sender.dpos.sentVotes = sender.dpos.sentVotes.filter(senderVote => !senderVote.delegateAddress.equals(vote.delegateAddress));\n                }\n                sender.dpos.unlocking.push({\n                    delegateAddress: vote.delegateAddress,\n                    amount: BigInt(-1) * vote.amount,\n                    unvoteHeight: store.chain.lastBlockHeaders[0].height + 1,\n                });\n                utils_1.sortUnlocking(sender.dpos.unlocking);\n                if (sender.dpos.unlocking.length > constants_1.MAX_UNLOCKING) {\n                    throw new Error(`Cannot downvote which exceeds account.dpos.unlocking to have more than ${constants_1.MAX_UNLOCKING.toString()}.`);\n                }\n            }\n            else {\n                const originalUpvoteIndex = sender.dpos.sentVotes.findIndex(senderVote => senderVote.delegateAddress.equals(vote.delegateAddress));\n                const index = originalUpvoteIndex > -1 ? originalUpvoteIndex : sender.dpos.sentVotes.length;\n                const upvote = originalUpvoteIndex > -1\n                    ? sender.dpos.sentVotes[originalUpvoteIndex]\n                    : {\n                        delegateAddress: vote.delegateAddress,\n                        amount: BigInt(0),\n                    };\n                upvote.amount += vote.amount;\n                await reducerHandler.invoke('token:debit', {\n                    address: transaction.senderAddress,\n                    amount: vote.amount,\n                });\n                sender.dpos.sentVotes[index] = upvote;\n                sender.dpos.sentVotes.sort((a, b) => a.delegateAddress.compare(b.delegateAddress));\n                if (sender.dpos.sentVotes.length > constants_1.MAX_VOTE) {\n                    throw new Error(`Account can only vote upto ${constants_1.MAX_VOTE.toString()}.`);\n                }\n            }\n            await store.account.set(sender.address, sender);\n            const delegate = await store.account.get(vote.delegateAddress);\n            delegate.dpos.delegate.totalVotesReceived += vote.amount;\n            await store.account.set(delegate.address, delegate);\n        }\n    }\n}\nexports.VoteTransactionAsset = VoteTransactionAsset;\n//# sourceMappingURL=vote_transaction_asset.js.map"]},"metadata":{},"sourceType":"script"}