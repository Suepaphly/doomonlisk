{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transport = void 0;\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nvar errors_1 = require(\"./errors\");\n\nvar schemas_1 = require(\"./schemas\");\n\nvar broadcaster_1 = require(\"./broadcaster\");\n\nvar errors_2 = require(\"../../errors\");\n\nvar constants_1 = require(\"../../constants\");\n\nvar DEFAULT_RATE_RESET_TIME = 10000;\nvar DEFAULT_RATE_LIMIT_FREQUENCY = 3;\nvar DEFAULT_LAST_BLOCK_RATE_LIMIT_FREQUENCY = 10;\nvar DEFAULT_COMMON_BLOCK_RATE_LIMIT_FREQUENCY = 10;\nvar DEFAULT_BLOCKS_FROM_IDS_RATE_LIMIT_FREQUENCY = 100;\nvar DEFAULT_RELEASE_LIMIT = 100;\nvar DEFAULT_RELEASE_INTERVAL = 5000;\n\nvar Transport = /*#__PURE__*/function () {\n  function Transport(_ref) {\n    var _this = this;\n\n    var channel = _ref.channel,\n        logger = _ref.logger,\n        synchronizer = _ref.synchronizer,\n        transactionPoolModule = _ref.transactionPoolModule,\n        chainModule = _ref.chainModule,\n        processorModule = _ref.processorModule,\n        networkModule = _ref.networkModule;\n\n    _classCallCheck(this, Transport);\n\n    this._channel = channel;\n    this._logger = logger;\n    this._synchronizerModule = synchronizer;\n    this._transactionPoolModule = transactionPoolModule;\n    this._chainModule = chainModule;\n    this._processorModule = processorModule;\n    this._networkModule = networkModule;\n    this._broadcaster = new broadcaster_1.Broadcaster({\n      transactionPool: this._transactionPoolModule,\n      logger: this._logger,\n      releaseLimit: DEFAULT_RELEASE_LIMIT,\n      interval: DEFAULT_RELEASE_INTERVAL,\n      networkModule: this._networkModule\n    });\n    this._rateTracker = {};\n    setInterval(function () {\n      _this._rateTracker = {};\n    }, DEFAULT_RATE_RESET_TIME);\n  }\n\n  _createClass(Transport, [{\n    key: \"handleBroadcastTransaction\",\n    value: function handleBroadcastTransaction(transaction) {\n      this._broadcaster.enqueueTransactionId(transaction.id);\n\n      this._channel.publish(constants_1.APP_EVENT_TRANSACTION_NEW, {\n        transaction: transaction.getBytes().toString('hex')\n      });\n    }\n  }, {\n    key: \"handleBroadcastBlock\",\n    value: function () {\n      var _handleBroadcastBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(block) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._synchronizerModule.isActive) {\n                  _context.next = 3;\n                  break;\n                }\n\n                this._logger.debug('Transport->onBroadcastBlock: Aborted - blockchain synchronization in progress');\n\n                return _context.abrupt(\"return\", null);\n\n              case 3:\n                data = lisk_codec_1.codec.encode(schemas_1.postBlockEventSchema, {\n                  block: this._chainModule.dataAccess.encode(block)\n                });\n                return _context.abrupt(\"return\", this._networkModule.send({\n                  event: 'postBlock',\n                  data: data\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleBroadcastBlock(_x) {\n        return _handleBroadcastBlock.apply(this, arguments);\n      }\n\n      return handleBroadcastBlock;\n    }()\n  }, {\n    key: \"handleRPCGetLastBlock\",\n    value: function handleRPCGetLastBlock(peerId) {\n      this._addRateLimit('getLastBlock', peerId, DEFAULT_LAST_BLOCK_RATE_LIMIT_FREQUENCY);\n\n      return this._chainModule.dataAccess.encode(this._chainModule.lastBlock);\n    }\n  }, {\n    key: \"handleRPCGetBlocksFromId\",\n    value: function () {\n      var _handleRPCGetBlocksFromId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data, peerId) {\n        var _this2 = this;\n\n        var decodedData, errors, error, blockId, lastBlock, lastBlockHeight, fetchUntilHeight, blocks, encodedBlocks;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this._addRateLimit('getBlocksFromId', peerId, DEFAULT_BLOCKS_FROM_IDS_RATE_LIMIT_FREQUENCY);\n\n                decodedData = lisk_codec_1.codec.decode(schemas_1.getBlocksFromIdRequestSchema, data);\n                errors = lisk_validator_1.validator.validate(schemas_1.getBlocksFromIdRequestSchema, decodedData);\n\n                if (!errors.length) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                error = new lisk_validator_1.LiskValidationError(errors);\n\n                this._logger.warn({\n                  err: error,\n                  req: data\n                }, 'getBlocksFromID request validation failed');\n\n                this._networkModule.applyPenaltyOnPeer({\n                  peerId: peerId,\n                  penalty: 100\n                });\n\n                throw error;\n\n              case 8:\n                blockId = decodedData.blockId;\n                _context2.next = 11;\n                return this._chainModule.dataAccess.getRawBlockHeaderByID(blockId);\n\n              case 11:\n                lastBlock = _context2.sent;\n                lastBlockHeight = lastBlock.height;\n                fetchUntilHeight = lastBlockHeight + 103;\n                _context2.next = 16;\n                return this._chainModule.dataAccess.getBlocksByHeightBetween(lastBlockHeight + 1, fetchUntilHeight);\n\n              case 16:\n                blocks = _context2.sent;\n                encodedBlocks = blocks.map(function (block) {\n                  return _this2._chainModule.dataAccess.encode(block);\n                });\n                return _context2.abrupt(\"return\", lisk_codec_1.codec.encode(schemas_1.getBlocksFromIdResponseSchema, {\n                  blocks: encodedBlocks\n                }));\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handleRPCGetBlocksFromId(_x2, _x3) {\n        return _handleRPCGetBlocksFromId.apply(this, arguments);\n      }\n\n      return handleRPCGetBlocksFromId;\n    }()\n  }, {\n    key: \"handleRPCGetHighestCommonBlockID\",\n    value: function () {\n      var _handleRPCGetHighestCommonBlockID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(data, peerId) {\n        var blockIds, errors, error, commonBlockID;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._addRateLimit('getHighestCommonBlock', peerId, DEFAULT_COMMON_BLOCK_RATE_LIMIT_FREQUENCY);\n\n                blockIds = lisk_codec_1.codec.decode(schemas_1.getHighestCommonBlockRequestSchema, data);\n                errors = lisk_validator_1.validator.validate(schemas_1.getHighestCommonBlockRequestSchema, blockIds);\n\n                if (!(errors.length || !lisk_utils_1.objects.bufferArrayUniqueItems(blockIds.ids))) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                error = new lisk_validator_1.LiskValidationError(errors);\n\n                this._logger.warn({\n                  err: error,\n                  req: data\n                }, 'getHighestCommonBlock request validation failed');\n\n                this._networkModule.applyPenaltyOnPeer({\n                  peerId: peerId,\n                  penalty: 100\n                });\n\n                throw error;\n\n              case 8:\n                _context3.next = 10;\n                return this._chainModule.dataAccess.getHighestCommonBlockID(blockIds.ids);\n\n              case 10:\n                commonBlockID = _context3.sent;\n                return _context3.abrupt(\"return\", lisk_codec_1.codec.encode(schemas_1.getHighestCommonBlockResponseSchema, {\n                  id: commonBlockID !== null && commonBlockID !== void 0 ? commonBlockID : Buffer.alloc(0)\n                }));\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleRPCGetHighestCommonBlockID(_x4, _x5) {\n        return _handleRPCGetHighestCommonBlockID.apply(this, arguments);\n      }\n\n      return handleRPCGetHighestCommonBlockID;\n    }()\n  }, {\n    key: \"handleEventPostBlock\",\n    value: function () {\n      var _handleEventPostBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data, peerId) {\n        var errorMessage, decodedData, errors, blockBytes, block;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this._synchronizerModule.isActive) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                this._logger.debug(\"Client is syncing. Can't process new block at the moment.\");\n\n                return _context4.abrupt(\"return\");\n\n              case 3:\n                if (!(data === undefined)) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                errorMessage = 'Received invalid post block data';\n\n                this._logger.warn({\n                  errorMessage: errorMessage,\n                  module: 'transport',\n                  data: data\n                }, errorMessage);\n\n                this._networkModule.applyPenaltyOnPeer({\n                  peerId: peerId,\n                  penalty: 100\n                });\n\n                return _context4.abrupt(\"return\");\n\n              case 8:\n                decodedData = lisk_codec_1.codec.decode(schemas_1.postBlockEventSchema, data);\n                errors = lisk_validator_1.validator.validate(schemas_1.postBlockEventSchema, decodedData);\n\n                if (!errors.length) {\n                  _context4.next = 14;\n                  break;\n                }\n\n                this._logger.warn({\n                  errors: errors,\n                  module: 'transport',\n                  data: data\n                }, 'Received post block broadcast request in unexpected format');\n\n                this._networkModule.applyPenaltyOnPeer({\n                  peerId: peerId,\n                  penalty: 100\n                });\n\n                throw new lisk_validator_1.LiskValidationError(errors);\n\n              case 14:\n                blockBytes = decodedData.block;\n\n                this._channel.publish(constants_1.APP_EVENT_NETWORK_EVENT, {\n                  event: constants_1.EVENT_POST_BLOCK,\n                  data: {\n                    block: blockBytes.toString('hex')\n                  }\n                });\n\n                _context4.prev = 16;\n                block = this._chainModule.dataAccess.decode(blockBytes);\n                _context4.next = 25;\n                break;\n\n              case 20:\n                _context4.prev = 20;\n                _context4.t0 = _context4[\"catch\"](16);\n\n                this._logger.warn({\n                  err: _context4.t0,\n                  data: data\n                }, 'Received post block broadcast request in not decodable format');\n\n                this._networkModule.applyPenaltyOnPeer({\n                  peerId: peerId,\n                  penalty: 100\n                });\n\n                throw errors;\n\n              case 25:\n                _context4.prev = 25;\n                _context4.next = 28;\n                return this._processorModule.process(block, {\n                  peerId: peerId\n                });\n\n              case 28:\n                _context4.next = 34;\n                break;\n\n              case 30:\n                _context4.prev = 30;\n                _context4.t1 = _context4[\"catch\"](25);\n\n                if (_context4.t1 instanceof errors_2.ApplyPenaltyError) {\n                  this._logger.warn({\n                    err: _context4.t1,\n                    data: data\n                  }, 'Received post block broadcast request with invalid block');\n\n                  this._networkModule.applyPenaltyOnPeer({\n                    peerId: peerId,\n                    penalty: 100\n                  });\n                }\n\n                throw _context4.t1;\n\n              case 34:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[16, 20], [25, 30]]);\n      }));\n\n      function handleEventPostBlock(_x6, _x7) {\n        return _handleEventPostBlock.apply(this, arguments);\n      }\n\n      return handleEventPostBlock;\n    }()\n  }, {\n    key: \"handleRPCGetTransactions\",\n    value: function () {\n      var _handleRPCGetTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(data, peerId) {\n        var decodedData, errors, _decodedData, transactionIds, transactionsBySender, transactions, error, transactionsFromQueues, idsNotInPool, _iterator, _step, id, transaction, transactionsFromDatabase;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this._addRateLimit('getTransactions', peerId, DEFAULT_RATE_LIMIT_FREQUENCY);\n\n                decodedData = {\n                  transactionIds: []\n                };\n\n                if (!Buffer.isBuffer(data)) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                decodedData = lisk_codec_1.codec.decode(schemas_1.transactionIdsSchema, data);\n                errors = lisk_validator_1.validator.validate(schemas_1.transactionIdsSchema, decodedData);\n\n                if (!(errors.length || !lisk_utils_1.objects.bufferArrayUniqueItems(decodedData.transactionIds))) {\n                  _context5.next = 9;\n                  break;\n                }\n\n                this._logger.warn({\n                  err: errors,\n                  peerId: peerId\n                }, 'Received invalid getTransactions body');\n\n                this._networkModule.applyPenaltyOnPeer({\n                  peerId: peerId,\n                  penalty: 100\n                });\n\n                throw new lisk_validator_1.LiskValidationError(errors);\n\n              case 9:\n                _decodedData = decodedData, transactionIds = _decodedData.transactionIds;\n\n                if (transactionIds === null || transactionIds === void 0 ? void 0 : transactionIds.length) {\n                  _context5.next = 15;\n                  break;\n                }\n\n                transactionsBySender = this._transactionPoolModule.getProcessableTransactions();\n                transactions = transactionsBySender.values().flat().map(function (tx) {\n                  return tx.getBytes();\n                });\n                transactions.splice(DEFAULT_RELEASE_LIMIT);\n                return _context5.abrupt(\"return\", lisk_codec_1.codec.encode(schemas_1.transactionsSchema, {\n                  transactions: transactions\n                }));\n\n              case 15:\n                if (!(transactionIds.length > DEFAULT_RELEASE_LIMIT)) {\n                  _context5.next = 20;\n                  break;\n                }\n\n                error = new Error(\"Requested number of transactions \".concat(transactionIds.length, \" exceeds maximum allowed.\"));\n\n                this._logger.warn({\n                  err: error,\n                  peerId: peerId\n                }, 'Received invalid request.');\n\n                this._networkModule.applyPenaltyOnPeer({\n                  peerId: peerId,\n                  penalty: 100\n                });\n\n                throw error;\n\n              case 20:\n                transactionsFromQueues = [];\n                idsNotInPool = [];\n                _iterator = _createForOfIteratorHelper(transactionIds);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    id = _step.value;\n                    transaction = this._transactionPoolModule.get(id);\n\n                    if (transaction) {\n                      transactionsFromQueues.push(transaction.getBytes());\n                    } else {\n                      idsNotInPool.push(id);\n                    }\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                if (!idsNotInPool.length) {\n                  _context5.next = 29;\n                  break;\n                }\n\n                _context5.next = 27;\n                return this._chainModule.dataAccess.getTransactionsByIDs(idsNotInPool);\n\n              case 27:\n                transactionsFromDatabase = _context5.sent;\n                return _context5.abrupt(\"return\", lisk_codec_1.codec.encode(schemas_1.transactionsSchema, {\n                  transactions: transactionsFromQueues.concat(transactionsFromDatabase.map(function (t) {\n                    return t.getBytes();\n                  }))\n                }));\n\n              case 29:\n                return _context5.abrupt(\"return\", lisk_codec_1.codec.encode(schemas_1.transactionsSchema, {\n                  transactions: transactionsFromQueues\n                }));\n\n              case 30:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function handleRPCGetTransactions(_x8, _x9) {\n        return _handleRPCGetTransactions.apply(this, arguments);\n      }\n\n      return handleRPCGetTransactions;\n    }()\n  }, {\n    key: \"handleEventPostTransaction\",\n    value: function () {\n      var _handleEventPostTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(data) {\n        var tx, id;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                tx = this._chainModule.dataAccess.decodeTransaction(Buffer.from(data.transaction, 'hex'));\n                _context6.next = 3;\n                return this._receiveTransaction(tx);\n\n              case 3:\n                id = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  transactionId: id.toString('hex')\n                });\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function handleEventPostTransaction(_x10) {\n        return _handleEventPostTransaction.apply(this, arguments);\n      }\n\n      return handleEventPostTransaction;\n    }()\n  }, {\n    key: \"handleEventPostTransactionsAnnouncement\",\n    value: function () {\n      var _handleEventPostTransactionsAnnouncement = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(data, peerId) {\n        var errorMessage, decodedData, errors, transactionIds, encodedIds, unknownTransactionIDs, transactionIdsBuffer, _yield$this$_networkM, encodedData, transactionsData, _iterator2, _step2, transaction, tx;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this._addRateLimit('postTransactionsAnnouncement', peerId, DEFAULT_RATE_LIMIT_FREQUENCY);\n\n                if (!(data === undefined)) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                errorMessage = 'Received invalid transaction announcement data';\n\n                this._logger.warn({\n                  peerId: peerId\n                }, errorMessage);\n\n                this._networkModule.applyPenaltyOnPeer({\n                  peerId: peerId,\n                  penalty: 100\n                });\n\n                return _context7.abrupt(\"return\");\n\n              case 6:\n                decodedData = lisk_codec_1.codec.decode(schemas_1.transactionIdsSchema, data);\n                errors = lisk_validator_1.validator.validate(schemas_1.transactionIdsSchema, decodedData);\n\n                if (!errors.length) {\n                  _context7.next = 12;\n                  break;\n                }\n\n                this._logger.warn({\n                  err: errors,\n                  peerId: peerId\n                }, 'Received invalid transactions body');\n\n                this._networkModule.applyPenaltyOnPeer({\n                  peerId: peerId,\n                  penalty: 100\n                });\n\n                throw new lisk_validator_1.LiskValidationError(errors);\n\n              case 12:\n                transactionIds = decodedData.transactionIds;\n                encodedIds = transactionIds.map(function (id) {\n                  return id.toString('hex');\n                });\n\n                this._channel.publish(constants_1.APP_EVENT_NETWORK_EVENT, {\n                  event: constants_1.EVENT_POST_TRANSACTION_ANNOUNCEMENT,\n                  data: {\n                    transactionIds: encodedIds\n                  }\n                });\n\n                _context7.next = 17;\n                return this._obtainUnknownTransactionIDs(transactionIds);\n\n              case 17:\n                unknownTransactionIDs = _context7.sent;\n\n                if (!(unknownTransactionIDs.length > 0)) {\n                  _context7.next = 50;\n                  break;\n                }\n\n                transactionIdsBuffer = lisk_codec_1.codec.encode(schemas_1.transactionIdsSchema, {\n                  transactionIds: unknownTransactionIDs\n                });\n                _context7.next = 22;\n                return this._networkModule.requestFromPeer({\n                  procedure: 'getTransactions',\n                  data: transactionIdsBuffer,\n                  peerId: peerId\n                });\n\n              case 22:\n                _yield$this$_networkM = _context7.sent;\n                encodedData = _yield$this$_networkM.data;\n                transactionsData = lisk_codec_1.codec.decode(schemas_1.transactionsSchema, encodedData);\n                _context7.prev = 25;\n                _iterator2 = _createForOfIteratorHelper(transactionsData.transactions);\n                _context7.prev = 27;\n\n                _iterator2.s();\n\n              case 29:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context7.next = 36;\n                  break;\n                }\n\n                transaction = _step2.value;\n                tx = this._chainModule.dataAccess.decodeTransaction(transaction);\n                _context7.next = 34;\n                return this._receiveTransaction(tx);\n\n              case 34:\n                _context7.next = 29;\n                break;\n\n              case 36:\n                _context7.next = 41;\n                break;\n\n              case 38:\n                _context7.prev = 38;\n                _context7.t0 = _context7[\"catch\"](27);\n\n                _iterator2.e(_context7.t0);\n\n              case 41:\n                _context7.prev = 41;\n\n                _iterator2.f();\n\n                return _context7.finish(41);\n\n              case 44:\n                _context7.next = 50;\n                break;\n\n              case 46:\n                _context7.prev = 46;\n                _context7.t1 = _context7[\"catch\"](25);\n\n                this._logger.warn({\n                  err: _context7.t1,\n                  peerId: peerId\n                }, 'Received invalid transactions.');\n\n                if (_context7.t1 instanceof errors_1.InvalidTransactionError) {\n                  this._networkModule.applyPenaltyOnPeer({\n                    peerId: peerId,\n                    penalty: 100\n                  });\n                }\n\n              case 50:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[25, 46], [27, 38, 41, 44]]);\n      }));\n\n      function handleEventPostTransactionsAnnouncement(_x11, _x12) {\n        return _handleEventPostTransactionsAnnouncement.apply(this, arguments);\n      }\n\n      return handleEventPostTransactionsAnnouncement;\n    }()\n  }, {\n    key: \"_obtainUnknownTransactionIDs\",\n    value: function () {\n      var _obtainUnknownTransactionIDs2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(ids) {\n        var _this3 = this;\n\n        var unknownTransactionsIDs, existingTransactions;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                unknownTransactionsIDs = ids.filter(function (id) {\n                  return !_this3._transactionPoolModule.contains(id);\n                });\n\n                if (!unknownTransactionsIDs.length) {\n                  _context8.next = 6;\n                  break;\n                }\n\n                _context8.next = 4;\n                return this._chainModule.dataAccess.getTransactionsByIDs(unknownTransactionsIDs);\n\n              case 4:\n                existingTransactions = _context8.sent;\n                return _context8.abrupt(\"return\", unknownTransactionsIDs.filter(function (id) {\n                  return existingTransactions.find(function (existingTransaction) {\n                    return existingTransaction.id.equals(id);\n                  }) === undefined;\n                }));\n\n              case 6:\n                return _context8.abrupt(\"return\", unknownTransactionsIDs);\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function _obtainUnknownTransactionIDs(_x13) {\n        return _obtainUnknownTransactionIDs2.apply(this, arguments);\n      }\n\n      return _obtainUnknownTransactionIDs;\n    }()\n  }, {\n    key: \"_receiveTransaction\",\n    value: function () {\n      var _receiveTransaction2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(transaction) {\n        var _yield$this$_transact, error;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n\n                this._processorModule.validateTransaction(transaction);\n\n                _context9.next = 7;\n                break;\n\n              case 4:\n                _context9.prev = 4;\n                _context9.t0 = _context9[\"catch\"](0);\n                throw new errors_1.InvalidTransactionError(_context9.t0.toString(), transaction.id);\n\n              case 7:\n                if (!this._transactionPoolModule.contains(transaction.id)) {\n                  _context9.next = 9;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", transaction.id);\n\n              case 9:\n                this.handleBroadcastTransaction(transaction);\n                _context9.next = 12;\n                return this._transactionPoolModule.add(transaction);\n\n              case 12:\n                _yield$this$_transact = _context9.sent;\n                error = _yield$this$_transact.error;\n\n                if (error) {\n                  _context9.next = 17;\n                  break;\n                }\n\n                this._logger.info({\n                  id: transaction.id,\n                  nonce: transaction.nonce.toString(),\n                  senderPublicKey: transaction.senderPublicKey\n                }, 'Added transaction to pool');\n\n                return _context9.abrupt(\"return\", transaction.id);\n\n              case 17:\n                this._logger.error({\n                  err: error\n                }, 'Failed to add transaction to pool.');\n\n                throw error;\n\n              case 19:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 4]]);\n      }));\n\n      function _receiveTransaction(_x14) {\n        return _receiveTransaction2.apply(this, arguments);\n      }\n\n      return _receiveTransaction;\n    }()\n  }, {\n    key: \"_addRateLimit\",\n    value: function _addRateLimit(procedure, peerId, limit) {\n      if (this._rateTracker[procedure] === undefined) {\n        this._rateTracker[procedure] = _defineProperty({}, peerId, 0);\n      }\n\n      this._rateTracker[procedure][peerId] = this._rateTracker[procedure][peerId] ? this._rateTracker[procedure][peerId] + 1 : 1;\n\n      if (this._rateTracker[procedure][peerId] > limit) {\n        this._networkModule.applyPenaltyOnPeer({\n          peerId: peerId,\n          penalty: 10\n        });\n      }\n    }\n  }]);\n\n  return Transport;\n}();\n\nexports.Transport = Transport;","map":{"version":3,"sources":["../../../src/node/transport/transport.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Transport = void 0;\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nconst errors_1 = require(\"./errors\");\nconst schemas_1 = require(\"./schemas\");\nconst broadcaster_1 = require(\"./broadcaster\");\nconst errors_2 = require(\"../../errors\");\nconst constants_1 = require(\"../../constants\");\nconst DEFAULT_RATE_RESET_TIME = 10000;\nconst DEFAULT_RATE_LIMIT_FREQUENCY = 3;\nconst DEFAULT_LAST_BLOCK_RATE_LIMIT_FREQUENCY = 10;\nconst DEFAULT_COMMON_BLOCK_RATE_LIMIT_FREQUENCY = 10;\nconst DEFAULT_BLOCKS_FROM_IDS_RATE_LIMIT_FREQUENCY = 100;\nconst DEFAULT_RELEASE_LIMIT = 100;\nconst DEFAULT_RELEASE_INTERVAL = 5000;\nclass Transport {\n    constructor({ channel, logger, synchronizer, transactionPoolModule, chainModule, processorModule, networkModule, }) {\n        this._channel = channel;\n        this._logger = logger;\n        this._synchronizerModule = synchronizer;\n        this._transactionPoolModule = transactionPoolModule;\n        this._chainModule = chainModule;\n        this._processorModule = processorModule;\n        this._networkModule = networkModule;\n        this._broadcaster = new broadcaster_1.Broadcaster({\n            transactionPool: this._transactionPoolModule,\n            logger: this._logger,\n            releaseLimit: DEFAULT_RELEASE_LIMIT,\n            interval: DEFAULT_RELEASE_INTERVAL,\n            networkModule: this._networkModule,\n        });\n        this._rateTracker = {};\n        setInterval(() => {\n            this._rateTracker = {};\n        }, DEFAULT_RATE_RESET_TIME);\n    }\n    handleBroadcastTransaction(transaction) {\n        this._broadcaster.enqueueTransactionId(transaction.id);\n        this._channel.publish(constants_1.APP_EVENT_TRANSACTION_NEW, {\n            transaction: transaction.getBytes().toString('hex'),\n        });\n    }\n    async handleBroadcastBlock(block) {\n        if (this._synchronizerModule.isActive) {\n            this._logger.debug('Transport->onBroadcastBlock: Aborted - blockchain synchronization in progress');\n            return null;\n        }\n        const data = lisk_codec_1.codec.encode(schemas_1.postBlockEventSchema, {\n            block: this._chainModule.dataAccess.encode(block),\n        });\n        return this._networkModule.send({\n            event: 'postBlock',\n            data,\n        });\n    }\n    handleRPCGetLastBlock(peerId) {\n        this._addRateLimit('getLastBlock', peerId, DEFAULT_LAST_BLOCK_RATE_LIMIT_FREQUENCY);\n        return this._chainModule.dataAccess.encode(this._chainModule.lastBlock);\n    }\n    async handleRPCGetBlocksFromId(data, peerId) {\n        this._addRateLimit('getBlocksFromId', peerId, DEFAULT_BLOCKS_FROM_IDS_RATE_LIMIT_FREQUENCY);\n        const decodedData = lisk_codec_1.codec.decode(schemas_1.getBlocksFromIdRequestSchema, data);\n        const errors = lisk_validator_1.validator.validate(schemas_1.getBlocksFromIdRequestSchema, decodedData);\n        if (errors.length) {\n            const error = new lisk_validator_1.LiskValidationError(errors);\n            this._logger.warn({\n                err: error,\n                req: data,\n            }, 'getBlocksFromID request validation failed');\n            this._networkModule.applyPenaltyOnPeer({\n                peerId,\n                penalty: 100,\n            });\n            throw error;\n        }\n        const { blockId } = decodedData;\n        const lastBlock = await this._chainModule.dataAccess.getRawBlockHeaderByID(blockId);\n        const lastBlockHeight = lastBlock.height;\n        const fetchUntilHeight = lastBlockHeight + 103;\n        const blocks = await this._chainModule.dataAccess.getBlocksByHeightBetween(lastBlockHeight + 1, fetchUntilHeight);\n        const encodedBlocks = blocks.map(block => this._chainModule.dataAccess.encode(block));\n        return lisk_codec_1.codec.encode(schemas_1.getBlocksFromIdResponseSchema, { blocks: encodedBlocks });\n    }\n    async handleRPCGetHighestCommonBlockID(data, peerId) {\n        this._addRateLimit('getHighestCommonBlock', peerId, DEFAULT_COMMON_BLOCK_RATE_LIMIT_FREQUENCY);\n        const blockIds = lisk_codec_1.codec.decode(schemas_1.getHighestCommonBlockRequestSchema, data);\n        const errors = lisk_validator_1.validator.validate(schemas_1.getHighestCommonBlockRequestSchema, blockIds);\n        if (errors.length || !lisk_utils_1.objects.bufferArrayUniqueItems(blockIds.ids)) {\n            const error = new lisk_validator_1.LiskValidationError(errors);\n            this._logger.warn({\n                err: error,\n                req: data,\n            }, 'getHighestCommonBlock request validation failed');\n            this._networkModule.applyPenaltyOnPeer({\n                peerId,\n                penalty: 100,\n            });\n            throw error;\n        }\n        const commonBlockID = await this._chainModule.dataAccess.getHighestCommonBlockID(blockIds.ids);\n        return lisk_codec_1.codec.encode(schemas_1.getHighestCommonBlockResponseSchema, {\n            id: commonBlockID !== null && commonBlockID !== void 0 ? commonBlockID : Buffer.alloc(0),\n        });\n    }\n    async handleEventPostBlock(data, peerId) {\n        if (this._synchronizerModule.isActive) {\n            this._logger.debug(\"Client is syncing. Can't process new block at the moment.\");\n            return;\n        }\n        if (data === undefined) {\n            const errorMessage = 'Received invalid post block data';\n            this._logger.warn({\n                errorMessage,\n                module: 'transport',\n                data,\n            }, errorMessage);\n            this._networkModule.applyPenaltyOnPeer({\n                peerId,\n                penalty: 100,\n            });\n            return;\n        }\n        const decodedData = lisk_codec_1.codec.decode(schemas_1.postBlockEventSchema, data);\n        const errors = lisk_validator_1.validator.validate(schemas_1.postBlockEventSchema, decodedData);\n        if (errors.length) {\n            this._logger.warn({\n                errors,\n                module: 'transport',\n                data,\n            }, 'Received post block broadcast request in unexpected format');\n            this._networkModule.applyPenaltyOnPeer({\n                peerId,\n                penalty: 100,\n            });\n            throw new lisk_validator_1.LiskValidationError(errors);\n        }\n        const { block: blockBytes } = decodedData;\n        this._channel.publish(constants_1.APP_EVENT_NETWORK_EVENT, {\n            event: constants_1.EVENT_POST_BLOCK,\n            data: { block: blockBytes.toString('hex') },\n        });\n        let block;\n        try {\n            block = this._chainModule.dataAccess.decode(blockBytes);\n        }\n        catch (error) {\n            this._logger.warn({\n                err: error,\n                data,\n            }, 'Received post block broadcast request in not decodable format');\n            this._networkModule.applyPenaltyOnPeer({\n                peerId,\n                penalty: 100,\n            });\n            throw errors;\n        }\n        try {\n            await this._processorModule.process(block, {\n                peerId,\n            });\n        }\n        catch (error) {\n            if (error instanceof errors_2.ApplyPenaltyError) {\n                this._logger.warn({\n                    err: error,\n                    data,\n                }, 'Received post block broadcast request with invalid block');\n                this._networkModule.applyPenaltyOnPeer({\n                    peerId,\n                    penalty: 100,\n                });\n            }\n            throw error;\n        }\n    }\n    async handleRPCGetTransactions(data, peerId) {\n        this._addRateLimit('getTransactions', peerId, DEFAULT_RATE_LIMIT_FREQUENCY);\n        let decodedData = { transactionIds: [] };\n        if (Buffer.isBuffer(data)) {\n            decodedData = lisk_codec_1.codec.decode(schemas_1.transactionIdsSchema, data);\n            const errors = lisk_validator_1.validator.validate(schemas_1.transactionIdsSchema, decodedData);\n            if (errors.length || !lisk_utils_1.objects.bufferArrayUniqueItems(decodedData.transactionIds)) {\n                this._logger.warn({ err: errors, peerId }, 'Received invalid getTransactions body');\n                this._networkModule.applyPenaltyOnPeer({\n                    peerId,\n                    penalty: 100,\n                });\n                throw new lisk_validator_1.LiskValidationError(errors);\n            }\n        }\n        const { transactionIds } = decodedData;\n        if (!(transactionIds === null || transactionIds === void 0 ? void 0 : transactionIds.length)) {\n            const transactionsBySender = this._transactionPoolModule.getProcessableTransactions();\n            const transactions = transactionsBySender\n                .values()\n                .flat()\n                .map(tx => tx.getBytes());\n            transactions.splice(DEFAULT_RELEASE_LIMIT);\n            return lisk_codec_1.codec.encode(schemas_1.transactionsSchema, {\n                transactions,\n            });\n        }\n        if (transactionIds.length > DEFAULT_RELEASE_LIMIT) {\n            const error = new Error(`Requested number of transactions ${transactionIds.length} exceeds maximum allowed.`);\n            this._logger.warn({ err: error, peerId }, 'Received invalid request.');\n            this._networkModule.applyPenaltyOnPeer({\n                peerId,\n                penalty: 100,\n            });\n            throw error;\n        }\n        const transactionsFromQueues = [];\n        const idsNotInPool = [];\n        for (const id of transactionIds) {\n            const transaction = this._transactionPoolModule.get(id);\n            if (transaction) {\n                transactionsFromQueues.push(transaction.getBytes());\n            }\n            else {\n                idsNotInPool.push(id);\n            }\n        }\n        if (idsNotInPool.length) {\n            const transactionsFromDatabase = await this._chainModule.dataAccess.getTransactionsByIDs(idsNotInPool);\n            return lisk_codec_1.codec.encode(schemas_1.transactionsSchema, {\n                transactions: transactionsFromQueues.concat(transactionsFromDatabase.map(t => t.getBytes())),\n            });\n        }\n        return lisk_codec_1.codec.encode(schemas_1.transactionsSchema, {\n            transactions: transactionsFromQueues,\n        });\n    }\n    async handleEventPostTransaction(data) {\n        const tx = this._chainModule.dataAccess.decodeTransaction(Buffer.from(data.transaction, 'hex'));\n        const id = await this._receiveTransaction(tx);\n        return {\n            transactionId: id.toString('hex'),\n        };\n    }\n    async handleEventPostTransactionsAnnouncement(data, peerId) {\n        this._addRateLimit('postTransactionsAnnouncement', peerId, DEFAULT_RATE_LIMIT_FREQUENCY);\n        if (data === undefined) {\n            const errorMessage = 'Received invalid transaction announcement data';\n            this._logger.warn({ peerId }, errorMessage);\n            this._networkModule.applyPenaltyOnPeer({\n                peerId,\n                penalty: 100,\n            });\n            return;\n        }\n        const decodedData = lisk_codec_1.codec.decode(schemas_1.transactionIdsSchema, data);\n        const errors = lisk_validator_1.validator.validate(schemas_1.transactionIdsSchema, decodedData);\n        if (errors.length) {\n            this._logger.warn({ err: errors, peerId }, 'Received invalid transactions body');\n            this._networkModule.applyPenaltyOnPeer({\n                peerId,\n                penalty: 100,\n            });\n            throw new lisk_validator_1.LiskValidationError(errors);\n        }\n        const { transactionIds } = decodedData;\n        const encodedIds = transactionIds.map(id => id.toString('hex'));\n        this._channel.publish(constants_1.APP_EVENT_NETWORK_EVENT, {\n            event: constants_1.EVENT_POST_TRANSACTION_ANNOUNCEMENT,\n            data: { transactionIds: encodedIds },\n        });\n        const unknownTransactionIDs = await this._obtainUnknownTransactionIDs(transactionIds);\n        if (unknownTransactionIDs.length > 0) {\n            const transactionIdsBuffer = lisk_codec_1.codec.encode(schemas_1.transactionIdsSchema, {\n                transactionIds: unknownTransactionIDs,\n            });\n            const { data: encodedData } = (await this._networkModule.requestFromPeer({\n                procedure: 'getTransactions',\n                data: transactionIdsBuffer,\n                peerId,\n            }));\n            const transactionsData = lisk_codec_1.codec.decode(schemas_1.transactionsSchema, encodedData);\n            try {\n                for (const transaction of transactionsData.transactions) {\n                    const tx = this._chainModule.dataAccess.decodeTransaction(transaction);\n                    await this._receiveTransaction(tx);\n                }\n            }\n            catch (err) {\n                this._logger.warn({ err, peerId }, 'Received invalid transactions.');\n                if (err instanceof errors_1.InvalidTransactionError) {\n                    this._networkModule.applyPenaltyOnPeer({\n                        peerId,\n                        penalty: 100,\n                    });\n                }\n            }\n        }\n    }\n    async _obtainUnknownTransactionIDs(ids) {\n        const unknownTransactionsIDs = ids.filter(id => !this._transactionPoolModule.contains(id));\n        if (unknownTransactionsIDs.length) {\n            const existingTransactions = await this._chainModule.dataAccess.getTransactionsByIDs(unknownTransactionsIDs);\n            return unknownTransactionsIDs.filter(id => existingTransactions.find(existingTransaction => existingTransaction.id.equals(id)) ===\n                undefined);\n        }\n        return unknownTransactionsIDs;\n    }\n    async _receiveTransaction(transaction) {\n        try {\n            this._processorModule.validateTransaction(transaction);\n        }\n        catch (err) {\n            throw new errors_1.InvalidTransactionError(err.toString(), transaction.id);\n        }\n        if (this._transactionPoolModule.contains(transaction.id)) {\n            return transaction.id;\n        }\n        this.handleBroadcastTransaction(transaction);\n        const { error } = await this._transactionPoolModule.add(transaction);\n        if (!error) {\n            this._logger.info({\n                id: transaction.id,\n                nonce: transaction.nonce.toString(),\n                senderPublicKey: transaction.senderPublicKey,\n            }, 'Added transaction to pool');\n            return transaction.id;\n        }\n        this._logger.error({ err: error }, 'Failed to add transaction to pool.');\n        throw error;\n    }\n    _addRateLimit(procedure, peerId, limit) {\n        if (this._rateTracker[procedure] === undefined) {\n            this._rateTracker[procedure] = { [peerId]: 0 };\n        }\n        this._rateTracker[procedure][peerId] = this._rateTracker[procedure][peerId]\n            ? this._rateTracker[procedure][peerId] + 1\n            : 1;\n        if (this._rateTracker[procedure][peerId] > limit) {\n            this._networkModule.applyPenaltyOnPeer({\n                peerId,\n                penalty: 10,\n            });\n        }\n    }\n}\nexports.Transport = Transport;\n//# sourceMappingURL=transport.js.map"]},"metadata":{},"sourceType":"script"}