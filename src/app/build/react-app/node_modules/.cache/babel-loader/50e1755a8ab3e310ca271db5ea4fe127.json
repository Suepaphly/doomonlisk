{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar error = {\n  message: function message(_ref) {\n    var schemaCode = _ref.schemaCode;\n    return codegen_1.str(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must be multiple of \", \"\"])), schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{multipleOf: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: \"multipleOf\",\n  type: \"number\",\n  schemaType: \"number\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var gen = cxt.gen,\n        data = cxt.data,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it; // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n\n    var prec = it.opts.multipleOfPrecision;\n    var res = gen.let(\"res\");\n    var invalid = prec ? codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"Math.abs(Math.round(\", \") - \", \") > 1e-\", \"\"])), res, res, prec) : codegen_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \" !== parseInt(\", \")\"])), res, res);\n    cxt.fail$data(codegen_1._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"(\", \" === 0 || (\", \" = \", \"/\", \", \", \"))\"])), schemaCode, res, data, schemaCode, invalid));\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/multipleOf.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAQA,IAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,EAAE;AAAA,QAAE,UAAF,QAAE,UAAF;AAAA,WAAkB,SAAA,CAAA,GAAlB,8FAA4C,UAA5C;AAAA,GAD2B;AAEpC,EAAA,MAAM,EAAE;AAAA,QAAE,UAAF,SAAE,UAAF;AAAA,WAAkB,SAAA,CAAA,CAAlB,0FAAmC,UAAnC;AAAA;AAF4B,CAAtC;AAKA,IAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,YADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAE,IAJ0B;AAKjC,EAAA,KAAK,EAAL,KALiC;AAMjC,EAAA,IANiC,gBAM5B,GAN4B,EAMb;AAClB,QAAO,GAAP,GAAoC,GAApC,CAAO,GAAP;AAAA,QAAY,IAAZ,GAAoC,GAApC,CAAY,IAAZ;AAAA,QAAkB,UAAlB,GAAoC,GAApC,CAAkB,UAAlB;AAAA,QAA8B,EAA9B,GAAoC,GAApC,CAA8B,EAA9B,CADkB,CAElB;;AACA,QAAM,IAAI,GAAG,EAAE,CAAC,IAAH,CAAQ,mBAArB;AACA,QAAM,GAAG,GAAG,GAAG,CAAC,GAAJ,CAAQ,KAAR,CAAZ;AACA,QAAM,OAAO,GAAG,IAAI,GAChB,SAAA,CAAA,CADgB,mHACQ,GADR,EACkB,GADlB,EAC+B,IAD/B,IAEhB,SAAA,CAAA,CAFgB,+FAEZ,GAFY,EAEQ,GAFR,CAApB;AAGA,IAAA,GAAG,CAAC,SAAJ,CAAc,SAAA,CAAA,CAAd,gHAAmB,UAAnB,EAA2C,GAA3C,EAAoD,IAApD,EAA4D,UAA5D,EAA2E,OAA3E;AACD;AAfgC,CAAnC;AAkBA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => codegen_1.str `must be multiple of ${schemaCode}`,\n    params: ({ schemaCode }) => codegen_1._ `{multipleOf: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"multipleOf\",\n    type: \"number\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { gen, data, schemaCode, it } = cxt;\n        // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)\n        const prec = it.opts.multipleOfPrecision;\n        const res = gen.let(\"res\");\n        const invalid = prec\n            ? codegen_1._ `Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}`\n            : codegen_1._ `${res} !== parseInt(${res})`;\n        cxt.fail$data(codegen_1._ `(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=multipleOf.js.map"]},"metadata":{},"sourceType":"script"}