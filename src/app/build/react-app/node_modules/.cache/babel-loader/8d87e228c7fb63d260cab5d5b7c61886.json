{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DPoSModule = void 0;\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nvar utils_1 = require(\"./utils\");\n\nvar base_module_1 = require(\"../base_module\");\n\nvar constants_1 = require(\"./constants\");\n\nvar data_access_1 = require(\"./data_access\");\n\nvar delegates_1 = require(\"./delegates\");\n\nvar random_seed_1 = require(\"./random_seed\");\n\nvar rounds_1 = require(\"./rounds\");\n\nvar schema_1 = require(\"./schema\");\n\nvar pom_transaction_asset_1 = require(\"./transaction_assets/pom_transaction_asset\");\n\nvar register_transaction_asset_1 = require(\"./transaction_assets/register_transaction_asset\");\n\nvar unlock_transaction_asset_1 = require(\"./transaction_assets/unlock_transaction_asset\");\n\nvar vote_transaction_asset_1 = require(\"./transaction_assets/vote_transaction_asset\");\n\nvar bufferArrayContains = lisk_utils_1.objects.bufferArrayContains;\nvar dposModuleParamsDefault = {\n  activeDelegates: 101,\n  standbyDelegates: 2,\n  delegateListRoundOffset: 2\n};\n\nvar DPoSModule = /*#__PURE__*/function (_base_module_1$BaseMo) {\n  _inherits(DPoSModule, _base_module_1$BaseMo);\n\n  var _super = _createSuper(DPoSModule);\n\n  function DPoSModule(config) {\n    var _this;\n\n    _classCallCheck(this, DPoSModule);\n\n    _this = _super.call(this, config);\n    _this.name = 'dpos';\n    _this.id = 5;\n    _this.accountSchema = schema_1.dposAccountSchema;\n    _this._finalizedHeight = 0;\n    var mergedDposConfig = lisk_utils_1.objects.mergeDeep(dposModuleParamsDefault, _this.config);\n    _this.transactionAssets = [new register_transaction_asset_1.RegisterTransactionAsset(), new vote_transaction_asset_1.VoteTransactionAsset(), new unlock_transaction_asset_1.UnlockTransactionAsset(typeof config.unlockFixHeight === 'number' ? config.unlockFixHeight : undefined), new pom_transaction_asset_1.PomTransactionAsset()];\n    _this.actions = {\n      getAllDelegates: function () {\n        var _getAllDelegates = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var validatorsBuffer, _lisk_codec_1$codec$d, registeredDelegates;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _this._dataAccess.getChainState(constants_1.CHAIN_STATE_DELEGATE_USERNAMES);\n\n                case 2:\n                  validatorsBuffer = _context.sent;\n\n                  if (validatorsBuffer) {\n                    _context.next = 5;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", []);\n\n                case 5:\n                  _lisk_codec_1$codec$d = lisk_codec_1.codec.decode(schema_1.delegatesUserNamesSchema, validatorsBuffer), registeredDelegates = _lisk_codec_1$codec$d.registeredDelegates;\n                  return _context.abrupt(\"return\", registeredDelegates.map(function (delegate) {\n                    return {\n                      username: delegate.username,\n                      address: delegate.address.toString('hex')\n                    };\n                  }));\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        function getAllDelegates() {\n          return _getAllDelegates.apply(this, arguments);\n        }\n\n        return getAllDelegates;\n      }(),\n      getUnlockings: function () {\n        var _getUnlockings = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {\n          var address, account, result, _iterator, _step, unlocking, delegate, minWaitingHeight, minPunishedHeight;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!(typeof params.address !== 'string')) {\n                    _context2.next = 2;\n                    break;\n                  }\n\n                  throw new Error('Address must be a string');\n\n                case 2:\n                  address = Buffer.from(params.address, 'hex');\n                  _context2.next = 5;\n                  return _this._dataAccess.getAccountByAddress(address);\n\n                case 5:\n                  account = _context2.sent;\n                  result = [];\n                  _iterator = _createForOfIteratorHelper(account.dpos.unlocking);\n                  _context2.prev = 8;\n\n                  _iterator.s();\n\n                case 10:\n                  if ((_step = _iterator.n()).done) {\n                    _context2.next = 20;\n                    break;\n                  }\n\n                  unlocking = _step.value;\n                  _context2.next = 14;\n                  return _this._dataAccess.getAccountByAddress(unlocking.delegateAddress);\n\n                case 14:\n                  delegate = _context2.sent;\n                  minWaitingHeight = utils_1.getMinWaitingHeight(account.address, delegate.address, unlocking);\n                  minPunishedHeight = utils_1.getMinPunishedHeight(account, delegate);\n                  result.push({\n                    delegateAddress: unlocking.delegateAddress.toString('hex'),\n                    amount: unlocking.amount.toString(),\n                    unvoteHeight: unlocking.unvoteHeight,\n                    minUnlockHeight: Math.max(minWaitingHeight, minPunishedHeight)\n                  });\n\n                case 18:\n                  _context2.next = 10;\n                  break;\n\n                case 20:\n                  _context2.next = 25;\n                  break;\n\n                case 22:\n                  _context2.prev = 22;\n                  _context2.t0 = _context2[\"catch\"](8);\n\n                  _iterator.e(_context2.t0);\n\n                case 25:\n                  _context2.prev = 25;\n\n                  _iterator.f();\n\n                  return _context2.finish(25);\n\n                case 28:\n                  return _context2.abrupt(\"return\", result);\n\n                case 29:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[8, 22, 25, 28]]);\n        }));\n\n        function getUnlockings(_x) {\n          return _getUnlockings.apply(this, arguments);\n        }\n\n        return getUnlockings;\n      }()\n    };\n    var errors = lisk_validator_1.validator.validate(schema_1.dposModuleParamsSchema, mergedDposConfig);\n\n    if (errors.length) {\n      throw new lisk_validator_1.LiskValidationError(_toConsumableArray(errors));\n    }\n\n    if (mergedDposConfig.activeDelegates < 1) {\n      throw new Error('Active delegates must have minimum 1');\n    }\n\n    if (mergedDposConfig.activeDelegates < mergedDposConfig.standbyDelegates) {\n      throw new Error('Active delegates must be greater or equal to standby delegates');\n    }\n\n    _this._activeDelegates = mergedDposConfig.activeDelegates;\n    _this._standbyDelegates = mergedDposConfig.standbyDelegates;\n    _this._delegateListRoundOffset = mergedDposConfig.delegateListRoundOffset;\n    _this._blocksPerRound = _this._activeDelegates + _this._standbyDelegates;\n    _this._blockTime = config.blockTime;\n    _this._delegateActiveRoundLimit = 3;\n    _this.rounds = new rounds_1.Rounds({\n      blocksPerRound: _this._blocksPerRound\n    });\n    return _this;\n  }\n\n  _createClass(DPoSModule, [{\n    key: \"afterBlockApply\",\n    value: function () {\n      var _afterBlockApply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(context) {\n        var finalizedHeight, height, isLastBlockOfRound, finalizedBlockRound, disposableDelegateListUntilRound;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                finalizedHeight = context.consensus.getFinalizedHeight();\n                height = context.block.header.height;\n                isLastBlockOfRound = this._isLastBlockOfTheRound(height);\n\n                if (!(finalizedHeight !== this._finalizedHeight)) {\n                  _context3.next = 10;\n                  break;\n                }\n\n                this._finalizedHeight = finalizedHeight;\n                finalizedBlockRound = this.rounds.calcRound(finalizedHeight);\n                disposableDelegateListUntilRound = finalizedBlockRound - this._delegateListRoundOffset - this._delegateActiveRoundLimit;\n\n                this._logger.debug(disposableDelegateListUntilRound, 'Deleting voteWeights until round');\n\n                _context3.next = 10;\n                return data_access_1.deleteVoteWeightsUntilRound(disposableDelegateListUntilRound, context.stateStore);\n\n              case 10:\n                _context3.next = 12;\n                return this._updateProductivity(context);\n\n              case 12:\n                if (isLastBlockOfRound) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 14:\n                _context3.next = 16;\n                return this._createVoteWeightSnapshot(context);\n\n              case 16:\n                _context3.next = 18;\n                return this._updateValidators(context);\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function afterBlockApply(_x2) {\n        return _afterBlockApply.apply(this, arguments);\n      }\n\n      return afterBlockApply;\n    }()\n  }, {\n    key: \"afterGenesisBlockApply\",\n    value: function () {\n      var _afterGenesisBlockApply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(context) {\n        var _context$genesisBlock, accounts, initDelegates, delegateAddresses, delegateUsernames, _iterator2, _step2, account, roundAfterGenesis, i;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context$genesisBlock = context.genesisBlock.header.asset, accounts = _context$genesisBlock.accounts, initDelegates = _context$genesisBlock.initDelegates;\n                delegateAddresses = [];\n                delegateUsernames = [];\n                _iterator2 = _createForOfIteratorHelper(accounts);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    account = _step2.value;\n\n                    if (account.dpos.delegate.username !== '') {\n                      delegateUsernames.push({\n                        address: account.address,\n                        username: account.dpos.delegate.username\n                      });\n                      delegateAddresses.push(account.address);\n                    }\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                if (!(initDelegates.length > this._blocksPerRound)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                throw new Error('Genesis block init delegates list is larger than allowed delegates per round.');\n\n              case 7:\n                if (bufferArrayContains(delegateAddresses, _toConsumableArray(initDelegates))) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                throw new Error('Genesis block init delegates list contain addresses which are not delegates.');\n\n              case 9:\n                _context4.next = 11;\n                return data_access_1.setRegisteredDelegates(context.stateStore, {\n                  registeredDelegates: delegateUsernames\n                });\n\n              case 11:\n                roundAfterGenesis = this.rounds.calcRound(context.genesisBlock.header.height) + 1;\n                i = roundAfterGenesis;\n\n              case 13:\n                if (!(i <= roundAfterGenesis + this._delegateListRoundOffset)) {\n                  _context4.next = 19;\n                  break;\n                }\n\n                _context4.next = 16;\n                return delegates_1.createVoteWeightsSnapshot({\n                  logger: this._logger,\n                  stateStore: context.stateStore,\n                  height: context.genesisBlock.header.height,\n                  round: i,\n                  activeDelegates: this._activeDelegates,\n                  standbyDelegates: this._standbyDelegates\n                });\n\n              case 16:\n                i += 1;\n                _context4.next = 13;\n                break;\n\n              case 19:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function afterGenesisBlockApply(_x3) {\n        return _afterGenesisBlockApply.apply(this, arguments);\n      }\n\n      return afterGenesisBlockApply;\n    }()\n  }, {\n    key: \"_updateProductivity\",\n    value: function () {\n      var _updateProductivity2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(context) {\n        var blockHeader, consensus, stateStore, round;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                blockHeader = context.block.header, consensus = context.consensus, stateStore = context.stateStore;\n                round = this.rounds.calcRound(blockHeader.height);\n\n                this._logger.debug(round, 'Updating delegates productivity for round');\n\n                _context5.next = 5;\n                return delegates_1.updateDelegateProductivity({\n                  height: blockHeader.height,\n                  blockTime: this._blockTime,\n                  blockTimestamp: blockHeader.timestamp,\n                  generatorPublicKey: blockHeader.generatorPublicKey,\n                  stateStore: stateStore,\n                  consensus: consensus\n                });\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _updateProductivity(_x4) {\n        return _updateProductivity2.apply(this, arguments);\n      }\n\n      return _updateProductivity;\n    }()\n  }, {\n    key: \"_createVoteWeightSnapshot\",\n    value: function () {\n      var _createVoteWeightSnapshot2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(context) {\n        var round, snapshotHeight, snapshotRound;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                round = this.rounds.calcRound(context.block.header.height);\n\n                this._logger.debug(round + this._delegateListRoundOffset, 'Creating delegate list for round');\n\n                snapshotHeight = context.block.header.height + 1;\n                snapshotRound = this.rounds.calcRound(snapshotHeight) + this._delegateListRoundOffset;\n                _context6.next = 6;\n                return delegates_1.createVoteWeightsSnapshot({\n                  logger: this._logger,\n                  stateStore: context.stateStore,\n                  height: snapshotHeight,\n                  round: snapshotRound,\n                  activeDelegates: this._activeDelegates,\n                  standbyDelegates: this._standbyDelegates\n                });\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _createVoteWeightSnapshot(_x5) {\n        return _createVoteWeightSnapshot2.apply(this, arguments);\n      }\n\n      return _createVoteWeightSnapshot;\n    }()\n  }, {\n    key: \"_updateValidators\",\n    value: function () {\n      var _updateValidators2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(context) {\n        var round, nextRound, _random_seed_1$genera, _random_seed_1$genera2, randomSeed1, randomSeed2;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                round = this.rounds.calcRound(context.block.header.height);\n                nextRound = round + 1;\n\n                this._logger.debug(nextRound, 'Updating delegate list for');\n\n                _random_seed_1$genera = random_seed_1.generateRandomSeeds({\n                  round: round,\n                  rounds: this.rounds,\n                  headers: context.stateStore.chain.lastBlockHeaders,\n                  logger: this._logger\n                }), _random_seed_1$genera2 = _slicedToArray(_random_seed_1$genera, 2), randomSeed1 = _random_seed_1$genera2[0], randomSeed2 = _random_seed_1$genera2[1];\n                _context7.next = 6;\n                return delegates_1.updateDelegateList({\n                  round: nextRound,\n                  randomSeeds: [randomSeed1, randomSeed2],\n                  stateStore: context.stateStore,\n                  consensus: context.consensus,\n                  activeDelegates: this._activeDelegates,\n                  standbyDelegates: this._standbyDelegates\n                });\n\n              case 6:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _updateValidators(_x6) {\n        return _updateValidators2.apply(this, arguments);\n      }\n\n      return _updateValidators;\n    }()\n  }, {\n    key: \"_isLastBlockOfTheRound\",\n    value: function _isLastBlockOfTheRound(height) {\n      var round = this.rounds.calcRound(height);\n      var nextRound = this.rounds.calcRound(height + 1);\n      return round < nextRound;\n    }\n  }]);\n\n  return DPoSModule;\n}(base_module_1.BaseModule);\n\nexports.DPoSModule = DPoSModule;","map":{"version":3,"sources":["../../../src/modules/dpos/dpos_module.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DPoSModule = void 0;\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst utils_1 = require(\"./utils\");\nconst base_module_1 = require(\"../base_module\");\nconst constants_1 = require(\"./constants\");\nconst data_access_1 = require(\"./data_access\");\nconst delegates_1 = require(\"./delegates\");\nconst random_seed_1 = require(\"./random_seed\");\nconst rounds_1 = require(\"./rounds\");\nconst schema_1 = require(\"./schema\");\nconst pom_transaction_asset_1 = require(\"./transaction_assets/pom_transaction_asset\");\nconst register_transaction_asset_1 = require(\"./transaction_assets/register_transaction_asset\");\nconst unlock_transaction_asset_1 = require(\"./transaction_assets/unlock_transaction_asset\");\nconst vote_transaction_asset_1 = require(\"./transaction_assets/vote_transaction_asset\");\nconst { bufferArrayContains } = lisk_utils_1.objects;\nconst dposModuleParamsDefault = {\n    activeDelegates: 101,\n    standbyDelegates: 2,\n    delegateListRoundOffset: 2,\n};\nclass DPoSModule extends base_module_1.BaseModule {\n    constructor(config) {\n        super(config);\n        this.name = 'dpos';\n        this.id = 5;\n        this.accountSchema = schema_1.dposAccountSchema;\n        this._finalizedHeight = 0;\n        const mergedDposConfig = lisk_utils_1.objects.mergeDeep(dposModuleParamsDefault, this.config);\n        this.transactionAssets = [\n            new register_transaction_asset_1.RegisterTransactionAsset(),\n            new vote_transaction_asset_1.VoteTransactionAsset(),\n            new unlock_transaction_asset_1.UnlockTransactionAsset(typeof config.unlockFixHeight === 'number' ? config.unlockFixHeight : undefined),\n            new pom_transaction_asset_1.PomTransactionAsset(),\n        ];\n        this.actions = {\n            getAllDelegates: async () => {\n                const validatorsBuffer = await this._dataAccess.getChainState(constants_1.CHAIN_STATE_DELEGATE_USERNAMES);\n                if (!validatorsBuffer) {\n                    return [];\n                }\n                const { registeredDelegates } = lisk_codec_1.codec.decode(schema_1.delegatesUserNamesSchema, validatorsBuffer);\n                return registeredDelegates.map(delegate => ({\n                    username: delegate.username,\n                    address: delegate.address.toString('hex'),\n                }));\n            },\n            getUnlockings: async (params) => {\n                if (typeof params.address !== 'string') {\n                    throw new Error('Address must be a string');\n                }\n                const address = Buffer.from(params.address, 'hex');\n                const account = await this._dataAccess.getAccountByAddress(address);\n                const result = [];\n                for (const unlocking of account.dpos.unlocking) {\n                    const delegate = await this._dataAccess.getAccountByAddress(unlocking.delegateAddress);\n                    const minWaitingHeight = utils_1.getMinWaitingHeight(account.address, delegate.address, unlocking);\n                    const minPunishedHeight = utils_1.getMinPunishedHeight(account, delegate);\n                    result.push({\n                        delegateAddress: unlocking.delegateAddress.toString('hex'),\n                        amount: unlocking.amount.toString(),\n                        unvoteHeight: unlocking.unvoteHeight,\n                        minUnlockHeight: Math.max(minWaitingHeight, minPunishedHeight),\n                    });\n                }\n                return result;\n            },\n        };\n        const errors = lisk_validator_1.validator.validate(schema_1.dposModuleParamsSchema, mergedDposConfig);\n        if (errors.length) {\n            throw new lisk_validator_1.LiskValidationError([...errors]);\n        }\n        if (mergedDposConfig.activeDelegates < 1) {\n            throw new Error('Active delegates must have minimum 1');\n        }\n        if (mergedDposConfig.activeDelegates < mergedDposConfig.standbyDelegates) {\n            throw new Error('Active delegates must be greater or equal to standby delegates');\n        }\n        this._activeDelegates = mergedDposConfig.activeDelegates;\n        this._standbyDelegates = mergedDposConfig.standbyDelegates;\n        this._delegateListRoundOffset = mergedDposConfig.delegateListRoundOffset;\n        this._blocksPerRound = this._activeDelegates + this._standbyDelegates;\n        this._blockTime = config.blockTime;\n        this._delegateActiveRoundLimit = 3;\n        this.rounds = new rounds_1.Rounds({ blocksPerRound: this._blocksPerRound });\n    }\n    async afterBlockApply(context) {\n        const finalizedHeight = context.consensus.getFinalizedHeight();\n        const { height } = context.block.header;\n        const isLastBlockOfRound = this._isLastBlockOfTheRound(height);\n        if (finalizedHeight !== this._finalizedHeight) {\n            this._finalizedHeight = finalizedHeight;\n            const finalizedBlockRound = this.rounds.calcRound(finalizedHeight);\n            const disposableDelegateListUntilRound = finalizedBlockRound - this._delegateListRoundOffset - this._delegateActiveRoundLimit;\n            this._logger.debug(disposableDelegateListUntilRound, 'Deleting voteWeights until round');\n            await data_access_1.deleteVoteWeightsUntilRound(disposableDelegateListUntilRound, context.stateStore);\n        }\n        await this._updateProductivity(context);\n        if (!isLastBlockOfRound) {\n            return;\n        }\n        await this._createVoteWeightSnapshot(context);\n        await this._updateValidators(context);\n    }\n    async afterGenesisBlockApply(context) {\n        const { accounts, initDelegates } = context.genesisBlock.header.asset;\n        const delegateAddresses = [];\n        const delegateUsernames = [];\n        for (const account of accounts) {\n            if (account.dpos.delegate.username !== '') {\n                delegateUsernames.push({\n                    address: account.address,\n                    username: account.dpos.delegate.username,\n                });\n                delegateAddresses.push(account.address);\n            }\n        }\n        if (initDelegates.length > this._blocksPerRound) {\n            throw new Error('Genesis block init delegates list is larger than allowed delegates per round.');\n        }\n        if (!bufferArrayContains(delegateAddresses, [...initDelegates])) {\n            throw new Error('Genesis block init delegates list contain addresses which are not delegates.');\n        }\n        await data_access_1.setRegisteredDelegates(context.stateStore, { registeredDelegates: delegateUsernames });\n        const roundAfterGenesis = this.rounds.calcRound(context.genesisBlock.header.height) + 1;\n        for (let i = roundAfterGenesis; i <= roundAfterGenesis + this._delegateListRoundOffset; i += 1) {\n            await delegates_1.createVoteWeightsSnapshot({\n                logger: this._logger,\n                stateStore: context.stateStore,\n                height: context.genesisBlock.header.height,\n                round: i,\n                activeDelegates: this._activeDelegates,\n                standbyDelegates: this._standbyDelegates,\n            });\n        }\n    }\n    async _updateProductivity(context) {\n        const { block: { header: blockHeader }, consensus, stateStore, } = context;\n        const round = this.rounds.calcRound(blockHeader.height);\n        this._logger.debug(round, 'Updating delegates productivity for round');\n        await delegates_1.updateDelegateProductivity({\n            height: blockHeader.height,\n            blockTime: this._blockTime,\n            blockTimestamp: blockHeader.timestamp,\n            generatorPublicKey: blockHeader.generatorPublicKey,\n            stateStore,\n            consensus,\n        });\n    }\n    async _createVoteWeightSnapshot(context) {\n        const round = this.rounds.calcRound(context.block.header.height);\n        this._logger.debug(round + this._delegateListRoundOffset, 'Creating delegate list for round');\n        const snapshotHeight = context.block.header.height + 1;\n        const snapshotRound = this.rounds.calcRound(snapshotHeight) + this._delegateListRoundOffset;\n        await delegates_1.createVoteWeightsSnapshot({\n            logger: this._logger,\n            stateStore: context.stateStore,\n            height: snapshotHeight,\n            round: snapshotRound,\n            activeDelegates: this._activeDelegates,\n            standbyDelegates: this._standbyDelegates,\n        });\n    }\n    async _updateValidators(context) {\n        const round = this.rounds.calcRound(context.block.header.height);\n        const nextRound = round + 1;\n        this._logger.debug(nextRound, 'Updating delegate list for');\n        const [randomSeed1, randomSeed2] = random_seed_1.generateRandomSeeds({\n            round,\n            rounds: this.rounds,\n            headers: context.stateStore.chain.lastBlockHeaders,\n            logger: this._logger,\n        });\n        await delegates_1.updateDelegateList({\n            round: nextRound,\n            randomSeeds: [randomSeed1, randomSeed2],\n            stateStore: context.stateStore,\n            consensus: context.consensus,\n            activeDelegates: this._activeDelegates,\n            standbyDelegates: this._standbyDelegates,\n        });\n    }\n    _isLastBlockOfTheRound(height) {\n        const round = this.rounds.calcRound(height);\n        const nextRound = this.rounds.calcRound(height + 1);\n        return round < nextRound;\n    }\n}\nexports.DPoSModule = DPoSModule;\n//# sourceMappingURL=dpos_module.js.map"]},"metadata":{},"sourceType":"script"}