{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar http = require('http');\n/**\n * Expose SCServer constructor.\n *\n * @api public\n */\n\n\nmodule.exports.SCServer = require('./scserver');\n/**\n * Expose SCServerSocket constructor.\n *\n * @api public\n */\n\nmodule.exports.SCServerSocket = require('./scserversocket');\n/**\n * Creates an http.Server exclusively used for WS upgrades.\n *\n * @param {Number} port\n * @param {Function} callback\n * @param {Object} options\n * @return {SCServer} websocket cluster server\n * @api public\n */\n\nmodule.exports.listen = function (port, options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = {};\n  }\n\n  var server = http.createServer(function (req, res) {\n    res.writeHead(501);\n    res.end('Not Implemented');\n  });\n  var engine = module.exports.attach(server, options);\n  engine.httpServer = server;\n  server.listen(port, fn);\n  return engine;\n};\n/**\n * Captures upgrade requests for a http.Server.\n *\n * @param {http.Server} server\n * @param {Object} options\n * @return {SCServer} websocket cluster server\n * @api public\n */\n\n\nmodule.exports.attach = function (server, options) {\n  if (options == null) {\n    options = {};\n  }\n\n  options.httpServer = server;\n  var socketClusterServer = new module.exports.SCServer(options);\n  return socketClusterServer;\n};","map":{"version":3,"sources":["/home/lisk/doomonlisk/node_modules/socketcluster-server/index.js"],"names":["http","require","module","exports","SCServer","SCServerSocket","listen","port","options","fn","server","createServer","req","res","writeHead","end","engine","attach","httpServer","socketClusterServer"],"mappings":"AAAA;AACA;AACA;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,CAAeC,QAAf,GAA0BH,OAAO,CAAC,YAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,CAAeE,cAAf,GAAgCJ,OAAO,CAAC,kBAAD,CAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,CAAeG,MAAf,GAAwB,UAAUC,IAAV,EAAgBC,OAAhB,EAAyBC,EAAzB,EAA6B;AACnD,MAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,IAAAA,EAAE,GAAGD,OAAL;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AAED,MAAIE,MAAM,GAAGV,IAAI,CAACW,YAAL,CAAkB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACjDA,IAAAA,GAAG,CAACC,SAAJ,CAAc,GAAd;AACAD,IAAAA,GAAG,CAACE,GAAJ,CAAQ,iBAAR;AACD,GAHY,CAAb;AAKA,MAAIC,MAAM,GAAGd,MAAM,CAACC,OAAP,CAAec,MAAf,CAAsBP,MAAtB,EAA8BF,OAA9B,CAAb;AACAQ,EAAAA,MAAM,CAACE,UAAP,GAAoBR,MAApB;AACAA,EAAAA,MAAM,CAACJ,MAAP,CAAcC,IAAd,EAAoBE,EAApB;AAEA,SAAOO,MAAP;AACD,CAhBD;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAd,MAAM,CAACC,OAAP,CAAec,MAAf,GAAwB,UAAUP,MAAV,EAAkBF,OAAlB,EAA2B;AACjD,MAAIA,OAAO,IAAI,IAAf,EAAqB;AACnBA,IAAAA,OAAO,GAAG,EAAV;AACD;;AACDA,EAAAA,OAAO,CAACU,UAAR,GAAqBR,MAArB;AACA,MAAIS,mBAAmB,GAAG,IAAIjB,MAAM,CAACC,OAAP,CAAeC,QAAnB,CAA4BI,OAA5B,CAA1B;AACA,SAAOW,mBAAP;AACD,CAPD","sourcesContent":["/**\n * Module dependencies.\n */\n\nvar http = require('http');\n\n/**\n * Expose SCServer constructor.\n *\n * @api public\n */\n\nmodule.exports.SCServer = require('./scserver');\n\n/**\n * Expose SCServerSocket constructor.\n *\n * @api public\n */\n\nmodule.exports.SCServerSocket = require('./scserversocket');\n\n/**\n * Creates an http.Server exclusively used for WS upgrades.\n *\n * @param {Number} port\n * @param {Function} callback\n * @param {Object} options\n * @return {SCServer} websocket cluster server\n * @api public\n */\n\nmodule.exports.listen = function (port, options, fn) {\n  if (typeof options === 'function') {\n    fn = options;\n    options = {};\n  }\n\n  var server = http.createServer(function (req, res) {\n    res.writeHead(501);\n    res.end('Not Implemented');\n  });\n\n  var engine = module.exports.attach(server, options);\n  engine.httpServer = server;\n  server.listen(port, fn);\n\n  return engine;\n};\n\n/**\n * Captures upgrade requests for a http.Server.\n *\n * @param {http.Server} server\n * @param {Object} options\n * @return {SCServer} websocket cluster server\n * @api public\n */\n\nmodule.exports.attach = function (server, options) {\n  if (options == null) {\n    options = {};\n  }\n  options.httpServer = server;\n  var socketClusterServer = new module.exports.SCServer(options);\n  return socketClusterServer;\n};\n"]},"metadata":{},"sourceType":"script"}