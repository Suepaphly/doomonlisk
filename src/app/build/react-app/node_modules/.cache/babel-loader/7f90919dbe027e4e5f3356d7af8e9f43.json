{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectWithoutProperties = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _excluded = [\"default\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGenesisBlockJSON = exports.createGenesisBlock = exports.getGenesisBlockSchema = void 0;\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar lisk_chain_1 = require(\"@liskhq/lisk-chain\");\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nvar constants_1 = require(\"./constants\");\n\nvar getGenesisBlockSchema = function getGenesisBlockSchema(accountSchema) {\n  return lisk_utils_1.objects.mergeDeep({}, lisk_chain_1.blockSchema, {\n    properties: {\n      header: lisk_utils_1.objects.mergeDeep({}, lisk_chain_1.blockHeaderSchema, {\n        $id: '/block/genesis/header/id',\n        properties: {\n          id: {\n            dataType: 'bytes'\n          },\n          asset: lisk_chain_1.getGenesisBlockHeaderAssetSchema(lisk_chain_1.getAccountSchemaWithDefault(accountSchema))\n        }\n      })\n    }\n  });\n};\n\nexports.getGenesisBlockSchema = getGenesisBlockSchema;\n\nvar getBlockId = function getBlockId(header, accountSchema) {\n  var genesisBlockAssetBuffer = lisk_codec_1.codec.encode(lisk_chain_1.getGenesisBlockHeaderAssetSchema(accountSchema), header.asset);\n  var genesisBlockHeaderBuffer = lisk_codec_1.codec.encode(lisk_chain_1.blockHeaderSchema, _objectSpread(_objectSpread({}, header), {}, {\n    asset: genesisBlockAssetBuffer\n  }));\n  return lisk_cryptography_1.hash(genesisBlockHeaderBuffer);\n};\n\nvar createAccount = function createAccount(account, defaultAccount) {\n  return lisk_utils_1.objects.mergeDeep({}, lisk_utils_1.objects.cloneDeep(defaultAccount), account);\n};\n\nvar createGenesisBlock = function createGenesisBlock(params) {\n  var _a, _b, _c, _d;\n\n  var initRounds = (_a = params.initRounds) !== null && _a !== void 0 ? _a : 3;\n  var height = (_b = params.height) !== null && _b !== void 0 ? _b : 0;\n  var timestamp = (_c = params.timestamp) !== null && _c !== void 0 ? _c : Math.floor(Date.now() / 1000);\n  var previousBlockID = (_d = params.previousBlockID) !== null && _d !== void 0 ? _d : Buffer.from(constants_1.EMPTY_BUFFER);\n\n  var _lisk_chain_1$getAcco = lisk_chain_1.getAccountSchemaWithDefault(params.accountAssetSchemas),\n      defaultAccount = _lisk_chain_1$getAcco.default,\n      accountSchema = _objectWithoutProperties(_lisk_chain_1$getAcco, _excluded);\n\n  var version = constants_1.GENESIS_BLOCK_VERSION;\n  var generatorPublicKey = constants_1.GENESIS_BLOCK_GENERATOR_PUBLIC_KEY;\n  var reward = constants_1.GENESIS_BLOCK_REWARD;\n  var signature = constants_1.GENESIS_BLOCK_SIGNATURE;\n  var transactionRoot = constants_1.GENESIS_BLOCK_TRANSACTION_ROOT;\n  var accounts = params.accounts.map(function (account) {\n    return createAccount(account, defaultAccount);\n  }).sort(function (a, b) {\n    if (a.address.length < b.address.length) {\n      return -1;\n    }\n\n    if (a.address.length > b.address.length) {\n      return 1;\n    }\n\n    return a.address.compare(b.address);\n  });\n\n  var initDelegates = _toConsumableArray(params.initDelegates).sort(function (a, b) {\n    return a.compare(b);\n  });\n\n  var header = {\n    generatorPublicKey: generatorPublicKey,\n    height: height,\n    previousBlockID: previousBlockID,\n    reward: reward,\n    signature: signature,\n    timestamp: timestamp,\n    transactionRoot: transactionRoot,\n    version: version,\n    asset: {\n      initRounds: initRounds,\n      initDelegates: initDelegates,\n      accounts: accounts\n    }\n  };\n  var genesisBlock = {\n    header: _objectSpread(_objectSpread({}, header), {}, {\n      id: getBlockId(header, accountSchema)\n    }),\n    payload: []\n  };\n  return genesisBlock;\n};\n\nexports.createGenesisBlock = createGenesisBlock;\n\nvar getGenesisBlockJSON = function getGenesisBlockJSON(params) {\n  return lisk_codec_1.codec.toJSON(exports.getGenesisBlockSchema(params.accountAssetSchemas), params.genesisBlock);\n};\n\nexports.getGenesisBlockJSON = getGenesisBlockJSON;","map":{"version":3,"sources":["../src/create.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getGenesisBlockJSON = exports.createGenesisBlock = exports.getGenesisBlockSchema = void 0;\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_chain_1 = require(\"@liskhq/lisk-chain\");\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nconst constants_1 = require(\"./constants\");\nconst getGenesisBlockSchema = (accountSchema) => lisk_utils_1.objects.mergeDeep({}, lisk_chain_1.blockSchema, {\n    properties: {\n        header: lisk_utils_1.objects.mergeDeep({}, lisk_chain_1.blockHeaderSchema, {\n            $id: '/block/genesis/header/id',\n            properties: {\n                id: {\n                    dataType: 'bytes',\n                },\n                asset: lisk_chain_1.getGenesisBlockHeaderAssetSchema(lisk_chain_1.getAccountSchemaWithDefault(accountSchema)),\n            },\n        }),\n    },\n});\nexports.getGenesisBlockSchema = getGenesisBlockSchema;\nconst getBlockId = (header, accountSchema) => {\n    const genesisBlockAssetBuffer = lisk_codec_1.codec.encode(lisk_chain_1.getGenesisBlockHeaderAssetSchema(accountSchema), header.asset);\n    const genesisBlockHeaderBuffer = lisk_codec_1.codec.encode(lisk_chain_1.blockHeaderSchema, {\n        ...header,\n        asset: genesisBlockAssetBuffer,\n    });\n    return lisk_cryptography_1.hash(genesisBlockHeaderBuffer);\n};\nconst createAccount = (account, defaultAccount) => lisk_utils_1.objects.mergeDeep({}, lisk_utils_1.objects.cloneDeep(defaultAccount), account);\nconst createGenesisBlock = (params) => {\n    var _a, _b, _c, _d;\n    const initRounds = (_a = params.initRounds) !== null && _a !== void 0 ? _a : 3;\n    const height = (_b = params.height) !== null && _b !== void 0 ? _b : 0;\n    const timestamp = (_c = params.timestamp) !== null && _c !== void 0 ? _c : Math.floor(Date.now() / 1000);\n    const previousBlockID = (_d = params.previousBlockID) !== null && _d !== void 0 ? _d : Buffer.from(constants_1.EMPTY_BUFFER);\n    const { default: defaultAccount, ...accountSchema } = lisk_chain_1.getAccountSchemaWithDefault(params.accountAssetSchemas);\n    const version = constants_1.GENESIS_BLOCK_VERSION;\n    const generatorPublicKey = constants_1.GENESIS_BLOCK_GENERATOR_PUBLIC_KEY;\n    const reward = constants_1.GENESIS_BLOCK_REWARD;\n    const signature = constants_1.GENESIS_BLOCK_SIGNATURE;\n    const transactionRoot = constants_1.GENESIS_BLOCK_TRANSACTION_ROOT;\n    const accounts = params.accounts\n        .map(account => createAccount(account, defaultAccount))\n        .sort((a, b) => {\n        if (a.address.length < b.address.length) {\n            return -1;\n        }\n        if (a.address.length > b.address.length) {\n            return 1;\n        }\n        return a.address.compare(b.address);\n    });\n    const initDelegates = [...params.initDelegates].sort((a, b) => a.compare(b));\n    const header = {\n        generatorPublicKey,\n        height,\n        previousBlockID,\n        reward,\n        signature,\n        timestamp,\n        transactionRoot,\n        version,\n        asset: {\n            initRounds,\n            initDelegates,\n            accounts,\n        },\n    };\n    const genesisBlock = {\n        header: {\n            ...header,\n            id: getBlockId(header, accountSchema),\n        },\n        payload: [],\n    };\n    return genesisBlock;\n};\nexports.createGenesisBlock = createGenesisBlock;\nconst getGenesisBlockJSON = (params) => lisk_codec_1.codec.toJSON(exports.getGenesisBlockSchema(params.accountAssetSchemas), params.genesisBlock);\nexports.getGenesisBlockJSON = getGenesisBlockJSON;\n//# sourceMappingURL=create.js.map"]},"metadata":{},"sourceType":"script"}