{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBlockByHeight = exports.getBlockById = void 0;\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nvar getBlockById = function getBlockById(channel, codec) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res, next) {\n      var blockId, block;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              blockId = req.params.id;\n\n              if (lisk_validator_1.isHexString(blockId)) {\n                _context.next = 4;\n                break;\n              }\n\n              res.status(400).send({\n                errors: [{\n                  message: 'The block id parameter should be a hex string.'\n                }]\n              });\n              return _context.abrupt(\"return\");\n\n            case 4:\n              _context.prev = 4;\n              _context.next = 7;\n              return channel.invoke('app:getBlockByID', {\n                id: blockId\n              });\n\n            case 7:\n              block = _context.sent;\n              res.status(200).send({\n                data: codec.decodeBlock(block),\n                meta: {}\n              });\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](4);\n\n              if (_context.t0.message.startsWith('Specified key blocks:id')) {\n                res.status(404).send({\n                  errors: [{\n                    message: \"Block with id '\".concat(blockId, \"' was not found\")\n                  }]\n                });\n              } else {\n                next(_context.t0);\n              }\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 11]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexports.getBlockById = getBlockById;\n\nvar getBlockByHeight = function getBlockByHeight(channel, codec) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res, next) {\n      var height, block;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              height = req.query.height;\n\n              if (!(!lisk_validator_1.isNumberString(height) || !lisk_validator_1.isUInt32(Number(height)))) {\n                _context2.next = 4;\n                break;\n              }\n\n              res.status(400).send({\n                errors: [{\n                  message: 'The block height query parameter should be a number within uint32.'\n                }]\n              });\n              return _context2.abrupt(\"return\");\n\n            case 4:\n              _context2.prev = 4;\n              _context2.next = 7;\n              return channel.invoke('app:getBlockByHeight', {\n                height: parseInt(height, 10)\n              });\n\n            case 7:\n              block = _context2.sent;\n              res.status(200).send({\n                data: [codec.decodeBlock(block)],\n                meta: {}\n              });\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](4);\n\n              if (_context2.t0.message.startsWith('Specified key blocks:height')) {\n                res.status(404).send({\n                  errors: [{\n                    message: \"Block with height '\".concat(height, \"' was not found\")\n                  }]\n                });\n              } else {\n                next(_context2.t0);\n              }\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[4, 11]]);\n    }));\n\n    return function (_x4, _x5, _x6) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\n\nexports.getBlockByHeight = getBlockByHeight;","map":{"version":3,"sources":["../../src/controllers/blocks.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBlockByHeight = exports.getBlockById = void 0;\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst getBlockById = (channel, codec) => async (req, res, next) => {\n    const blockId = req.params.id;\n    if (!lisk_validator_1.isHexString(blockId)) {\n        res.status(400).send({\n            errors: [{ message: 'The block id parameter should be a hex string.' }],\n        });\n        return;\n    }\n    try {\n        const block = await channel.invoke('app:getBlockByID', { id: blockId });\n        res.status(200).send({ data: codec.decodeBlock(block), meta: {} });\n    }\n    catch (err) {\n        if (err.message.startsWith('Specified key blocks:id')) {\n            res.status(404).send({\n                errors: [{ message: `Block with id '${blockId}' was not found` }],\n            });\n        }\n        else {\n            next(err);\n        }\n    }\n};\nexports.getBlockById = getBlockById;\nconst getBlockByHeight = (channel, codec) => async (req, res, next) => {\n    const { height } = req.query;\n    if (!lisk_validator_1.isNumberString(height) || !lisk_validator_1.isUInt32(Number(height))) {\n        res.status(400).send({\n            errors: [{ message: 'The block height query parameter should be a number within uint32.' }],\n        });\n        return;\n    }\n    try {\n        const block = await channel.invoke('app:getBlockByHeight', {\n            height: parseInt(height, 10),\n        });\n        res.status(200).send({ data: [codec.decodeBlock(block)], meta: {} });\n    }\n    catch (err) {\n        if (err.message.startsWith('Specified key blocks:height')) {\n            res.status(404).send({\n                errors: [{ message: `Block with height '${height}' was not found` }],\n            });\n        }\n        else {\n            next(err);\n        }\n    }\n};\nexports.getBlockByHeight = getBlockByHeight;\n//# sourceMappingURL=blocks.js.map"]},"metadata":{},"sourceType":"script"}