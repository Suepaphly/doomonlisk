{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PomTransactionAsset = exports.blockHeaderSchema = void 0;\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar lisk_bft_1 = require(\"@liskhq/lisk-bft\");\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar base_asset_1 = require(\"../../base_asset\");\n\nvar constants_1 = require(\"../constants\");\n\nvar utils_1 = require(\"../utils\");\n\nvar signingBlockHeaderSchema = {\n  $id: 'lisk/dpos/signingBlockHeader',\n  type: 'object',\n  properties: {\n    version: {\n      dataType: 'uint32',\n      fieldNumber: 1\n    },\n    timestamp: {\n      dataType: 'uint32',\n      fieldNumber: 2\n    },\n    height: {\n      dataType: 'uint32',\n      fieldNumber: 3\n    },\n    previousBlockID: {\n      dataType: 'bytes',\n      fieldNumber: 4\n    },\n    transactionRoot: {\n      dataType: 'bytes',\n      fieldNumber: 5\n    },\n    generatorPublicKey: {\n      dataType: 'bytes',\n      fieldNumber: 6\n    },\n    reward: {\n      dataType: 'uint64',\n      fieldNumber: 7\n    },\n    asset: {\n      type: 'object',\n      fieldNumber: 8,\n      properties: {\n        maxHeightPreviouslyForged: {\n          dataType: 'uint32',\n          fieldNumber: 1\n        },\n        maxHeightPrevoted: {\n          dataType: 'uint32',\n          fieldNumber: 2\n        },\n        seedReveal: {\n          dataType: 'bytes',\n          fieldNumber: 3\n        }\n      },\n      required: ['maxHeightPreviouslyForged', 'maxHeightPrevoted', 'seedReveal']\n    }\n  },\n  required: ['version', 'timestamp', 'height', 'previousBlockID', 'transactionRoot', 'generatorPublicKey', 'reward', 'asset']\n};\nexports.blockHeaderSchema = _objectSpread(_objectSpread({}, signingBlockHeaderSchema), {}, {\n  $id: 'lisk/block-header',\n  properties: _objectSpread(_objectSpread({}, signingBlockHeaderSchema.properties), {}, {\n    signature: {\n      dataType: 'bytes',\n      fieldNumber: 9\n    }\n  })\n});\n\nvar getBlockHeaderBytes = function getBlockHeaderBytes(header) {\n  return lisk_codec_1.codec.encode(signingBlockHeaderSchema, header);\n};\n\nvar PomTransactionAsset = /*#__PURE__*/function (_base_asset_1$BaseAss) {\n  _inherits(PomTransactionAsset, _base_asset_1$BaseAss);\n\n  var _super = _createSuper(PomTransactionAsset);\n\n  function PomTransactionAsset() {\n    var _this;\n\n    _classCallCheck(this, PomTransactionAsset);\n\n    _this = _super.apply(this, arguments);\n    _this.name = 'reportDelegateMisbehavior';\n    _this.id = 3;\n    _this.schema = {\n      $id: 'lisk/dpos/pom',\n      type: 'object',\n      required: ['header1', 'header2'],\n      properties: {\n        header1: _objectSpread(_objectSpread({}, exports.blockHeaderSchema), {}, {\n          $id: 'block-header1',\n          fieldNumber: 1\n        }),\n        header2: _objectSpread(_objectSpread({}, exports.blockHeaderSchema), {}, {\n          $id: 'block-header2',\n          fieldNumber: 2\n        })\n      }\n    };\n    return _this;\n  }\n\n  _createClass(PomTransactionAsset, [{\n    key: \"validate\",\n    value: function validate(_ref) {\n      var asset = _ref.asset;\n      var header1ID = lisk_cryptography_1.hash(getBlockHeaderBytes(asset.header1));\n\n      var header1 = _objectSpread(_objectSpread({}, asset.header1), {}, {\n        id: header1ID\n      });\n\n      var header2ID = lisk_cryptography_1.hash(getBlockHeaderBytes(asset.header2));\n\n      var header2 = _objectSpread(_objectSpread({}, asset.header2), {}, {\n        id: header2ID\n      });\n\n      if (!lisk_bft_1.areHeadersContradicting(header1, header2)) {\n        throw new Error('BlockHeaders are not contradicting as per BFT violation rules.');\n      }\n    }\n  }, {\n    key: \"apply\",\n    value: function () {\n      var _apply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n        var asset, transaction, store, reducerHandler, currentHeight, networkIdentifier, delegateAddress, delegateAccount, blockHeader1Bytes, blockHeader2Bytes, delegateAccountBalance, minRemainingBalance, delegateSubtractableBalance, reward, updatedDelegateAccount;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                asset = _ref2.asset, transaction = _ref2.transaction, store = _ref2.stateStore, reducerHandler = _ref2.reducerHandler;\n                currentHeight = store.chain.lastBlockHeaders[0].height + 1;\n                networkIdentifier = store.chain.networkIdentifier;\n\n                if (!(Math.abs(asset.header1.height - currentHeight) >= constants_1.MAX_PUNISHABLE_BLOCK_HEIGHT_DIFFERENCE)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"Difference between header1.height and current height must be less than \".concat(constants_1.MAX_PUNISHABLE_BLOCK_HEIGHT_DIFFERENCE.toString(), \".\"));\n\n              case 5:\n                if (!(Math.abs(asset.header2.height - currentHeight) >= constants_1.MAX_PUNISHABLE_BLOCK_HEIGHT_DIFFERENCE)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                throw new Error(\"Difference between header2.height and current height must be less than \".concat(constants_1.MAX_PUNISHABLE_BLOCK_HEIGHT_DIFFERENCE.toString(), \".\"));\n\n              case 7:\n                delegateAddress = lisk_cryptography_1.getAddressFromPublicKey(asset.header1.generatorPublicKey);\n                _context.next = 10;\n                return store.account.get(delegateAddress);\n\n              case 10:\n                delegateAccount = _context.sent;\n\n                if (!(delegateAccount.dpos.delegate.username === '')) {\n                  _context.next = 13;\n                  break;\n                }\n\n                throw new Error('Account is not a delegate.');\n\n              case 13:\n                if (!delegateAccount.dpos.delegate.isBanned) {\n                  _context.next = 15;\n                  break;\n                }\n\n                throw new Error('Cannot apply proof-of-misbehavior. Delegate is already banned.');\n\n              case 15:\n                if (!(utils_1.getPunishmentPeriod(delegateAccount, delegateAccount, store.chain.lastBlockHeaders[0].height) > 0)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                throw new Error('Cannot apply proof-of-misbehavior. Delegate is already punished.');\n\n              case 17:\n                blockHeader1Bytes = Buffer.concat([networkIdentifier, getBlockHeaderBytes(asset.header1)]);\n\n                if (utils_1.validateSignature(asset.header1.generatorPublicKey, asset.header1.signature, blockHeader1Bytes)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                throw new Error('Invalid block signature for header 1.');\n\n              case 20:\n                blockHeader2Bytes = Buffer.concat([networkIdentifier, getBlockHeaderBytes(asset.header2)]);\n\n                if (utils_1.validateSignature(asset.header2.generatorPublicKey, asset.header2.signature, blockHeader2Bytes)) {\n                  _context.next = 23;\n                  break;\n                }\n\n                throw new Error('Invalid block signature for header 2.');\n\n              case 23:\n                _context.next = 25;\n                return reducerHandler.invoke('token:getBalance', {\n                  address: delegateAccount.address\n                });\n\n              case 25:\n                delegateAccountBalance = _context.sent;\n                _context.next = 28;\n                return reducerHandler.invoke('token:getMinRemainingBalance');\n\n              case 28:\n                minRemainingBalance = _context.sent;\n                delegateSubtractableBalance = delegateAccountBalance - minRemainingBalance > BigInt(0) ? delegateAccountBalance - minRemainingBalance : BigInt(0);\n                reward = store.chain.lastBlockReward > delegateSubtractableBalance ? delegateSubtractableBalance : store.chain.lastBlockReward;\n\n                if (!(reward > BigInt(0))) {\n                  _context.next = 34;\n                  break;\n                }\n\n                _context.next = 34;\n                return reducerHandler.invoke('token:credit', {\n                  address: transaction.senderAddress,\n                  amount: reward\n                });\n\n              case 34:\n                _context.next = 36;\n                return store.account.get(delegateAddress);\n\n              case 36:\n                updatedDelegateAccount = _context.sent;\n                updatedDelegateAccount.dpos.delegate.pomHeights.push(currentHeight);\n\n                if (updatedDelegateAccount.dpos.delegate.pomHeights.length >= constants_1.MAX_POM_HEIGHTS) {\n                  updatedDelegateAccount.dpos.delegate.isBanned = true;\n                }\n\n                _context.next = 41;\n                return store.account.set(updatedDelegateAccount.address, updatedDelegateAccount);\n\n              case 41:\n                if (!(reward > BigInt(0))) {\n                  _context.next = 44;\n                  break;\n                }\n\n                _context.next = 44;\n                return reducerHandler.invoke('token:debit', {\n                  address: updatedDelegateAccount.address,\n                  amount: reward\n                });\n\n              case 44:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function apply(_x) {\n        return _apply.apply(this, arguments);\n      }\n\n      return apply;\n    }()\n  }]);\n\n  return PomTransactionAsset;\n}(base_asset_1.BaseAsset);\n\nexports.PomTransactionAsset = PomTransactionAsset;","map":{"version":3,"sources":["../../../../src/modules/dpos/transaction_assets/pom_transaction_asset.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PomTransactionAsset = exports.blockHeaderSchema = void 0;\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_bft_1 = require(\"@liskhq/lisk-bft\");\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst base_asset_1 = require(\"../../base_asset\");\nconst constants_1 = require(\"../constants\");\nconst utils_1 = require(\"../utils\");\nconst signingBlockHeaderSchema = {\n    $id: 'lisk/dpos/signingBlockHeader',\n    type: 'object',\n    properties: {\n        version: { dataType: 'uint32', fieldNumber: 1 },\n        timestamp: { dataType: 'uint32', fieldNumber: 2 },\n        height: { dataType: 'uint32', fieldNumber: 3 },\n        previousBlockID: { dataType: 'bytes', fieldNumber: 4 },\n        transactionRoot: { dataType: 'bytes', fieldNumber: 5 },\n        generatorPublicKey: { dataType: 'bytes', fieldNumber: 6 },\n        reward: { dataType: 'uint64', fieldNumber: 7 },\n        asset: {\n            type: 'object',\n            fieldNumber: 8,\n            properties: {\n                maxHeightPreviouslyForged: {\n                    dataType: 'uint32',\n                    fieldNumber: 1,\n                },\n                maxHeightPrevoted: {\n                    dataType: 'uint32',\n                    fieldNumber: 2,\n                },\n                seedReveal: {\n                    dataType: 'bytes',\n                    fieldNumber: 3,\n                },\n            },\n            required: ['maxHeightPreviouslyForged', 'maxHeightPrevoted', 'seedReveal'],\n        },\n    },\n    required: [\n        'version',\n        'timestamp',\n        'height',\n        'previousBlockID',\n        'transactionRoot',\n        'generatorPublicKey',\n        'reward',\n        'asset',\n    ],\n};\nexports.blockHeaderSchema = {\n    ...signingBlockHeaderSchema,\n    $id: 'lisk/block-header',\n    properties: {\n        ...signingBlockHeaderSchema.properties,\n        signature: { dataType: 'bytes', fieldNumber: 9 },\n    },\n};\nconst getBlockHeaderBytes = (header) => lisk_codec_1.codec.encode(signingBlockHeaderSchema, header);\nclass PomTransactionAsset extends base_asset_1.BaseAsset {\n    constructor() {\n        super(...arguments);\n        this.name = 'reportDelegateMisbehavior';\n        this.id = 3;\n        this.schema = {\n            $id: 'lisk/dpos/pom',\n            type: 'object',\n            required: ['header1', 'header2'],\n            properties: {\n                header1: {\n                    ...exports.blockHeaderSchema,\n                    $id: 'block-header1',\n                    fieldNumber: 1,\n                },\n                header2: {\n                    ...exports.blockHeaderSchema,\n                    $id: 'block-header2',\n                    fieldNumber: 2,\n                },\n            },\n        };\n    }\n    validate({ asset }) {\n        const header1ID = lisk_cryptography_1.hash(getBlockHeaderBytes(asset.header1));\n        const header1 = {\n            ...asset.header1,\n            id: header1ID,\n        };\n        const header2ID = lisk_cryptography_1.hash(getBlockHeaderBytes(asset.header2));\n        const header2 = {\n            ...asset.header2,\n            id: header2ID,\n        };\n        if (!lisk_bft_1.areHeadersContradicting(header1, header2)) {\n            throw new Error('BlockHeaders are not contradicting as per BFT violation rules.');\n        }\n    }\n    async apply({ asset, transaction, stateStore: store, reducerHandler, }) {\n        const currentHeight = store.chain.lastBlockHeaders[0].height + 1;\n        const { networkIdentifier } = store.chain;\n        if (Math.abs(asset.header1.height - currentHeight) >= constants_1.MAX_PUNISHABLE_BLOCK_HEIGHT_DIFFERENCE) {\n            throw new Error(`Difference between header1.height and current height must be less than ${constants_1.MAX_PUNISHABLE_BLOCK_HEIGHT_DIFFERENCE.toString()}.`);\n        }\n        if (Math.abs(asset.header2.height - currentHeight) >= constants_1.MAX_PUNISHABLE_BLOCK_HEIGHT_DIFFERENCE) {\n            throw new Error(`Difference between header2.height and current height must be less than ${constants_1.MAX_PUNISHABLE_BLOCK_HEIGHT_DIFFERENCE.toString()}.`);\n        }\n        const delegateAddress = lisk_cryptography_1.getAddressFromPublicKey(asset.header1.generatorPublicKey);\n        const delegateAccount = await store.account.get(delegateAddress);\n        if (delegateAccount.dpos.delegate.username === '') {\n            throw new Error('Account is not a delegate.');\n        }\n        if (delegateAccount.dpos.delegate.isBanned) {\n            throw new Error('Cannot apply proof-of-misbehavior. Delegate is already banned.');\n        }\n        if (utils_1.getPunishmentPeriod(delegateAccount, delegateAccount, store.chain.lastBlockHeaders[0].height) > 0) {\n            throw new Error('Cannot apply proof-of-misbehavior. Delegate is already punished.');\n        }\n        const blockHeader1Bytes = Buffer.concat([\n            networkIdentifier,\n            getBlockHeaderBytes(asset.header1),\n        ]);\n        if (!utils_1.validateSignature(asset.header1.generatorPublicKey, asset.header1.signature, blockHeader1Bytes)) {\n            throw new Error('Invalid block signature for header 1.');\n        }\n        const blockHeader2Bytes = Buffer.concat([\n            networkIdentifier,\n            getBlockHeaderBytes(asset.header2),\n        ]);\n        if (!utils_1.validateSignature(asset.header2.generatorPublicKey, asset.header2.signature, blockHeader2Bytes)) {\n            throw new Error('Invalid block signature for header 2.');\n        }\n        const delegateAccountBalance = await reducerHandler.invoke('token:getBalance', {\n            address: delegateAccount.address,\n        });\n        const minRemainingBalance = await reducerHandler.invoke('token:getMinRemainingBalance');\n        const delegateSubtractableBalance = delegateAccountBalance - minRemainingBalance > BigInt(0)\n            ? delegateAccountBalance - minRemainingBalance\n            : BigInt(0);\n        const reward = store.chain.lastBlockReward > delegateSubtractableBalance\n            ? delegateSubtractableBalance\n            : store.chain.lastBlockReward;\n        if (reward > BigInt(0)) {\n            await reducerHandler.invoke('token:credit', {\n                address: transaction.senderAddress,\n                amount: reward,\n            });\n        }\n        const updatedDelegateAccount = await store.account.get(delegateAddress);\n        updatedDelegateAccount.dpos.delegate.pomHeights.push(currentHeight);\n        if (updatedDelegateAccount.dpos.delegate.pomHeights.length >= constants_1.MAX_POM_HEIGHTS) {\n            updatedDelegateAccount.dpos.delegate.isBanned = true;\n        }\n        await store.account.set(updatedDelegateAccount.address, updatedDelegateAccount);\n        if (reward > BigInt(0)) {\n            await reducerHandler.invoke('token:debit', {\n                address: updatedDelegateAccount.address,\n                amount: reward,\n            });\n        }\n    }\n}\nexports.PomTransactionAsset = PomTransactionAsset;\n//# sourceMappingURL=pom_transaction_asset.js.map"]},"metadata":{},"sourceType":"script"}