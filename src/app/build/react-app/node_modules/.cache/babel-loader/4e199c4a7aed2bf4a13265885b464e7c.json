{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar error = {\n  message: function message(_ref) {\n    var keyword = _ref.keyword,\n        schemaCode = _ref.schemaCode;\n    var comp = keyword === \"maxItems\" ? \"more\" : \"fewer\";\n    return codegen_1.str(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must NOT have \", \" than \", \" items\"])), comp, schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{limit: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: [\"maxItems\", \"minItems\"],\n  type: \"array\",\n  schemaType: \"number\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var keyword = cxt.keyword,\n        data = cxt.data,\n        schemaCode = cxt.schemaCode;\n    var op = keyword === \"maxItems\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n    cxt.fail$data(codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \".length \", \" \", \"\"])), data, op, schemaCode));\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/limitItems.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,IAAM,KAAK,GAA2B;AACpC,EAAA,OADoC,yBACP;AAAA,QAApB,OAAoB,QAApB,OAAoB;AAAA,QAAX,UAAW,QAAX,UAAW;AAC3B,QAAM,IAAI,GAAG,OAAO,KAAK,UAAZ,GAAyB,MAAzB,GAAkC,OAA/C;AACA,WAAO,SAAA,CAAA,GAAP,wGAA2B,IAA3B,EAAwC,UAAxC;AACD,GAJmC;AAKpC,EAAA,MAAM,EAAE;AAAA,QAAE,UAAF,SAAE,UAAF;AAAA,WAAkB,SAAA,CAAA,CAAlB,qFAA8B,UAA9B;AAAA;AAL4B,CAAtC;AAQA,IAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,CAAC,UAAD,EAAa,UAAb,CADwB;AAEjC,EAAA,IAAI,EAAE,OAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAE,IAJ0B;AAKjC,EAAA,KAAK,EAAL,KALiC;AAMjC,EAAA,IANiC,gBAM5B,GAN4B,EAMb;AAClB,QAAO,OAAP,GAAoC,GAApC,CAAO,OAAP;AAAA,QAAgB,IAAhB,GAAoC,GAApC,CAAgB,IAAhB;AAAA,QAAsB,UAAtB,GAAoC,GAApC,CAAsB,UAAtB;AACA,QAAM,EAAE,GAAG,OAAO,KAAK,UAAZ,GAAyB,SAAA,CAAA,SAAA,CAAU,EAAnC,GAAwC,SAAA,CAAA,SAAA,CAAU,EAA7D;AACA,IAAA,GAAG,CAAC,SAAJ,CAAc,SAAA,CAAA,CAAd,6FAAkB,IAAlB,EAAiC,EAAjC,EAAuC,UAAvC;AACD;AAVgC,CAAnC;AAaA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message({ keyword, schemaCode }) {\n        const comp = keyword === \"maxItems\" ? \"more\" : \"fewer\";\n        return codegen_1.str `must NOT have ${comp} than ${schemaCode} items`;\n    },\n    params: ({ schemaCode }) => codegen_1._ `{limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: [\"maxItems\", \"minItems\"],\n    type: \"array\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode } = cxt;\n        const op = keyword === \"maxItems\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        cxt.fail$data(codegen_1._ `${data}.length ${op} ${schemaCode}`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=limitItems.js.map"]},"metadata":{},"sourceType":"script"}