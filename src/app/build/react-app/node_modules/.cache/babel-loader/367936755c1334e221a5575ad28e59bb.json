{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTransaction = void 0;\n\nvar lisk_chain_1 = require(\"@liskhq/lisk-chain\");\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar lisk_transactions_1 = require(\"@liskhq/lisk-transactions\");\n\nvar createTransaction = function createTransaction(_ref) {\n  var moduleID = _ref.moduleID,\n      assetClass = _ref.assetClass,\n      asset = _ref.asset,\n      nonce = _ref.nonce,\n      fee = _ref.fee,\n      passphrase = _ref.passphrase,\n      networkIdentifier = _ref.networkIdentifier;\n\n  var _lisk_cryptography_1$ = lisk_cryptography_1.getAddressAndPublicKeyFromPassphrase(passphrase !== null && passphrase !== void 0 ? passphrase : ''),\n      publicKey = _lisk_cryptography_1$.publicKey;\n\n  var assetInstance = new assetClass();\n  var assetID = assetInstance.id;\n  var assetBytes = lisk_codec_1.codec.encode(assetInstance.schema, asset);\n  var transaction = {\n    moduleID: moduleID,\n    assetID: assetID,\n    nonce: nonce !== null && nonce !== void 0 ? nonce : BigInt(0),\n    fee: fee !== null && fee !== void 0 ? fee : BigInt(0),\n    senderPublicKey: publicKey,\n    asset: asset,\n    signatures: []\n  };\n  var validationErrors = lisk_transactions_1.validateTransaction(assetInstance.schema, transaction);\n\n  if (validationErrors) {\n    throw validationErrors;\n  }\n\n  if (!passphrase) {\n    return new lisk_chain_1.Transaction(_objectSpread(_objectSpread({}, transaction), {}, {\n      asset: assetBytes\n    }));\n  }\n\n  if (!networkIdentifier) {\n    throw new Error('Network identifier is required to sign a transaction');\n  }\n\n  var signedTransaction = lisk_transactions_1.signTransaction(assetInstance.schema, transaction, networkIdentifier, passphrase);\n  return new lisk_chain_1.Transaction(_objectSpread(_objectSpread({}, signedTransaction), {}, {\n    asset: assetBytes\n  }));\n};\n\nexports.createTransaction = createTransaction;","map":{"version":3,"sources":["../../src/testing/create_transaction.ts"],"names":[],"mappings":";;;;;;;;;AAeA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AAaO,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,OAQS;AAAA,MAPzC,QAOyC,QAPzC,QAOyC;AAAA,MANzC,UAMyC,QANzC,UAMyC;AAAA,MALzC,KAKyC,QALzC,KAKyC;AAAA,MAJzC,KAIyC,QAJzC,KAIyC;AAAA,MAHzC,GAGyC,QAHzC,GAGyC;AAAA,MAFzC,UAEyC,QAFzC,UAEyC;AAAA,MADzC,iBACyC,QADzC,iBACyC;;AACzC,8BAAsB,mBAAA,CAAA,oCAAA,CAAqC,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAA,UAAA,GAAc,EAAnD,CAAtB;AAAA,MAAQ,SAAR,yBAAQ,SAAR;;AAEA,MAAM,aAAa,GAAG,IAAI,UAAJ,EAAtB;AACA,MAAM,OAAO,GAAG,aAAa,CAAC,EAA9B;AACA,MAAM,UAAU,GAAG,YAAA,CAAA,KAAA,CAAM,MAAN,CAAa,aAAa,CAAC,MAA3B,EAAmC,KAAnC,CAAnB;AAEA,MAAM,WAAW,GAAG;AACnB,IAAA,QAAQ,EAAR,QADmB;AAEnB,IAAA,OAAO,EAAP,OAFmB;AAGnB,IAAA,KAAK,EAAE,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAA,KAAA,GAAS,MAAM,CAAC,CAAD,CAHH;AAInB,IAAA,GAAG,EAAE,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAA,GAAA,GAAO,MAAM,CAAC,CAAD,CAJC;AAKnB,IAAA,eAAe,EAAE,SALE;AAMnB,IAAA,KAAK,EAAL,KANmB;AAOnB,IAAA,UAAU,EAAE;AAPO,GAApB;AAUA,MAAM,gBAAgB,GAAG,mBAAA,CAAA,mBAAA,CAAoB,aAAa,CAAC,MAAlC,EAA0C,WAA1C,CAAzB;;AACA,MAAI,gBAAJ,EAAsB;AACrB,UAAM,gBAAN;AACA;;AAED,MAAI,CAAC,UAAL,EAAiB;AAChB,WAAO,IAAI,YAAA,CAAA,WAAJ,iCAAqB,WAArB;AAAkC,MAAA,KAAK,EAAE;AAAzC,OAAP;AACA;;AAED,MAAI,CAAC,iBAAL,EAAwB;AACvB,UAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACA;;AAED,MAAM,iBAAiB,GAAG,mBAAA,CAAA,eAAA,CACzB,aAAa,CAAC,MADW,EAEzB,WAFyB,EAGzB,iBAHyB,EAIzB,UAJyB,CAA1B;AAQA,SAAO,IAAI,YAAA,CAAA,WAAJ,iCAAqB,iBAArB;AAAwC,IAAA,KAAK,EAAE;AAA/C,KAAP;AACA,CA/CM;;AAAM,OAAA,CAAA,iBAAA,GAAiB,iBAAjB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createTransaction = void 0;\nconst lisk_chain_1 = require(\"@liskhq/lisk-chain\");\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_transactions_1 = require(\"@liskhq/lisk-transactions\");\nconst createTransaction = ({ moduleID, assetClass, asset, nonce, fee, passphrase, networkIdentifier, }) => {\n    const { publicKey } = lisk_cryptography_1.getAddressAndPublicKeyFromPassphrase(passphrase !== null && passphrase !== void 0 ? passphrase : '');\n    const assetInstance = new assetClass();\n    const assetID = assetInstance.id;\n    const assetBytes = lisk_codec_1.codec.encode(assetInstance.schema, asset);\n    const transaction = {\n        moduleID,\n        assetID,\n        nonce: nonce !== null && nonce !== void 0 ? nonce : BigInt(0),\n        fee: fee !== null && fee !== void 0 ? fee : BigInt(0),\n        senderPublicKey: publicKey,\n        asset,\n        signatures: [],\n    };\n    const validationErrors = lisk_transactions_1.validateTransaction(assetInstance.schema, transaction);\n    if (validationErrors) {\n        throw validationErrors;\n    }\n    if (!passphrase) {\n        return new lisk_chain_1.Transaction({ ...transaction, asset: assetBytes });\n    }\n    if (!networkIdentifier) {\n        throw new Error('Network identifier is required to sign a transaction');\n    }\n    const signedTransaction = lisk_transactions_1.signTransaction(assetInstance.schema, transaction, networkIdentifier, passphrase);\n    return new lisk_chain_1.Transaction({ ...signedTransaction, asset: assetBytes });\n};\nexports.createTransaction = createTransaction;\n//# sourceMappingURL=create_transaction.js.map"]},"metadata":{},"sourceType":"script"}