{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getValidators = void 0;\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar schema_1 = require(\"../schema\");\n\nvar constants_1 = require(\"../constants\");\n\nvar getValidators = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stateStore) {\n    var validatorsBuffer, _lisk_codec_1$codec$d, validators;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return stateStore.consensus.get(constants_1.CONSENSUS_STATE_VALIDATORS_KEY);\n\n          case 2:\n            validatorsBuffer = _context.sent;\n\n            if (validatorsBuffer) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error('Validator set must exist');\n\n          case 5:\n            _lisk_codec_1$codec$d = lisk_codec_1.codec.decode(schema_1.validatorsSchema, validatorsBuffer), validators = _lisk_codec_1$codec$d.validators;\n            return _context.abrupt(\"return\", validators);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getValidators(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.getValidators = getValidators;","map":{"version":3,"sources":["../../src/utils/validators.ts"],"names":[],"mappings":";;;;;;;;;;;AAcA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAQO,IAAM,aAAa;AAAA,sEAAG,iBAAO,UAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACG,UAAU,CAAC,SAAX,CAAqB,GAArB,CAAyB,WAAA,CAAA,8BAAzB,CADH;;AAAA;AACtB,YAAA,gBADsB;;AAAA,gBAEvB,gBAFuB;AAAA;AAAA;AAAA;;AAAA,kBAGrB,IAAI,KAAJ,CAAU,0BAAV,CAHqB;;AAAA;AAAA,oCAKL,YAAA,CAAA,KAAA,CAAM,MAAN,CACtB,QAAA,CAAA,gBADsB,EAEtB,gBAFsB,CALK,EAKpB,UALoB,yBAKpB,UALoB;AAAA,6CAUrB,UAVqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAb,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAAM,OAAA,CAAA,aAAA,GAAa,aAAb","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getValidators = void 0;\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst schema_1 = require(\"../schema\");\nconst constants_1 = require(\"../constants\");\nconst getValidators = async (stateStore) => {\n    const validatorsBuffer = await stateStore.consensus.get(constants_1.CONSENSUS_STATE_VALIDATORS_KEY);\n    if (!validatorsBuffer) {\n        throw new Error('Validator set must exist');\n    }\n    const { validators } = lisk_codec_1.codec.decode(schema_1.validatorsSchema, validatorsBuffer);\n    return validators;\n};\nexports.getValidators = getValidators;\n//# sourceMappingURL=validators.js.map"]},"metadata":{},"sourceType":"script"}