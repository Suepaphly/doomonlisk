{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _inherits = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _wrapNativeSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JSONRPCError = exports.parseError = exports.internalError = exports.invalidParams = exports.methodNotFound = exports.invalidRequest = exports.errorResponse = exports.successResponse = exports.notificationRequest = exports.validateJSONRPCNotification = exports.validateJSONRPCRequest = exports.VERSION = void 0;\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nexports.VERSION = '2.0';\nvar requestSchema = {\n  $id: 'jsonRPCRequestSchema',\n  type: 'object',\n  required: ['jsonrpc', 'method', 'id'],\n  properties: {\n    jsonrpc: {\n      type: 'string',\n      const: '2.0'\n    },\n    method: {\n      type: 'string'\n    },\n    id: {\n      type: ['number', 'string', 'null']\n    },\n    params: {\n      type: 'object'\n    }\n  },\n  additionalProperties: false\n};\nvar notificationSchema = {\n  $id: 'jsonRPCRequestSchema',\n  type: 'object',\n  required: ['jsonrpc', 'method'],\n  properties: {\n    jsonrpc: {\n      type: 'string',\n      const: '2.0'\n    },\n    method: {\n      type: 'string'\n    },\n    params: {\n      type: 'object'\n    }\n  },\n  additionalProperties: false\n};\n\nvar validateJSONRPCRequest = function validateJSONRPCRequest(data) {\n  var errors = lisk_validator_1.validator.validate(requestSchema, data);\n\n  if (errors.length) {\n    throw new lisk_validator_1.LiskValidationError(errors);\n  }\n};\n\nexports.validateJSONRPCRequest = validateJSONRPCRequest;\n\nvar validateJSONRPCNotification = function validateJSONRPCNotification(data) {\n  var errors = lisk_validator_1.validator.validate(notificationSchema, data);\n\n  if (errors.length) {\n    throw new lisk_validator_1.LiskValidationError(errors);\n  }\n};\n\nexports.validateJSONRPCNotification = validateJSONRPCNotification;\n\nvar notificationRequest = function notificationRequest(method, params) {\n  return {\n    jsonrpc: exports.VERSION,\n    method: method,\n    params: params\n  };\n};\n\nexports.notificationRequest = notificationRequest;\n\nvar successResponse = function successResponse(id, result) {\n  return {\n    jsonrpc: exports.VERSION,\n    id: id,\n    result: result\n  };\n};\n\nexports.successResponse = successResponse;\n\nvar errorResponse = function errorResponse(id, error) {\n  return {\n    jsonrpc: exports.VERSION,\n    id: id,\n    error: error\n  };\n};\n\nexports.errorResponse = errorResponse;\n\nvar invalidRequest = function invalidRequest() {\n  return {\n    message: 'Invalid request',\n    code: -32600\n  };\n};\n\nexports.invalidRequest = invalidRequest;\n\nvar methodNotFound = function methodNotFound() {\n  return {\n    message: 'Method not found',\n    code: -32601\n  };\n};\n\nexports.methodNotFound = methodNotFound;\n\nvar invalidParams = function invalidParams() {\n  return {\n    message: 'Invalid params',\n    code: -32602\n  };\n};\n\nexports.invalidParams = invalidParams;\n\nvar internalError = function internalError(data) {\n  if (data) {\n    return {\n      message: 'Internal error',\n      code: -32603,\n      data: data\n    };\n  }\n\n  return {\n    message: 'Internal error',\n    code: -32603\n  };\n};\n\nexports.internalError = internalError;\n\nvar parseError = function parseError() {\n  return {\n    message: 'Parse error',\n    code: -32700\n  };\n};\n\nexports.parseError = parseError;\n\nvar JSONRPCError = /*#__PURE__*/function (_Error) {\n  _inherits(JSONRPCError, _Error);\n\n  var _super = _createSuper(JSONRPCError);\n\n  function JSONRPCError(message, error) {\n    var _this;\n\n    _classCallCheck(this, JSONRPCError);\n\n    _this = _super.call(this, message);\n    _this.response = error;\n    return _this;\n  }\n\n  return JSONRPCError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nexports.JSONRPCError = JSONRPCError;","map":{"version":3,"sources":["../../../src/controller/jsonrpc/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JSONRPCError = exports.parseError = exports.internalError = exports.invalidParams = exports.methodNotFound = exports.invalidRequest = exports.errorResponse = exports.successResponse = exports.notificationRequest = exports.validateJSONRPCNotification = exports.validateJSONRPCRequest = exports.VERSION = void 0;\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nexports.VERSION = '2.0';\nconst requestSchema = {\n    $id: 'jsonRPCRequestSchema',\n    type: 'object',\n    required: ['jsonrpc', 'method', 'id'],\n    properties: {\n        jsonrpc: {\n            type: 'string',\n            const: '2.0',\n        },\n        method: {\n            type: 'string',\n        },\n        id: {\n            type: ['number', 'string', 'null'],\n        },\n        params: {\n            type: 'object',\n        },\n    },\n    additionalProperties: false,\n};\nconst notificationSchema = {\n    $id: 'jsonRPCRequestSchema',\n    type: 'object',\n    required: ['jsonrpc', 'method'],\n    properties: {\n        jsonrpc: {\n            type: 'string',\n            const: '2.0',\n        },\n        method: {\n            type: 'string',\n        },\n        params: {\n            type: 'object',\n        },\n    },\n    additionalProperties: false,\n};\nconst validateJSONRPCRequest = (data) => {\n    const errors = lisk_validator_1.validator.validate(requestSchema, data);\n    if (errors.length) {\n        throw new lisk_validator_1.LiskValidationError(errors);\n    }\n};\nexports.validateJSONRPCRequest = validateJSONRPCRequest;\nconst validateJSONRPCNotification = (data) => {\n    const errors = lisk_validator_1.validator.validate(notificationSchema, data);\n    if (errors.length) {\n        throw new lisk_validator_1.LiskValidationError(errors);\n    }\n};\nexports.validateJSONRPCNotification = validateJSONRPCNotification;\nconst notificationRequest = (method, params) => ({\n    jsonrpc: exports.VERSION,\n    method,\n    params,\n});\nexports.notificationRequest = notificationRequest;\nconst successResponse = (id, result) => ({\n    jsonrpc: exports.VERSION,\n    id,\n    result,\n});\nexports.successResponse = successResponse;\nconst errorResponse = (id, error) => ({\n    jsonrpc: exports.VERSION,\n    id,\n    error,\n});\nexports.errorResponse = errorResponse;\nconst invalidRequest = () => ({\n    message: 'Invalid request',\n    code: -32600,\n});\nexports.invalidRequest = invalidRequest;\nconst methodNotFound = () => ({\n    message: 'Method not found',\n    code: -32601,\n});\nexports.methodNotFound = methodNotFound;\nconst invalidParams = () => ({\n    message: 'Invalid params',\n    code: -32602,\n});\nexports.invalidParams = invalidParams;\nconst internalError = (data) => {\n    if (data) {\n        return { message: 'Internal error', code: -32603, data };\n    }\n    return { message: 'Internal error', code: -32603 };\n};\nexports.internalError = internalError;\nconst parseError = () => ({ message: 'Parse error', code: -32700 });\nexports.parseError = parseError;\nclass JSONRPCError extends Error {\n    constructor(message, error) {\n        super(message);\n        this.response = error;\n    }\n}\nexports.JSONRPCError = JSONRPCError;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}