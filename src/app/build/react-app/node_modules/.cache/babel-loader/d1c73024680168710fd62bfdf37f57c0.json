{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBlockProcessingEnv = void 0;\n\nvar lisk_bft_1 = require(\"@liskhq/lisk-bft\");\n\nvar lisk_chain_1 = require(\"@liskhq/lisk-chain\");\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nvar modules_1 = require(\"../modules\");\n\nvar processor_1 = require(\"../node/processor\");\n\nvar mocks_1 = require(\"./mocks\");\n\nvar create_block_1 = require(\"./create_block\");\n\nvar fixtures_1 = require(\"./fixtures\");\n\nvar utils_1 = require(\"./utils\");\n\nvar create_genesis_block_1 = require(\"./create_genesis_block\");\n\nvar defaultModules = [modules_1.TokenModule, modules_1.SequenceModule, modules_1.KeysModule, modules_1.DPoSModule];\n\nvar getAppConfig = function getAppConfig(genesisConfig) {\n  var mergedConfig = lisk_utils_1.objects.mergeDeep({}, _objectSpread(_objectSpread({}, fixtures_1.defaultConfig), {}, {\n    genesisConfig: _objectSpread(_objectSpread({}, fixtures_1.defaultConfig.genesisConfig), genesisConfig !== null && genesisConfig !== void 0 ? genesisConfig : {})\n  }));\n  return mergedConfig;\n};\n\nvar getProcessor = function getProcessor(db, appConfig, genesisBlock, networkIdentifier, params) {\n  var _a;\n\n  var channel = mocks_1.channelMock;\n  var modules = (_a = params.modules) !== null && _a !== void 0 ? _a : defaultModules;\n  var chainModule = new lisk_chain_1.Chain({\n    db: db,\n    genesisBlock: genesisBlock,\n    networkIdentifier: networkIdentifier,\n    maxPayloadLength: appConfig.genesisConfig.maxPayloadLength,\n    rewardDistance: appConfig.genesisConfig.rewards.distance,\n    rewardOffset: appConfig.genesisConfig.rewards.offset,\n    rewardMilestones: appConfig.genesisConfig.rewards.milestones.map(function (s) {\n      return BigInt(s);\n    }),\n    blockTime: appConfig.genesisConfig.blockTime,\n    minFeePerByte: appConfig.genesisConfig.minFeePerByte,\n    baseFees: appConfig.genesisConfig.baseFees,\n    accountSchemas: utils_1.getAccountSchemaFromModules(modules)\n  });\n  var bftModule = new lisk_bft_1.BFT({\n    chain: chainModule,\n    threshold: appConfig.genesisConfig.bftThreshold,\n    genesisHeight: genesisBlock.header.height\n  });\n  var processor = new processor_1.Processor({\n    channel: channel,\n    logger: mocks_1.loggerMock,\n    chainModule: chainModule,\n    bftModule: bftModule\n  });\n\n  var _iterator = _createForOfIteratorHelper(modules),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var InstantiableModule = _step.value;\n      var module = utils_1.getModuleInstance(InstantiableModule, {\n        genesisConfig: appConfig.genesisConfig\n      });\n      processor.register(module);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return processor;\n};\n\nvar getNextTimestamp = function getNextTimestamp(processor, previousBlock) {\n  var previousSlotNumber = processor['_chain'].slots.getSlotNumber(previousBlock.timestamp);\n  return processor['_chain'].slots.getSlotTime(previousSlotNumber + 1);\n};\n\nvar getMaxHeightPreviouslyForged = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(processor, previousBlock, passphrase) {\n    var _a, _b, NUM_OF_ROUNDS, NUM_OF_DELEGATES, toHeight, fromHeight, _lisk_cryptography_1$, publicKey, lastBlockHeaders, maxHeightPreviouslyForged;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            NUM_OF_ROUNDS = 3;\n            NUM_OF_DELEGATES = fixtures_1.defaultConfig.genesisConfig.activeDelegates + fixtures_1.defaultConfig.genesisConfig.standbyDelegates;\n            toHeight = previousBlock.height;\n            fromHeight = Math.max(0, toHeight - NUM_OF_DELEGATES * NUM_OF_ROUNDS);\n            _lisk_cryptography_1$ = lisk_cryptography_1.getPrivateAndPublicKeyFromPassphrase(passphrase), publicKey = _lisk_cryptography_1$.publicKey;\n            _context.next = 7;\n            return processor['_chain'].dataAccess.getBlockHeadersByHeightBetween(fromHeight, toHeight);\n\n          case 7:\n            lastBlockHeaders = _context.sent;\n            maxHeightPreviouslyForged = (_b = (_a = lastBlockHeaders.find(function (h) {\n              return h.generatorPublicKey.equals(publicKey);\n            })) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0;\n            return _context.abrupt(\"return\", maxHeightPreviouslyForged);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getMaxHeightPreviouslyForged(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar getHashOnion = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(processor, previousBlock, passphrase) {\n    var fromHeight, toHeight, _lisk_cryptography_1$2, publicKey, address, lastBlockHeaders, hashCount;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            fromHeight = 0;\n            toHeight = previousBlock.height;\n            _lisk_cryptography_1$2 = lisk_cryptography_1.getAddressAndPublicKeyFromPassphrase(passphrase), publicKey = _lisk_cryptography_1$2.publicKey, address = _lisk_cryptography_1$2.address;\n            _context2.next = 5;\n            return processor['_chain'].dataAccess.getBlockHeadersByHeightBetween(fromHeight, toHeight);\n\n          case 5:\n            lastBlockHeaders = _context2.sent;\n            hashCount = lastBlockHeaders.filter(function (h) {\n              return h.generatorPublicKey.equals(publicKey);\n            }).length;\n            return _context2.abrupt(\"return\", fixtures_1.getHashOnionFromDefaultConfig(address, hashCount));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getHashOnion(_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar createProcessableBlock = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(processor, networkIdentifier, payload, timestamp) {\n    var previousBlockHeader, nextTimestamp, validator, passphrase, seedReveal, maxHeightPrevoted, reward, maxHeightPreviouslyForged;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            previousBlockHeader = processor['_chain'].lastBlock.header;\n            nextTimestamp = timestamp !== null && timestamp !== void 0 ? timestamp : getNextTimestamp(processor, previousBlockHeader);\n            _context3.next = 4;\n            return processor['_chain'].getValidator(nextTimestamp);\n\n          case 4:\n            validator = _context3.sent;\n            passphrase = fixtures_1.getPassphraseFromDefaultConfig(validator.address);\n            _context3.next = 8;\n            return getHashOnion(processor, previousBlockHeader, passphrase);\n\n          case 8:\n            seedReveal = _context3.sent;\n            _context3.next = 11;\n            return processor['_bft'].getMaxHeightPrevoted(previousBlockHeader.asset.maxHeightPrevoted);\n\n          case 11:\n            maxHeightPrevoted = _context3.sent;\n            reward = processor['_chain'].calculateDefaultReward(previousBlockHeader.height + 1);\n            _context3.next = 15;\n            return getMaxHeightPreviouslyForged(processor, previousBlockHeader, passphrase);\n\n          case 15:\n            maxHeightPreviouslyForged = _context3.sent;\n            return _context3.abrupt(\"return\", create_block_1.createBlock({\n              passphrase: passphrase,\n              networkIdentifier: networkIdentifier,\n              timestamp: nextTimestamp,\n              previousBlockID: previousBlockHeader.id,\n              header: {\n                height: previousBlockHeader.height + 1,\n                reward: reward,\n                asset: {\n                  maxHeightPreviouslyForged: maxHeightPreviouslyForged,\n                  maxHeightPrevoted: maxHeightPrevoted,\n                  seedReveal: seedReveal\n                }\n              },\n              payload: payload\n            }));\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function createProcessableBlock(_x7, _x8, _x9, _x10) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar getDefaultAccountsWithModules = function getDefaultAccountsWithModules() {\n  var faucetAccount = {\n    address: fixtures_1.defaultFaucetAccount.address,\n    token: {\n      balance: BigInt(fixtures_1.defaultFaucetAccount.balance)\n    },\n    sequence: {\n      nonce: BigInt('0')\n    }\n  };\n  var accounts = fixtures_1.defaultAccounts().map(function (a, i) {\n    return fixtures_1.createDefaultAccount(defaultModules, {\n      address: a.address,\n      dpos: {\n        delegate: {\n          username: \"delegate_\".concat(i)\n        }\n      }\n    });\n  });\n  return [].concat(_toConsumableArray(accounts), [faucetAccount]);\n};\n\nvar getBlockProcessingEnv = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(params) {\n    var _a, _b, _c, _d, _e, appConfig, modules, accounts, _create_genesis_block, genesisBlock, networkIdentifier, db, processor;\n\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            appConfig = getAppConfig((_a = params.options) === null || _a === void 0 ? void 0 : _a.genesisConfig);\n            modules = (_b = params.modules) !== null && _b !== void 0 ? _b : defaultModules;\n            accounts = (_c = params.accounts) !== null && _c !== void 0 ? _c : getDefaultAccountsWithModules();\n            _create_genesis_block = create_genesis_block_1.createGenesisBlock({\n              modules: modules,\n              accounts: accounts\n            }), genesisBlock = _create_genesis_block.genesisBlock;\n            networkIdentifier = lisk_cryptography_1.getNetworkIdentifier(genesisBlock.header.id, appConfig.genesisConfig.communityIdentifier);\n            utils_1.removeDB((_d = params.options) === null || _d === void 0 ? void 0 : _d.databasePath);\n            db = utils_1.createDB('blockchain', (_e = params.options) === null || _e === void 0 ? void 0 : _e.databasePath);\n            processor = getProcessor(db, appConfig, genesisBlock, networkIdentifier, params);\n            _context10.next = 10;\n            return processor.init(genesisBlock);\n\n          case 10:\n            return _context10.abrupt(\"return\", {\n              createBlock: function () {\n                var _createBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                  var payload,\n                      timestamp,\n                      _args4 = arguments;\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          payload = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : [];\n                          timestamp = _args4.length > 1 ? _args4[1] : undefined;\n                          return _context4.abrupt(\"return\", createProcessableBlock(processor, networkIdentifier, payload, timestamp));\n\n                        case 3:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }));\n\n                function createBlock() {\n                  return _createBlock.apply(this, arguments);\n                }\n\n                return createBlock;\n              }(),\n              getChain: function getChain() {\n                return processor['_chain'];\n              },\n              getProcessor: function getProcessor() {\n                return processor;\n              },\n              getBlockchainDB: function getBlockchainDB() {\n                return db;\n              },\n              process: function () {\n                var _process = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(block) {\n                  return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          return _context5.abrupt(\"return\", processor.process(block));\n\n                        case 1:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _callee5);\n                }));\n\n                function process(_x12) {\n                  return _process.apply(this, arguments);\n                }\n\n                return process;\n              }(),\n              processUntilHeight: function () {\n                var _processUntilHeight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(height) {\n                  var index, nextBlock;\n                  return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          index = 0;\n\n                        case 1:\n                          if (!(index < height)) {\n                            _context6.next = 10;\n                            break;\n                          }\n\n                          _context6.next = 4;\n                          return createProcessableBlock(processor, networkIdentifier, []);\n\n                        case 4:\n                          nextBlock = _context6.sent;\n                          _context6.next = 7;\n                          return processor.process(nextBlock);\n\n                        case 7:\n                          index += 1;\n                          _context6.next = 1;\n                          break;\n\n                        case 10:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6);\n                }));\n\n                function processUntilHeight(_x13) {\n                  return _processUntilHeight.apply(this, arguments);\n                }\n\n                return processUntilHeight;\n              }(),\n              getLastBlock: function getLastBlock() {\n                return processor['_chain'].lastBlock;\n              },\n              getValidators: function () {\n                var _getValidators = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                    while (1) {\n                      switch (_context7.prev = _context7.next) {\n                        case 0:\n                          return _context7.abrupt(\"return\", processor['_chain'].getValidators());\n\n                        case 1:\n                        case \"end\":\n                          return _context7.stop();\n                      }\n                    }\n                  }, _callee7);\n                }));\n\n                function getValidators() {\n                  return _getValidators.apply(this, arguments);\n                }\n\n                return getValidators;\n              }(),\n              getNextValidatorPassphrase: function () {\n                var _getNextValidatorPassphrase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(previousBlockHeader) {\n                  var nextTimestamp, validator, passphrase;\n                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                    while (1) {\n                      switch (_context8.prev = _context8.next) {\n                        case 0:\n                          nextTimestamp = getNextTimestamp(processor, previousBlockHeader);\n                          _context8.next = 3;\n                          return processor['_chain'].getValidator(nextTimestamp);\n\n                        case 3:\n                          validator = _context8.sent;\n                          passphrase = fixtures_1.getPassphraseFromDefaultConfig(validator.address);\n                          return _context8.abrupt(\"return\", passphrase);\n\n                        case 6:\n                        case \"end\":\n                          return _context8.stop();\n                      }\n                    }\n                  }, _callee8);\n                }));\n\n                function getNextValidatorPassphrase(_x14) {\n                  return _getNextValidatorPassphrase.apply(this, arguments);\n                }\n\n                return getNextValidatorPassphrase;\n              }(),\n              getNetworkId: function getNetworkId() {\n                return networkIdentifier;\n              },\n              getDataAccess: function getDataAccess() {\n                return processor['_chain'].dataAccess;\n              },\n              cleanup: function () {\n                var _cleanup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref5) {\n                  var databasePath;\n                  return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          databasePath = _ref5.databasePath;\n                          _context9.next = 3;\n                          return processor.stop();\n\n                        case 3:\n                          _context9.next = 5;\n                          return db.close();\n\n                        case 5:\n                          utils_1.removeDB(databasePath);\n\n                        case 6:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _callee9);\n                }));\n\n                function cleanup(_x15) {\n                  return _cleanup.apply(this, arguments);\n                }\n\n                return cleanup;\n              }()\n            });\n\n          case 11:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n\n  return function getBlockProcessingEnv(_x11) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nexports.getBlockProcessingEnv = getBlockProcessingEnv;","map":{"version":3,"sources":["../../src/testing/block_processing_env.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBlockProcessingEnv = void 0;\nconst lisk_bft_1 = require(\"@liskhq/lisk-bft\");\nconst lisk_chain_1 = require(\"@liskhq/lisk-chain\");\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nconst modules_1 = require(\"../modules\");\nconst processor_1 = require(\"../node/processor\");\nconst mocks_1 = require(\"./mocks\");\nconst create_block_1 = require(\"./create_block\");\nconst fixtures_1 = require(\"./fixtures\");\nconst utils_1 = require(\"./utils\");\nconst create_genesis_block_1 = require(\"./create_genesis_block\");\nconst defaultModules = [modules_1.TokenModule, modules_1.SequenceModule, modules_1.KeysModule, modules_1.DPoSModule];\nconst getAppConfig = (genesisConfig) => {\n    const mergedConfig = lisk_utils_1.objects.mergeDeep({}, {\n        ...fixtures_1.defaultConfig,\n        genesisConfig: {\n            ...fixtures_1.defaultConfig.genesisConfig,\n            ...(genesisConfig !== null && genesisConfig !== void 0 ? genesisConfig : {}),\n        },\n    });\n    return mergedConfig;\n};\nconst getProcessor = (db, appConfig, genesisBlock, networkIdentifier, params) => {\n    var _a;\n    const channel = mocks_1.channelMock;\n    const modules = (_a = params.modules) !== null && _a !== void 0 ? _a : defaultModules;\n    const chainModule = new lisk_chain_1.Chain({\n        db,\n        genesisBlock,\n        networkIdentifier,\n        maxPayloadLength: appConfig.genesisConfig.maxPayloadLength,\n        rewardDistance: appConfig.genesisConfig.rewards.distance,\n        rewardOffset: appConfig.genesisConfig.rewards.offset,\n        rewardMilestones: appConfig.genesisConfig.rewards.milestones.map(s => BigInt(s)),\n        blockTime: appConfig.genesisConfig.blockTime,\n        minFeePerByte: appConfig.genesisConfig.minFeePerByte,\n        baseFees: appConfig.genesisConfig.baseFees,\n        accountSchemas: utils_1.getAccountSchemaFromModules(modules),\n    });\n    const bftModule = new lisk_bft_1.BFT({\n        chain: chainModule,\n        threshold: appConfig.genesisConfig.bftThreshold,\n        genesisHeight: genesisBlock.header.height,\n    });\n    const processor = new processor_1.Processor({\n        channel,\n        logger: mocks_1.loggerMock,\n        chainModule,\n        bftModule,\n    });\n    for (const InstantiableModule of modules) {\n        const module = utils_1.getModuleInstance(InstantiableModule, {\n            genesisConfig: appConfig.genesisConfig,\n        });\n        processor.register(module);\n    }\n    return processor;\n};\nconst getNextTimestamp = (processor, previousBlock) => {\n    const previousSlotNumber = processor['_chain'].slots.getSlotNumber(previousBlock.timestamp);\n    return processor['_chain'].slots.getSlotTime(previousSlotNumber + 1);\n};\nconst getMaxHeightPreviouslyForged = async (processor, previousBlock, passphrase) => {\n    var _a, _b;\n    const NUM_OF_ROUNDS = 3;\n    const NUM_OF_DELEGATES = fixtures_1.defaultConfig.genesisConfig.activeDelegates + fixtures_1.defaultConfig.genesisConfig.standbyDelegates;\n    const toHeight = previousBlock.height;\n    const fromHeight = Math.max(0, toHeight - NUM_OF_DELEGATES * NUM_OF_ROUNDS);\n    const { publicKey } = lisk_cryptography_1.getPrivateAndPublicKeyFromPassphrase(passphrase);\n    const lastBlockHeaders = await processor['_chain'].dataAccess.getBlockHeadersByHeightBetween(fromHeight, toHeight);\n    const maxHeightPreviouslyForged = (_b = (_a = lastBlockHeaders.find(h => h.generatorPublicKey.equals(publicKey))) === null || _a === void 0 ? void 0 : _a.height) !== null && _b !== void 0 ? _b : 0;\n    return maxHeightPreviouslyForged;\n};\nconst getHashOnion = async (processor, previousBlock, passphrase) => {\n    const fromHeight = 0;\n    const toHeight = previousBlock.height;\n    const { publicKey, address } = lisk_cryptography_1.getAddressAndPublicKeyFromPassphrase(passphrase);\n    const lastBlockHeaders = await processor['_chain'].dataAccess.getBlockHeadersByHeightBetween(fromHeight, toHeight);\n    const hashCount = lastBlockHeaders.filter(h => h.generatorPublicKey.equals(publicKey)).length;\n    return fixtures_1.getHashOnionFromDefaultConfig(address, hashCount);\n};\nconst createProcessableBlock = async (processor, networkIdentifier, payload, timestamp) => {\n    const previousBlockHeader = processor['_chain'].lastBlock.header;\n    const nextTimestamp = timestamp !== null && timestamp !== void 0 ? timestamp : getNextTimestamp(processor, previousBlockHeader);\n    const validator = await processor['_chain'].getValidator(nextTimestamp);\n    const passphrase = fixtures_1.getPassphraseFromDefaultConfig(validator.address);\n    const seedReveal = await getHashOnion(processor, previousBlockHeader, passphrase);\n    const maxHeightPrevoted = await processor['_bft'].getMaxHeightPrevoted(previousBlockHeader.asset.maxHeightPrevoted);\n    const reward = processor['_chain'].calculateDefaultReward(previousBlockHeader.height + 1);\n    const maxHeightPreviouslyForged = await getMaxHeightPreviouslyForged(processor, previousBlockHeader, passphrase);\n    return create_block_1.createBlock({\n        passphrase,\n        networkIdentifier,\n        timestamp: nextTimestamp,\n        previousBlockID: previousBlockHeader.id,\n        header: {\n            height: previousBlockHeader.height + 1,\n            reward,\n            asset: {\n                maxHeightPreviouslyForged,\n                maxHeightPrevoted,\n                seedReveal,\n            },\n        },\n        payload,\n    });\n};\nconst getDefaultAccountsWithModules = () => {\n    const faucetAccount = {\n        address: fixtures_1.defaultFaucetAccount.address,\n        token: { balance: BigInt(fixtures_1.defaultFaucetAccount.balance) },\n        sequence: { nonce: BigInt('0') },\n    };\n    const accounts = fixtures_1.defaultAccounts().map((a, i) => fixtures_1.createDefaultAccount(defaultModules, {\n        address: a.address,\n        dpos: {\n            delegate: {\n                username: `delegate_${i}`,\n            },\n        },\n    }));\n    return [...accounts, faucetAccount];\n};\nconst getBlockProcessingEnv = async (params) => {\n    var _a, _b, _c, _d, _e;\n    const appConfig = getAppConfig((_a = params.options) === null || _a === void 0 ? void 0 : _a.genesisConfig);\n    const modules = (_b = params.modules) !== null && _b !== void 0 ? _b : defaultModules;\n    const accounts = (_c = params.accounts) !== null && _c !== void 0 ? _c : getDefaultAccountsWithModules();\n    const { genesisBlock } = create_genesis_block_1.createGenesisBlock({ modules, accounts });\n    const networkIdentifier = lisk_cryptography_1.getNetworkIdentifier(genesisBlock.header.id, appConfig.genesisConfig.communityIdentifier);\n    utils_1.removeDB((_d = params.options) === null || _d === void 0 ? void 0 : _d.databasePath);\n    const db = utils_1.createDB('blockchain', (_e = params.options) === null || _e === void 0 ? void 0 : _e.databasePath);\n    const processor = getProcessor(db, appConfig, genesisBlock, networkIdentifier, params);\n    await processor.init(genesisBlock);\n    return {\n        createBlock: async (payload = [], timestamp) => createProcessableBlock(processor, networkIdentifier, payload, timestamp),\n        getChain: () => processor['_chain'],\n        getProcessor: () => processor,\n        getBlockchainDB: () => db,\n        process: async (block) => processor.process(block),\n        processUntilHeight: async (height) => {\n            for (let index = 0; index < height; index += 1) {\n                const nextBlock = await createProcessableBlock(processor, networkIdentifier, []);\n                await processor.process(nextBlock);\n            }\n        },\n        getLastBlock: () => processor['_chain'].lastBlock,\n        getValidators: async () => processor['_chain'].getValidators(),\n        getNextValidatorPassphrase: async (previousBlockHeader) => {\n            const nextTimestamp = getNextTimestamp(processor, previousBlockHeader);\n            const validator = await processor['_chain'].getValidator(nextTimestamp);\n            const passphrase = fixtures_1.getPassphraseFromDefaultConfig(validator.address);\n            return passphrase;\n        },\n        getNetworkId: () => networkIdentifier,\n        getDataAccess: () => processor['_chain'].dataAccess,\n        cleanup: async ({ databasePath }) => {\n            await processor.stop();\n            await db.close();\n            utils_1.removeDB(databasePath);\n        },\n    };\n};\nexports.getBlockProcessingEnv = getBlockProcessingEnv;\n//# sourceMappingURL=block_processing_env.js.map"]},"metadata":{},"sourceType":"script"}