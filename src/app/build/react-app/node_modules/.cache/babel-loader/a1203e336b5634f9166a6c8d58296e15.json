{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BlockCache = void 0;\n\nvar assert = require(\"assert\");\n\nvar base_1 = require(\"./base\");\n\nvar BlockCache = /*#__PURE__*/function (_base_1$Base) {\n  _inherits(BlockCache, _base_1$Base);\n\n  var _super = _createSuper(BlockCache);\n\n  function BlockCache() {\n    _classCallCheck(this, BlockCache);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BlockCache, [{\n    key: \"add\",\n    value: function add(blockHeader) {\n      if (this.items.length) {\n        assert(blockHeader.height === this.last.height + 1, \"Block header with height \".concat((this.last.height + 1).toString(), \" can only be added, instead received height \").concat(blockHeader.height.toString()));\n      }\n\n      if (this.first && blockHeader.height === this.last.height + 1) {\n        this.items.push(blockHeader);\n      } else {\n        this.items.unshift(blockHeader);\n      }\n\n      if (this.items.length > this.maxCachedItems) {\n        this.items.shift();\n      }\n\n      return this.items;\n    }\n  }, {\n    key: \"refill\",\n    value: function refill(blockHeaders) {\n      var _this$items;\n\n      (_this$items = this.items).unshift.apply(_this$items, _toConsumableArray(blockHeaders));\n\n      this.needsRefill = false;\n      return this.items;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      if (this.items.length && !this.last.id.equals(id)) {\n        throw new Error(\"Failed to remove the block id: \".concat(id.toString('hex'), \" which is not the last block header cached\"));\n      }\n\n      this.items.pop();\n\n      if (this.items.length < this.minCachedItems) {\n        this.needsRefill = true;\n      }\n\n      return this.items;\n    }\n  }, {\n    key: \"getByID\",\n    value: function getByID(id) {\n      return this.items.find(function (block) {\n        return block.id.equals(id);\n      });\n    }\n  }, {\n    key: \"getByIDs\",\n    value: function getByIDs(ids) {\n      var blocks = this.items.filter(function (block) {\n        return ids.find(function (id) {\n          return id.equals(block.id);\n        }) !== undefined;\n      });\n\n      if (blocks.length === ids.length) {\n        return blocks.reverse();\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getByHeight\",\n    value: function getByHeight(height) {\n      return this.items.find(function (block) {\n        return block.height === height;\n      });\n    }\n  }, {\n    key: \"getByHeights\",\n    value: function getByHeights(heightList) {\n      var blocks = this.items.filter(function (block) {\n        return heightList.includes(block.height);\n      });\n\n      if (blocks.length === heightList.length) {\n        return blocks.reverse();\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getByHeightBetween\",\n    value: function getByHeightBetween(fromHeight, toHeight) {\n      if (toHeight >= fromHeight && this.items.length && fromHeight >= this.first.height && toHeight <= this.last.height) {\n        return this.items.filter(function (block) {\n          return block.height >= fromHeight && block.height <= toHeight;\n        }).reverse();\n      }\n\n      return [];\n    }\n  }]);\n\n  return BlockCache;\n}(base_1.Base);\n\nexports.BlockCache = BlockCache;","map":{"version":3,"sources":["../../../src/data_access/cache/block.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlockCache = void 0;\nconst assert = require(\"assert\");\nconst base_1 = require(\"./base\");\nclass BlockCache extends base_1.Base {\n    add(blockHeader) {\n        if (this.items.length) {\n            assert(blockHeader.height === this.last.height + 1, `Block header with height ${(this.last.height + 1).toString()} can only be added, instead received height ${blockHeader.height.toString()}`);\n        }\n        if (this.first && blockHeader.height === this.last.height + 1) {\n            this.items.push(blockHeader);\n        }\n        else {\n            this.items.unshift(blockHeader);\n        }\n        if (this.items.length > this.maxCachedItems) {\n            this.items.shift();\n        }\n        return this.items;\n    }\n    refill(blockHeaders) {\n        this.items.unshift(...blockHeaders);\n        this.needsRefill = false;\n        return this.items;\n    }\n    remove(id) {\n        if (this.items.length && !this.last.id.equals(id)) {\n            throw new Error(`Failed to remove the block id: ${id.toString('hex')} which is not the last block header cached`);\n        }\n        this.items.pop();\n        if (this.items.length < this.minCachedItems) {\n            this.needsRefill = true;\n        }\n        return this.items;\n    }\n    getByID(id) {\n        return this.items.find(block => block.id.equals(id));\n    }\n    getByIDs(ids) {\n        const blocks = this.items.filter(block => ids.find(id => id.equals(block.id)) !== undefined);\n        if (blocks.length === ids.length) {\n            return blocks.reverse();\n        }\n        return [];\n    }\n    getByHeight(height) {\n        return this.items.find(block => block.height === height);\n    }\n    getByHeights(heightList) {\n        const blocks = this.items.filter(block => heightList.includes(block.height));\n        if (blocks.length === heightList.length) {\n            return blocks.reverse();\n        }\n        return [];\n    }\n    getByHeightBetween(fromHeight, toHeight) {\n        if (toHeight >= fromHeight &&\n            this.items.length &&\n            fromHeight >= this.first.height &&\n            toHeight <= this.last.height) {\n            return this.items\n                .filter(block => block.height >= fromHeight && block.height <= toHeight)\n                .reverse();\n        }\n        return [];\n    }\n}\nexports.BlockCache = BlockCache;\n//# sourceMappingURL=block.js.map"]},"metadata":{},"sourceType":"script"}