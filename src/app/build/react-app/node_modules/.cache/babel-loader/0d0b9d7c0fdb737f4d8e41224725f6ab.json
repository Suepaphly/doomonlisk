{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar ucs2length_1 = require(\"../../runtime/ucs2length\");\n\nvar error = {\n  message: function message(_ref) {\n    var keyword = _ref.keyword,\n        schemaCode = _ref.schemaCode;\n    var comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n    return codegen_1.str(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must NOT have \", \" than \", \" characters\"])), comp, schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{limit: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: [\"maxLength\", \"minLength\"],\n  type: \"string\",\n  schemaType: \"number\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var keyword = cxt.keyword,\n        data = cxt.data,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it;\n    var op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n    var len = it.opts.unicode === false ? codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \".length\"])), data) : codegen_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \"(\", \")\"])), util_1.useFunc(cxt.gen, ucs2length_1.default), data);\n    cxt.fail$data(codegen_1._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\", \" \", \" \", \"\"])), len, op, schemaCode));\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/limitLength.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAEA,IAAM,KAAK,GAA2B;AACpC,EAAA,OADoC,yBACP;AAAA,QAApB,OAAoB,QAApB,OAAoB;AAAA,QAAX,UAAW,QAAX,UAAW;AAC3B,QAAM,IAAI,GAAG,OAAO,KAAK,WAAZ,GAA0B,MAA1B,GAAmC,OAAhD;AACA,WAAO,SAAA,CAAA,GAAP,6GAA2B,IAA3B,EAAwC,UAAxC;AACD,GAJmC;AAKpC,EAAA,MAAM,EAAE;AAAA,QAAE,UAAF,SAAE,UAAF;AAAA,WAAkB,SAAA,CAAA,CAAlB,qFAA8B,UAA9B;AAAA;AAL4B,CAAtC;AAQA,IAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,CAAC,WAAD,EAAc,WAAd,CADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAE,IAJ0B;AAKjC,EAAA,KAAK,EAAL,KALiC;AAMjC,EAAA,IANiC,gBAM5B,GAN4B,EAMb;AAClB,QAAO,OAAP,GAAwC,GAAxC,CAAO,OAAP;AAAA,QAAgB,IAAhB,GAAwC,GAAxC,CAAgB,IAAhB;AAAA,QAAsB,UAAtB,GAAwC,GAAxC,CAAsB,UAAtB;AAAA,QAAkC,EAAlC,GAAwC,GAAxC,CAAkC,EAAlC;AACA,QAAM,EAAE,GAAG,OAAO,KAAK,WAAZ,GAA0B,SAAA,CAAA,SAAA,CAAU,EAApC,GAAyC,SAAA,CAAA,SAAA,CAAU,EAA9D;AACA,QAAM,GAAG,GACP,EAAE,CAAC,IAAH,CAAQ,OAAR,KAAoB,KAApB,GAA4B,SAAA,CAAA,CAA5B,mFAAgC,IAAhC,IAAgD,SAAA,CAAA,CAAhD,kFAAoD,MAAA,CAAA,OAAA,CAAQ,GAAG,CAAC,GAAZ,EAAiB,YAAA,CAAA,OAAjB,CAApD,EAAoF,IAApF,CADF;AAEA,IAAA,GAAG,CAAC,SAAJ,CAAc,SAAA,CAAA,CAAd,sFAAkB,GAAlB,EAAyB,EAAzB,EAA+B,UAA/B;AACD;AAZgC,CAAnC;AAeA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst ucs2length_1 = require(\"../../runtime/ucs2length\");\nconst error = {\n    message({ keyword, schemaCode }) {\n        const comp = keyword === \"maxLength\" ? \"more\" : \"fewer\";\n        return codegen_1.str `must NOT have ${comp} than ${schemaCode} characters`;\n    },\n    params: ({ schemaCode }) => codegen_1._ `{limit: ${schemaCode}}`,\n};\nconst def = {\n    keyword: [\"maxLength\", \"minLength\"],\n    type: \"string\",\n    schemaType: \"number\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { keyword, data, schemaCode, it } = cxt;\n        const op = keyword === \"maxLength\" ? codegen_1.operators.GT : codegen_1.operators.LT;\n        const len = it.opts.unicode === false ? codegen_1._ `${data}.length` : codegen_1._ `${util_1.useFunc(cxt.gen, ucs2length_1.default)}(${data})`;\n        cxt.fail$data(codegen_1._ `${len} ${op} ${schemaCode}`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=limitLength.js.map"]},"metadata":{},"sourceType":"script"}