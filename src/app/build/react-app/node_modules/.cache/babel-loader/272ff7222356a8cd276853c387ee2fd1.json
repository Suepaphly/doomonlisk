{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _objectWithoutProperties = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _slicedToArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _excluded = [\"default\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.readGenesisBlockJSON = void 0;\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar schema_1 = require(\"../schema\");\n\nvar readGenesisBlockJSON = function readGenesisBlockJSON(genesisBlockJSON, accountSchemas) {\n  var accountSchema = lisk_utils_1.objects.cloneDeep(schema_1.baseAccountSchema);\n\n  for (var _i = 0, _Object$entries = Object.entries(accountSchemas); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n        name = _Object$entries$_i[0],\n        schema = _Object$entries$_i[1];\n\n    var defaultProps = schema.default,\n        others = _objectWithoutProperties(schema, _excluded);\n\n    accountSchema.properties[name] = others;\n  }\n\n  var assetSchema = _objectSpread(_objectSpread(_objectSpread({}, schema_1.blockHeaderSchema.properties.asset), schema_1.getGenesisBlockHeaderAssetSchema(accountSchema)), {}, {\n    dataType: undefined\n  });\n\n  delete assetSchema.dataType;\n  delete assetSchema.fieldNumber;\n\n  var genesisBlockSchema = _objectSpread(_objectSpread({}, schema_1.blockSchema), {}, {\n    properties: _objectSpread(_objectSpread({}, schema_1.blockSchema.properties), {}, {\n      header: _objectSpread(_objectSpread({}, schema_1.blockHeaderSchema), {}, {\n        properties: _objectSpread(_objectSpread({}, schema_1.blockHeaderSchema.properties), {}, {\n          asset: assetSchema\n        })\n      })\n    })\n  });\n\n  var cloned = lisk_utils_1.objects.cloneDeep(genesisBlockJSON);\n\n  if (typeof cloned.header === 'object' && cloned.header !== null) {\n    delete cloned.header.id;\n  }\n\n  var genesisBlock = lisk_codec_1.codec.fromJSON(genesisBlockSchema, cloned);\n  var genesisAssetBuffer = lisk_codec_1.codec.encode(assetSchema, genesisBlock.header.asset);\n  var id = lisk_cryptography_1.hash(lisk_codec_1.codec.encode(schema_1.blockHeaderSchema, _objectSpread(_objectSpread({}, genesisBlock.header), {}, {\n    asset: genesisAssetBuffer\n  })));\n  return _objectSpread(_objectSpread({}, genesisBlock), {}, {\n    header: _objectSpread(_objectSpread({}, genesisBlock.header), {}, {\n      id: id\n    })\n  });\n};\n\nexports.readGenesisBlockJSON = readGenesisBlockJSON;","map":{"version":3,"sources":["../../src/utils/genesis_block.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAgBO,IAAM,oBAAoB,GAAG,SAAvB,oBAAuB,CACnC,gBADmC,EAEnC,cAFmC,EAGf;AACpB,MAAM,aAAa,GAAG,YAAA,CAAA,OAAA,CAAQ,SAAR,CAAkB,QAAA,CAAA,iBAAlB,CAAtB;;AACA,qCAA6B,MAAM,CAAC,OAAP,CAAe,cAAf,CAA7B,qCAA6D;AAAxD;AAAA,QAAO,IAAP;AAAA,QAAa,MAAb;;AACJ,QAAiB,YAAjB,GAA6C,MAA7C,CAAQ,OAAR;AAAA,QAAkC,MAAlC,4BAA6C,MAA7C;;AACA,IAAA,aAAa,CAAC,UAAd,CAAyB,IAAzB,IAAiC,MAAjC;AACA;;AACD,MAAM,WAAW,iDACb,QAAA,CAAA,iBAAA,CAAkB,UAAlB,CAA6B,KADhB,GAEb,QAAA,CAAA,gCAAA,CAAiC,aAAjC,CAFa;AAGhB,IAAA,QAAQ,EAAE;AAHM,IAAjB;;AAMA,SAAO,WAAW,CAAC,QAAnB;AACA,SAAO,WAAW,CAAC,WAAnB;;AAEA,MAAM,kBAAkB,mCACpB,QAAA,CAAA,WADoB;AAEvB,IAAA,UAAU,kCACN,QAAA,CAAA,WAAA,CAAY,UADN;AAET,MAAA,MAAM,kCACF,QAAA,CAAA,iBADE;AAEL,QAAA,UAAU,kCACN,QAAA,CAAA,iBAAA,CAAkB,UADZ;AAET,UAAA,KAAK,EAAE;AAFE;AAFL;AAFG;AAFa,IAAxB;;AAaA,MAAM,MAAM,GAAG,YAAA,CAAA,OAAA,CAAQ,SAAR,CAAkB,gBAAlB,CAAf;;AAEA,MAAI,OAAO,MAAM,CAAC,MAAd,KAAyB,QAAzB,IAAqC,MAAM,CAAC,MAAP,KAAkB,IAA3D,EAAiE;AAEhE,WAAQ,MAAsC,CAAC,MAAvC,CAA8C,EAAtD;AACA;;AACD,MAAM,YAAY,GAAG,YAAA,CAAA,KAAA,CAAM,QAAN,CAAgC,kBAAhC,EAAoD,MAApD,CAArB;AACA,MAAM,kBAAkB,GAAG,YAAA,CAAA,KAAA,CAAM,MAAN,CAAa,WAAb,EAA0B,YAAY,CAAC,MAAb,CAAoB,KAA9C,CAA3B;AACA,MAAM,EAAE,GAAG,mBAAA,CAAA,IAAA,CACV,YAAA,CAAA,KAAA,CAAM,MAAN,CAAa,QAAA,CAAA,iBAAb,kCACI,YAAY,CAAC,MADjB;AAEC,IAAA,KAAK,EAAE;AAFR,KADU,CAAX;AAOA,yCACI,YADJ;AAEC,IAAA,MAAM,kCACF,YAAY,CAAC,MADX;AAEL,MAAA,EAAE,EAAF;AAFK;AAFP;AAOA,CArDM;;AAAM,OAAA,CAAA,oBAAA,GAAoB,oBAApB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readGenesisBlockJSON = void 0;\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst schema_1 = require(\"../schema\");\nconst readGenesisBlockJSON = (genesisBlockJSON, accountSchemas) => {\n    const accountSchema = lisk_utils_1.objects.cloneDeep(schema_1.baseAccountSchema);\n    for (const [name, schema] of Object.entries(accountSchemas)) {\n        const { default: defaultProps, ...others } = schema;\n        accountSchema.properties[name] = others;\n    }\n    const assetSchema = {\n        ...schema_1.blockHeaderSchema.properties.asset,\n        ...schema_1.getGenesisBlockHeaderAssetSchema(accountSchema),\n        dataType: undefined,\n    };\n    delete assetSchema.dataType;\n    delete assetSchema.fieldNumber;\n    const genesisBlockSchema = {\n        ...schema_1.blockSchema,\n        properties: {\n            ...schema_1.blockSchema.properties,\n            header: {\n                ...schema_1.blockHeaderSchema,\n                properties: {\n                    ...schema_1.blockHeaderSchema.properties,\n                    asset: assetSchema,\n                },\n            },\n        },\n    };\n    const cloned = lisk_utils_1.objects.cloneDeep(genesisBlockJSON);\n    if (typeof cloned.header === 'object' && cloned.header !== null) {\n        delete cloned.header.id;\n    }\n    const genesisBlock = lisk_codec_1.codec.fromJSON(genesisBlockSchema, cloned);\n    const genesisAssetBuffer = lisk_codec_1.codec.encode(assetSchema, genesisBlock.header.asset);\n    const id = lisk_cryptography_1.hash(lisk_codec_1.codec.encode(schema_1.blockHeaderSchema, {\n        ...genesisBlock.header,\n        asset: genesisAssetBuffer,\n    }));\n    return {\n        ...genesisBlock,\n        header: {\n            ...genesisBlock.header,\n            id,\n        },\n    };\n};\nexports.readGenesisBlockJSON = readGenesisBlockJSON;\n//# sourceMappingURL=genesis_block.js.map"]},"metadata":{},"sourceType":"script"}