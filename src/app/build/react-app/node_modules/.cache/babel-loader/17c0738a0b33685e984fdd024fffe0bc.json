{"ast":null,"code":"var EventEmitter = require('events').EventEmitter;\n\nvar SCChannel = require('sc-channel').SCChannel;\n\nvar SimpleExchange = function SimpleExchange(broker) {\n  this._broker = broker;\n  this._channels = {};\n  this._channelEmitter = new EventEmitter();\n  this._messageHandler = this._handleChannelMessage.bind(this);\n\n  this._broker.on('message', this._messageHandler);\n};\n\nSimpleExchange.prototype = Object.create(EventEmitter.prototype);\n\nSimpleExchange.prototype.destroy = function () {\n  this._broker.removeListener('message', this._messageHandler);\n};\n\nSimpleExchange.prototype._handleChannelMessage = function (message) {\n  var channelName = message.channel;\n\n  if (this.isSubscribed(channelName)) {\n    this._channelEmitter.emit(channelName, message.data);\n  }\n};\n\nSimpleExchange.prototype._triggerChannelSubscribe = function (channel) {\n  var channelName = channel.name;\n  channel.state = channel.SUBSCRIBED;\n  channel.emit('subscribe', channelName);\n  EventEmitter.prototype.emit.call(this, 'subscribe', channelName);\n};\n\nSimpleExchange.prototype._triggerChannelUnsubscribe = function (channel, newState) {\n  var channelName = channel.name;\n  var oldState = channel.state;\n\n  if (newState) {\n    channel.state = newState;\n  } else {\n    channel.state = channel.UNSUBSCRIBED;\n  }\n\n  if (oldState === channel.SUBSCRIBED) {\n    channel.emit('unsubscribe', channelName);\n    EventEmitter.prototype.emit.call(this, 'unsubscribe', channelName);\n  }\n};\n\nSimpleExchange.prototype.publish = function (channelName, data, callback) {\n  this._broker.publish(channelName, data, callback);\n};\n\nSimpleExchange.prototype.subscribe = function (channelName) {\n  var channel = this._channels[channelName];\n\n  if (!channel) {\n    channel = new SCChannel(channelName, this);\n    this._channels[channelName] = channel;\n  }\n\n  if (channel.state === channel.UNSUBSCRIBED) {\n    channel.state = channel.PENDING;\n\n    this._triggerChannelSubscribe(channel);\n  }\n\n  return channel;\n};\n\nSimpleExchange.prototype.unsubscribe = function (channelName) {\n  var channel = this._channels[channelName];\n\n  if (channel) {\n    if (channel.state !== channel.UNSUBSCRIBED) {\n      this._triggerChannelUnsubscribe(channel);\n    }\n  }\n};\n\nSimpleExchange.prototype.channel = function (channelName) {\n  var currentChannel = this._channels[channelName];\n\n  if (!currentChannel) {\n    currentChannel = new SCChannel(channelName, this);\n    this._channels[channelName] = currentChannel;\n  }\n\n  return currentChannel;\n};\n\nSimpleExchange.prototype.destroyChannel = function (channelName) {\n  var channel = this._channels[channelName];\n  channel.unwatch();\n  channel.unsubscribe();\n  delete this._channels[channelName];\n};\n\nSimpleExchange.prototype.subscriptions = function (includePending) {\n  var subs = [];\n  var channel, includeChannel;\n\n  for (var channelName in this._channels) {\n    if (this._channels.hasOwnProperty(channelName)) {\n      channel = this._channels[channelName];\n\n      if (includePending) {\n        includeChannel = channel && (channel.state === channel.SUBSCRIBED || channel.state === channel.PENDING);\n      } else {\n        includeChannel = channel && channel.state === channel.SUBSCRIBED;\n      }\n\n      if (includeChannel) {\n        subs.push(channelName);\n      }\n    }\n  }\n\n  return subs;\n};\n\nSimpleExchange.prototype.isSubscribed = function (channelName, includePending) {\n  var channel = this._channels[channelName];\n\n  if (includePending) {\n    return !!channel && (channel.state === channel.SUBSCRIBED || channel.state === channel.PENDING);\n  }\n\n  return !!channel && channel.state === channel.SUBSCRIBED;\n};\n\nSimpleExchange.prototype.watch = function (channelName, handler) {\n  this._channelEmitter.on(channelName, handler);\n};\n\nSimpleExchange.prototype.unwatch = function (channelName, handler) {\n  if (handler) {\n    this._channelEmitter.removeListener(channelName, handler);\n  } else {\n    this._channelEmitter.removeAllListeners(channelName);\n  }\n};\n\nSimpleExchange.prototype.watchers = function (channelName) {\n  return this._channelEmitter.listeners(channelName);\n};\n\nvar SCSimpleBroker = function SCSimpleBroker() {\n  var self = this;\n  this._exchangeClient = new SimpleExchange(this);\n  this._clientSubscribers = {};\n  this._clientSubscribersCounter = {};\n  process.nextTick(function () {\n    self.emit('ready');\n  });\n};\n\nSCSimpleBroker.prototype = Object.create(EventEmitter.prototype);\n\nSCSimpleBroker.prototype.exchange = function () {\n  return this._exchangeClient;\n};\n\nSCSimpleBroker.prototype.subscribeSocket = function (socket, channel, callback) {\n  if (!this._clientSubscribers[channel]) {\n    this._clientSubscribers[channel] = {};\n    this._clientSubscribersCounter[channel] = 0;\n  }\n\n  if (!this._clientSubscribers[channel][socket.id]) {\n    this._clientSubscribersCounter[channel]++;\n  }\n\n  this._clientSubscribers[channel][socket.id] = socket;\n  callback && callback();\n};\n\nSCSimpleBroker.prototype.unsubscribeSocket = function (socket, channel, callback) {\n  if (this._clientSubscribers[channel]) {\n    if (this._clientSubscribers[channel][socket.id]) {\n      this._clientSubscribersCounter[channel]--;\n      delete this._clientSubscribers[channel][socket.id];\n\n      if (this._clientSubscribersCounter[channel] <= 0) {\n        delete this._clientSubscribers[channel];\n        delete this._clientSubscribersCounter[channel];\n      }\n    }\n  }\n\n  callback && callback();\n};\n\nSCSimpleBroker.prototype.publish = function (channelName, data, callback) {\n  this._handleExchangeMessage(channelName, data, callback);\n\n  callback && callback();\n};\n\nSCSimpleBroker.prototype._handleExchangeMessage = function (channel, message, options) {\n  var packet = {\n    channel: channel,\n    data: message\n  };\n  var subscriberSockets = this._clientSubscribers[channel];\n\n  for (var i in subscriberSockets) {\n    if (subscriberSockets.hasOwnProperty(i)) {\n      subscriberSockets[i].emit('#publish', packet);\n    }\n  }\n\n  this.emit('message', packet);\n};\n\nmodule.exports.SCSimpleBroker = SCSimpleBroker;","map":{"version":3,"sources":["/home/lisk/doomonlisk/node_modules/sc-simple-broker/index.js"],"names":["EventEmitter","require","SCChannel","SimpleExchange","broker","_broker","_channels","_channelEmitter","_messageHandler","_handleChannelMessage","bind","on","prototype","Object","create","destroy","removeListener","message","channelName","channel","isSubscribed","emit","data","_triggerChannelSubscribe","name","state","SUBSCRIBED","call","_triggerChannelUnsubscribe","newState","oldState","UNSUBSCRIBED","publish","callback","subscribe","PENDING","unsubscribe","currentChannel","destroyChannel","unwatch","subscriptions","includePending","subs","includeChannel","hasOwnProperty","push","watch","handler","removeAllListeners","watchers","listeners","SCSimpleBroker","self","_exchangeClient","_clientSubscribers","_clientSubscribersCounter","process","nextTick","exchange","subscribeSocket","socket","id","unsubscribeSocket","_handleExchangeMessage","options","packet","subscriberSockets","i","module","exports"],"mappings":"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","sourcesContent":["var EventEmitter = require('events').EventEmitter;\nvar SCChannel = require('sc-channel').SCChannel;\n\nvar SimpleExchange = function (broker) {\n  this._broker = broker;\n  this._channels = {};\n  this._channelEmitter = new EventEmitter();\n  this._messageHandler = this._handleChannelMessage.bind(this);\n\n  this._broker.on('message', this._messageHandler);\n};\n\nSimpleExchange.prototype = Object.create(EventEmitter.prototype);\n\nSimpleExchange.prototype.destroy = function () {\n  this._broker.removeListener('message', this._messageHandler);\n};\n\nSimpleExchange.prototype._handleChannelMessage = function (message) {\n  var channelName = message.channel;\n  if (this.isSubscribed(channelName)) {\n    this._channelEmitter.emit(channelName, message.data);\n  }\n};\n\nSimpleExchange.prototype._triggerChannelSubscribe = function (channel) {\n  var channelName = channel.name;\n\n  channel.state = channel.SUBSCRIBED;\n\n  channel.emit('subscribe', channelName);\n  EventEmitter.prototype.emit.call(this, 'subscribe', channelName);\n};\n\nSimpleExchange.prototype._triggerChannelUnsubscribe = function (channel, newState) {\n  var channelName = channel.name;\n  var oldState = channel.state;\n\n  if (newState) {\n    channel.state = newState;\n  } else {\n    channel.state = channel.UNSUBSCRIBED;\n  }\n  if (oldState === channel.SUBSCRIBED) {\n    channel.emit('unsubscribe', channelName);\n    EventEmitter.prototype.emit.call(this, 'unsubscribe', channelName);\n  }\n};\n\nSimpleExchange.prototype.publish = function (channelName, data, callback) {\n  this._broker.publish(channelName, data, callback);\n};\n\nSimpleExchange.prototype.subscribe = function (channelName) {\n  var channel = this._channels[channelName];\n\n  if (!channel) {\n    channel = new SCChannel(channelName, this);\n    this._channels[channelName] = channel;\n  }\n\n  if (channel.state === channel.UNSUBSCRIBED) {\n    channel.state = channel.PENDING;\n    this._triggerChannelSubscribe(channel);\n  }\n  return channel;\n};\n\nSimpleExchange.prototype.unsubscribe = function (channelName) {\n  var channel = this._channels[channelName];\n\n  if (channel) {\n    if (channel.state !== channel.UNSUBSCRIBED) {\n      this._triggerChannelUnsubscribe(channel);\n    }\n  }\n};\n\nSimpleExchange.prototype.channel = function (channelName) {\n  var currentChannel = this._channels[channelName];\n\n  if (!currentChannel) {\n    currentChannel = new SCChannel(channelName, this);\n    this._channels[channelName] = currentChannel;\n  }\n  return currentChannel;\n};\n\nSimpleExchange.prototype.destroyChannel = function (channelName) {\n  var channel = this._channels[channelName];\n  channel.unwatch();\n  channel.unsubscribe();\n  delete this._channels[channelName];\n};\n\nSimpleExchange.prototype.subscriptions = function (includePending) {\n  var subs = [];\n  var channel, includeChannel;\n  for (var channelName in this._channels) {\n    if (this._channels.hasOwnProperty(channelName)) {\n      channel = this._channels[channelName];\n\n      if (includePending) {\n        includeChannel = channel && (channel.state === channel.SUBSCRIBED ||\n          channel.state === channel.PENDING);\n      } else {\n        includeChannel = channel && channel.state === channel.SUBSCRIBED;\n      }\n\n      if (includeChannel) {\n        subs.push(channelName);\n      }\n    }\n  }\n  return subs;\n};\n\nSimpleExchange.prototype.isSubscribed = function (channelName, includePending) {\n  var channel = this._channels[channelName];\n  if (includePending) {\n    return !!channel && (channel.state === channel.SUBSCRIBED ||\n      channel.state === channel.PENDING);\n  }\n  return !!channel && channel.state === channel.SUBSCRIBED;\n};\n\nSimpleExchange.prototype.watch = function (channelName, handler) {\n  this._channelEmitter.on(channelName, handler);\n};\n\nSimpleExchange.prototype.unwatch = function (channelName, handler) {\n  if (handler) {\n    this._channelEmitter.removeListener(channelName, handler);\n  } else {\n    this._channelEmitter.removeAllListeners(channelName);\n  }\n};\n\nSimpleExchange.prototype.watchers = function (channelName) {\n  return this._channelEmitter.listeners(channelName);\n};\n\n\nvar SCSimpleBroker = function () {\n  var self = this;\n\n  this._exchangeClient = new SimpleExchange(this);\n  this._clientSubscribers = {};\n  this._clientSubscribersCounter = {};\n\n  process.nextTick(function () {\n    self.emit('ready');\n  });\n};\n\nSCSimpleBroker.prototype = Object.create(EventEmitter.prototype);\n\nSCSimpleBroker.prototype.exchange = function () {\n  return this._exchangeClient;\n};\n\nSCSimpleBroker.prototype.subscribeSocket = function (socket, channel, callback) {\n  if (!this._clientSubscribers[channel]) {\n    this._clientSubscribers[channel] = {};\n    this._clientSubscribersCounter[channel] = 0;\n  }\n  if (!this._clientSubscribers[channel][socket.id]) {\n    this._clientSubscribersCounter[channel]++;\n  }\n  this._clientSubscribers[channel][socket.id] = socket;\n  callback && callback();\n};\n\nSCSimpleBroker.prototype.unsubscribeSocket = function (socket, channel, callback) {\n  if (this._clientSubscribers[channel]) {\n    if (this._clientSubscribers[channel][socket.id]) {\n      this._clientSubscribersCounter[channel]--;\n      delete this._clientSubscribers[channel][socket.id];\n\n      if (this._clientSubscribersCounter[channel] <= 0) {\n        delete this._clientSubscribers[channel];\n        delete this._clientSubscribersCounter[channel];\n      }\n    }\n  }\n  callback && callback();\n};\n\nSCSimpleBroker.prototype.publish = function (channelName, data, callback) {\n  this._handleExchangeMessage(channelName, data, callback);\n  callback && callback();\n};\n\nSCSimpleBroker.prototype._handleExchangeMessage = function (channel, message, options) {\n  var packet = {\n    channel: channel,\n    data: message\n  };\n\n  var subscriberSockets = this._clientSubscribers[channel];\n\n  for (var i in subscriberSockets) {\n    if (subscriberSockets.hasOwnProperty(i)) {\n      subscriberSockets[i].emit('#publish', packet);\n    }\n  }\n\n  this.emit('message', packet);\n};\n\nmodule.exports.SCSimpleBroker = SCSimpleBroker;\n"]},"metadata":{},"sourceType":"script"}