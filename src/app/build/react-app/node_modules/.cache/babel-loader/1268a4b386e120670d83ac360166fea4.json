{"ast":null,"code":"\"use strict\";\n\nfunction calculateNextResetTime(windowMs) {\n  var d = new Date();\n  d.setMilliseconds(d.getMilliseconds() + windowMs);\n  return d;\n}\n\nfunction MemoryStore(windowMs) {\n  var hits = {};\n  var resetTime = calculateNextResetTime(windowMs);\n\n  this.incr = function (key, cb) {\n    if (hits[key]) {\n      hits[key]++;\n    } else {\n      hits[key] = 1;\n    }\n\n    cb(null, hits[key], resetTime);\n  };\n\n  this.decrement = function (key) {\n    if (hits[key]) {\n      hits[key]--;\n    }\n  }; // export an API to allow hits all IPs to be reset\n\n\n  this.resetAll = function () {\n    hits = {};\n    resetTime = calculateNextResetTime(windowMs);\n  }; // export an API to allow hits from one IP to be reset\n\n\n  this.resetKey = function (key) {\n    delete hits[key];\n  }; // simply reset ALL hits every windowMs\n\n\n  var interval = setInterval(this.resetAll, windowMs);\n\n  if (interval.unref) {\n    interval.unref();\n  }\n}\n\nmodule.exports = MemoryStore;","map":{"version":3,"sources":["/home/lisk/doomonlisk/node_modules/express-rate-limit/lib/memory-store.js"],"names":["calculateNextResetTime","windowMs","d","Date","setMilliseconds","getMilliseconds","MemoryStore","hits","resetTime","incr","key","cb","decrement","resetAll","resetKey","interval","setInterval","unref","module","exports"],"mappings":"AAAA;;AAEA,SAASA,sBAAT,CAAgCC,QAAhC,EAA0C;AACxC,MAAMC,CAAC,GAAG,IAAIC,IAAJ,EAAV;AACAD,EAAAA,CAAC,CAACE,eAAF,CAAkBF,CAAC,CAACG,eAAF,KAAsBJ,QAAxC;AACA,SAAOC,CAAP;AACD;;AAED,SAASI,WAAT,CAAqBL,QAArB,EAA+B;AAC7B,MAAIM,IAAI,GAAG,EAAX;AACA,MAAIC,SAAS,GAAGR,sBAAsB,CAACC,QAAD,CAAtC;;AAEA,OAAKQ,IAAL,GAAY,UAAUC,GAAV,EAAeC,EAAf,EAAmB;AAC7B,QAAIJ,IAAI,CAACG,GAAD,CAAR,EAAe;AACbH,MAAAA,IAAI,CAACG,GAAD,CAAJ;AACD,KAFD,MAEO;AACLH,MAAAA,IAAI,CAACG,GAAD,CAAJ,GAAY,CAAZ;AACD;;AAEDC,IAAAA,EAAE,CAAC,IAAD,EAAOJ,IAAI,CAACG,GAAD,CAAX,EAAkBF,SAAlB,CAAF;AACD,GARD;;AAUA,OAAKI,SAAL,GAAiB,UAAUF,GAAV,EAAe;AAC9B,QAAIH,IAAI,CAACG,GAAD,CAAR,EAAe;AACbH,MAAAA,IAAI,CAACG,GAAD,CAAJ;AACD;AACF,GAJD,CAd6B,CAoB7B;;;AACA,OAAKG,QAAL,GAAgB,YAAY;AAC1BN,IAAAA,IAAI,GAAG,EAAP;AACAC,IAAAA,SAAS,GAAGR,sBAAsB,CAACC,QAAD,CAAlC;AACD,GAHD,CArB6B,CA0B7B;;;AACA,OAAKa,QAAL,GAAgB,UAAUJ,GAAV,EAAe;AAC7B,WAAOH,IAAI,CAACG,GAAD,CAAX;AACD,GAFD,CA3B6B,CA+B7B;;;AACA,MAAMK,QAAQ,GAAGC,WAAW,CAAC,KAAKH,QAAN,EAAgBZ,QAAhB,CAA5B;;AACA,MAAIc,QAAQ,CAACE,KAAb,EAAoB;AAClBF,IAAAA,QAAQ,CAACE,KAAT;AACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBb,WAAjB","sourcesContent":["\"use strict\";\n\nfunction calculateNextResetTime(windowMs) {\n  const d = new Date();\n  d.setMilliseconds(d.getMilliseconds() + windowMs);\n  return d;\n}\n\nfunction MemoryStore(windowMs) {\n  let hits = {};\n  let resetTime = calculateNextResetTime(windowMs);\n\n  this.incr = function (key, cb) {\n    if (hits[key]) {\n      hits[key]++;\n    } else {\n      hits[key] = 1;\n    }\n\n    cb(null, hits[key], resetTime);\n  };\n\n  this.decrement = function (key) {\n    if (hits[key]) {\n      hits[key]--;\n    }\n  };\n\n  // export an API to allow hits all IPs to be reset\n  this.resetAll = function () {\n    hits = {};\n    resetTime = calculateNextResetTime(windowMs);\n  };\n\n  // export an API to allow hits from one IP to be reset\n  this.resetKey = function (key) {\n    delete hits[key];\n  };\n\n  // simply reset ALL hits every windowMs\n  const interval = setInterval(this.resetAll, windowMs);\n  if (interval.unref) {\n    interval.unref();\n  }\n}\n\nmodule.exports = MemoryStore;\n"]},"metadata":{},"sourceType":"script"}