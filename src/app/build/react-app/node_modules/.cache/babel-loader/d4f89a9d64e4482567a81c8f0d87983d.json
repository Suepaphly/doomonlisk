{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _objectWithoutProperties = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _excluded = [\"plugins\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Application = void 0;\n\nvar fs = require(\"fs-extra\");\n\nvar path = require(\"path\");\n\nvar psList = require(\"ps-list\");\n\nvar assert = require(\"assert\");\n\nvar util_1 = require(\"util\");\n\nvar lisk_db_1 = require(\"@liskhq/lisk-db\");\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nvar constants_1 = require(\"./constants\");\n\nvar base_plugin_1 = require(\"./plugins/base_plugin\");\n\nvar system_dirs_1 = require(\"./system_dirs\");\n\nvar controller_1 = require(\"./controller\");\n\nvar schema_1 = require(\"./schema\");\n\nvar node_1 = require(\"./node\");\n\nvar logger_1 = require(\"./logger\");\n\nvar errors_1 = require(\"./errors\");\n\nvar modules_1 = require(\"./modules\");\n\nvar MINIMUM_EXTERNAL_MODULE_ID = 1000;\nvar rm = util_1.promisify(fs.unlink);\n\nvar isPidRunning = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pid) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", psList().then(function (list) {\n              return list.some(function (x) {\n                return x.pid === pid;\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function isPidRunning(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar registerProcessHooks = function registerProcessHooks(app) {\n  var handleShutdown = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(code, message) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return app.shutdown(code, message);\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleShutdown(_x2, _x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  process.title = \"\".concat(app.config.label, \"(\").concat(app.config.version, \")\");\n  process.on('uncaughtException', function (err) {\n    app.logger.error({\n      err: err\n    }, 'System error: uncaughtException');\n    handleShutdown(1, err.message).catch(function (error) {\n      return app.logger.error({\n        error: error\n      });\n    });\n  });\n  process.on('unhandledRejection', function (err) {\n    app.logger.fatal({\n      err: err\n    }, 'System error: unhandledRejection');\n    handleShutdown(1, err.message).catch(function (error) {\n      return app.logger.error({\n        error: error\n      });\n    });\n  });\n  process.once('SIGTERM', function () {\n    handleShutdown(0, 'SIGTERM').catch(function (error) {\n      return app.logger.error({\n        error: error\n      });\n    });\n  });\n  process.once('SIGINT', function () {\n    handleShutdown(0, 'SIGINT').catch(function (error) {\n      return app.logger.error({\n        error: error\n      });\n    });\n  });\n  process.once('exit', function (code) {\n    handleShutdown(code, 'process.exit').catch(function (error) {\n      return app.logger.error({\n        error: error\n      });\n    });\n  });\n};\n\nvar Application = /*#__PURE__*/function () {\n  function Application(genesisBlock) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Application);\n\n    var _a, _b;\n\n    this._mutex = new lisk_utils_1.jobHandlers.Mutex();\n    this._genesisBlock = genesisBlock;\n    var appConfig = lisk_utils_1.objects.cloneDeep(schema_1.applicationConfigSchema.default);\n    appConfig.label = (_a = config.label) !== null && _a !== void 0 ? _a : \"lisk-\".concat((_b = config.genesisConfig) === null || _b === void 0 ? void 0 : _b.communityIdentifier);\n    var mergedConfig = lisk_utils_1.objects.mergeDeep({}, appConfig, config);\n    var applicationConfigErrors = lisk_validator_1.validator.validate(schema_1.applicationConfigSchema, mergedConfig);\n\n    if (applicationConfigErrors.length) {\n      throw new lisk_validator_1.LiskValidationError(applicationConfigErrors);\n    }\n\n    this.config = mergedConfig;\n    this._plugins = {};\n\n    var _this$config = this.config,\n        plugins = _this$config.plugins,\n        rootConfigs = _objectWithoutProperties(_this$config, _excluded);\n\n    this._node = new node_1.Node({\n      options: rootConfigs\n    });\n  }\n\n  _createClass(Application, [{\n    key: \"networkIdentifier\",\n    get: function get() {\n      return this._node.networkIdentifier;\n    }\n  }, {\n    key: \"registerPlugin\",\n    value: function registerPlugin(pluginKlass) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        loadAsChildProcess: false\n      };\n\n      var _a, _b;\n\n      assert(pluginKlass, 'Plugin implementation is required');\n      assert(typeof options === 'object', 'Plugin options must be provided or set to empty object.');\n      var pluginAlias = (_a = options === null || options === void 0 ? void 0 : options.alias) !== null && _a !== void 0 ? _a : pluginKlass.alias;\n      assert(!Object.keys(this._plugins).includes(pluginAlias), \"A plugin with alias \\\"\".concat(pluginAlias, \"\\\" already registered.\"));\n\n      if (options.loadAsChildProcess) {\n        if (!base_plugin_1.getPluginExportPath(pluginKlass)) {\n          throw new Error(\"Unable to register plugin \\\"\".concat(pluginAlias, \"\\\" to load as child process. \\n -> To load plugin as child process it must be exported. \\n -> You can specify npm package as \\\"info.name\\\". \\n -> Or you can specify any static path as \\\"info.exportPath\\\". \\n -> To fix this issue you can simply assign __filename to info.exportPath in your plugin.\"));\n        }\n      }\n\n      this.config.plugins[pluginAlias] = Object.assign((_b = this.config.plugins[pluginAlias]) !== null && _b !== void 0 ? _b : {}, options);\n      base_plugin_1.validatePluginSpec(pluginKlass, this.config.plugins[pluginAlias]);\n      this._plugins[pluginAlias] = pluginKlass;\n    }\n  }, {\n    key: \"overridePluginOptions\",\n    value: function overridePluginOptions(alias, options) {\n      assert(Object.keys(this._plugins).includes(alias), \"No plugin \".concat(alias, \" is registered\"));\n      this.config.plugins[alias] = _objectSpread(_objectSpread({}, this.config.plugins[alias]), options);\n    }\n  }, {\n    key: \"registerModule\",\n    value: function registerModule(Module) {\n      this._registerModule(Module, true);\n    }\n  }, {\n    key: \"getSchema\",\n    value: function getSchema() {\n      return this._node.getSchema();\n    }\n  }, {\n    key: \"getDefaultAccount\",\n    value: function getDefaultAccount() {\n      return this._node.getDefaultAccount();\n    }\n  }, {\n    key: \"getRegisteredModules\",\n    value: function getRegisteredModules() {\n      return this._node.getRegisteredModules();\n    }\n  }, {\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this = this;\n\n        var dirs;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                Object.freeze(this.config);\n                registerProcessHooks(this);\n                _context4.next = 4;\n                return this._setupDirectories();\n\n              case 4:\n                this.logger = this._initLogger();\n                this.logger.info(\"Starting the app - \".concat(this.config.label));\n                this.logger.info('If you experience any type of error, please open an issue on Lisk GitHub: https://github.com/LiskHQ/lisk-sdk/issues');\n                this.logger.info('Contribution guidelines can be found at Lisk-sdk: https://github.com/LiskHQ/lisk-sdk/blob/development/docs/CONTRIBUTING.md');\n                this.logger.info(\"Booting the application with Lisk Framework(\".concat(this.config.version, \")\"));\n                _context4.next = 11;\n                return this._validatePidFile();\n\n              case 11:\n                this._forgerDB = this._getDBInstance(this.config, 'forger.db');\n                this._blockchainDB = this._getDBInstance(this.config, 'blockchain.db');\n                this._nodeDB = this._getDBInstance(this.config, 'node.db');\n                dirs = system_dirs_1.systemDirs(this.config.label, this.config.rootPath);\n                _context4.next = 17;\n                return this._mutex.runExclusive( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _this._channel = _this._initChannel();\n                          _this._controller = _this._initController();\n                          _context3.next = 4;\n                          return _this._controller.load();\n\n                        case 4:\n                          if (_this._genesisBlock) {\n                            _context3.next = 6;\n                            break;\n                          }\n\n                          throw new Error('Genesis block must be provided to start a node');\n\n                        case 6:\n                          _context3.next = 8;\n                          return _this._node.init({\n                            dataPath: dirs.data,\n                            genesisBlockJSON: _this._genesisBlock,\n                            bus: _this._controller.bus,\n                            channel: _this._channel,\n                            forgerDB: _this._forgerDB,\n                            blockchainDB: _this._blockchainDB,\n                            nodeDB: _this._nodeDB,\n                            logger: _this.logger\n                          });\n\n                        case 8:\n                          _context3.next = 10;\n                          return _this._loadPlugins();\n\n                        case 10:\n                          _this.logger.debug(_this._controller.bus.getEvents(), 'Application listening to events');\n\n                          _this.logger.debug(_this._controller.bus.getActions(), 'Application ready for actions');\n\n                          _this._channel.publish(constants_1.APP_EVENT_READY);\n\n                          delete _this._genesisBlock;\n\n                        case 14:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                })));\n\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function run() {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }, {\n    key: \"shutdown\",\n    value: function () {\n      var _shutdown = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var errorCode,\n            message,\n            release,\n            _args5 = arguments;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                errorCode = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : 0;\n                message = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : '';\n                this.logger.info({\n                  errorCode: errorCode,\n                  message: message\n                }, 'Application shutdown started');\n                _context5.next = 5;\n                return this._mutex.acquire();\n\n              case 5:\n                release = _context5.sent;\n                _context5.prev = 6;\n\n                this._channel.publish(constants_1.APP_EVENT_SHUTDOWN);\n\n                _context5.next = 10;\n                return this._node.cleanup();\n\n              case 10:\n                _context5.next = 12;\n                return this._controller.cleanup(errorCode, message);\n\n              case 12:\n                _context5.next = 14;\n                return this._blockchainDB.close();\n\n              case 14:\n                _context5.next = 16;\n                return this._forgerDB.close();\n\n              case 16:\n                _context5.next = 18;\n                return this._nodeDB.close();\n\n              case 18:\n                _context5.next = 20;\n                return this._emptySocketsDirectory();\n\n              case 20:\n                this._clearControllerPidFile();\n\n                this.logger.info({\n                  errorCode: errorCode,\n                  message: message\n                }, 'Application shutdown completed');\n                _context5.next = 27;\n                break;\n\n              case 24:\n                _context5.prev = 24;\n                _context5.t0 = _context5[\"catch\"](6);\n                this.logger.fatal({\n                  err: _context5.t0\n                }, 'Application shutdown failed');\n\n              case 27:\n                _context5.prev = 27;\n                this.config = lisk_utils_1.objects.mergeDeep({}, this.config);\n                release();\n                process.removeAllListeners('exit');\n                process.exit(errorCode);\n                return _context5.finish(27);\n\n              case 33:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[6, 24, 27, 33]]);\n      }));\n\n      function shutdown() {\n        return _shutdown.apply(this, arguments);\n      }\n\n      return shutdown;\n    }()\n  }, {\n    key: \"_registerModule\",\n    value: function _registerModule(Module) {\n      var validateModuleID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      assert(Module, 'Module implementation is required');\n      var InstantiableModule = Module;\n      var moduleInstance = new InstantiableModule(this.config.genesisConfig);\n\n      if (Application.getDefaultModules().includes(Module)) {\n        this._node.registerModule(moduleInstance);\n      } else if (validateModuleID && moduleInstance.id < MINIMUM_EXTERNAL_MODULE_ID) {\n        throw new Error(\"Custom module must have id greater than or equal to \".concat(MINIMUM_EXTERNAL_MODULE_ID));\n      } else {\n        this._node.registerModule(moduleInstance);\n      }\n    }\n  }, {\n    key: \"_loadPlugins\",\n    value: function () {\n      var _loadPlugins2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _this2 = this;\n\n        var dirs, pluginOptions, appConfigForPlugin;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                dirs = system_dirs_1.systemDirs(this.config.label, this.config.rootPath);\n                pluginOptions = {};\n                appConfigForPlugin = {\n                  version: this.config.version,\n                  networkVersion: this.config.networkVersion,\n                  genesisConfig: this.config.genesisConfig,\n                  logger: {\n                    consoleLogLevel: this.config.logger.consoleLogLevel,\n                    fileLogLevel: this.config.logger.fileLogLevel\n                  },\n                  rootPath: this.config.rootPath,\n                  label: this.config.label\n                };\n                Object.keys(this._plugins).forEach(function (alias) {\n                  pluginOptions[alias] = _objectSpread(_objectSpread({}, _this2.config.plugins[alias]), {}, {\n                    dataPath: dirs.dataPath,\n                    appConfig: appConfigForPlugin\n                  });\n                });\n                _context6.next = 6;\n                return this._controller.loadPlugins(this._plugins, pluginOptions);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _loadPlugins() {\n        return _loadPlugins2.apply(this, arguments);\n      }\n\n      return _loadPlugins;\n    }()\n  }, {\n    key: \"_initLogger\",\n    value: function _initLogger() {\n      var dirs = system_dirs_1.systemDirs(this.config.label, this.config.rootPath);\n      return logger_1.createLogger(_objectSpread(_objectSpread({}, this.config.logger), {}, {\n        logFilePath: path.join(dirs.logs, this.config.logger.logFileName),\n        module: 'lisk:app'\n      }));\n    }\n  }, {\n    key: \"_initChannel\",\n    value: function _initChannel() {\n      var _this3 = this;\n\n      return new controller_1.InMemoryChannel(constants_1.APP_IDENTIFIER, [constants_1.APP_EVENT_READY.replace('app:', ''), constants_1.APP_EVENT_SHUTDOWN.replace('app:', ''), constants_1.APP_EVENT_NETWORK_EVENT.replace('app:', ''), constants_1.APP_EVENT_NETWORK_READY.replace('app:', ''), constants_1.APP_EVENT_TRANSACTION_NEW.replace('app:', ''), constants_1.APP_EVENT_CHAIN_FORK.replace('app:', ''), constants_1.APP_EVENT_CHAIN_VALIDATORS_CHANGE.replace('app:', ''), constants_1.APP_EVENT_BLOCK_NEW.replace('app:', ''), constants_1.APP_EVENT_BLOCK_DELETE.replace('app:', '')], {\n        getConnectedPeers: {\n          handler: function handler() {\n            return _this3._node.actions.getConnectedPeers();\n          }\n        },\n        getDisconnectedPeers: {\n          handler: function handler() {\n            return _this3._node.actions.getDisconnectedPeers();\n          }\n        },\n        getNetworkStats: {\n          handler: function handler() {\n            return _this3._node.actions.getNetworkStats();\n          }\n        },\n        getForgers: {\n          handler: function () {\n            var _handler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n              return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                while (1) {\n                  switch (_context7.prev = _context7.next) {\n                    case 0:\n                      return _context7.abrupt(\"return\", _this3._node.actions.getValidators());\n\n                    case 1:\n                    case \"end\":\n                      return _context7.stop();\n                  }\n                }\n              }, _callee7);\n            }));\n\n            function handler() {\n              return _handler.apply(this, arguments);\n            }\n\n            return handler;\n          }()\n        },\n        updateForgingStatus: {\n          handler: function () {\n            var _handler2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(params) {\n              return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                while (1) {\n                  switch (_context8.prev = _context8.next) {\n                    case 0:\n                      return _context8.abrupt(\"return\", _this3._node.actions.updateForgingStatus(params));\n\n                    case 1:\n                    case \"end\":\n                      return _context8.stop();\n                  }\n                }\n              }, _callee8);\n            }));\n\n            function handler(_x4) {\n              return _handler2.apply(this, arguments);\n            }\n\n            return handler;\n          }()\n        },\n        getForgingStatus: {\n          handler: function () {\n            var _handler3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n              return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n                while (1) {\n                  switch (_context9.prev = _context9.next) {\n                    case 0:\n                      return _context9.abrupt(\"return\", _this3._node.actions.getForgingStatus());\n\n                    case 1:\n                    case \"end\":\n                      return _context9.stop();\n                  }\n                }\n              }, _callee9);\n            }));\n\n            function handler() {\n              return _handler3.apply(this, arguments);\n            }\n\n            return handler;\n          }()\n        },\n        getTransactionsFromPool: {\n          handler: function handler() {\n            return _this3._node.actions.getTransactionsFromPool();\n          }\n        },\n        postTransaction: {\n          handler: function () {\n            var _handler4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(params) {\n              return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n                while (1) {\n                  switch (_context10.prev = _context10.next) {\n                    case 0:\n                      return _context10.abrupt(\"return\", _this3._node.actions.postTransaction(params));\n\n                    case 1:\n                    case \"end\":\n                      return _context10.stop();\n                  }\n                }\n              }, _callee10);\n            }));\n\n            function handler(_x5) {\n              return _handler4.apply(this, arguments);\n            }\n\n            return handler;\n          }()\n        },\n        getLastBlock: {\n          handler: function handler() {\n            return _this3._node.actions.getLastBlock();\n          }\n        },\n        getAccount: {\n          handler: function () {\n            var _handler5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(params) {\n              return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n                while (1) {\n                  switch (_context11.prev = _context11.next) {\n                    case 0:\n                      return _context11.abrupt(\"return\", _this3._node.actions.getAccount(params));\n\n                    case 1:\n                    case \"end\":\n                      return _context11.stop();\n                  }\n                }\n              }, _callee11);\n            }));\n\n            function handler(_x6) {\n              return _handler5.apply(this, arguments);\n            }\n\n            return handler;\n          }()\n        },\n        getAccounts: {\n          handler: function () {\n            var _handler6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(params) {\n              return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n                while (1) {\n                  switch (_context12.prev = _context12.next) {\n                    case 0:\n                      return _context12.abrupt(\"return\", _this3._node.actions.getAccounts(params));\n\n                    case 1:\n                    case \"end\":\n                      return _context12.stop();\n                  }\n                }\n              }, _callee12);\n            }));\n\n            function handler(_x7) {\n              return _handler6.apply(this, arguments);\n            }\n\n            return handler;\n          }()\n        },\n        getBlockByID: {\n          handler: function () {\n            var _handler7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(params) {\n              return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n                while (1) {\n                  switch (_context13.prev = _context13.next) {\n                    case 0:\n                      return _context13.abrupt(\"return\", _this3._node.actions.getBlockByID(params));\n\n                    case 1:\n                    case \"end\":\n                      return _context13.stop();\n                  }\n                }\n              }, _callee13);\n            }));\n\n            function handler(_x8) {\n              return _handler7.apply(this, arguments);\n            }\n\n            return handler;\n          }()\n        },\n        getBlocksByIDs: {\n          handler: function () {\n            var _handler8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(params) {\n              return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n                while (1) {\n                  switch (_context14.prev = _context14.next) {\n                    case 0:\n                      return _context14.abrupt(\"return\", _this3._node.actions.getBlocksByIDs(params));\n\n                    case 1:\n                    case \"end\":\n                      return _context14.stop();\n                  }\n                }\n              }, _callee14);\n            }));\n\n            function handler(_x9) {\n              return _handler8.apply(this, arguments);\n            }\n\n            return handler;\n          }()\n        },\n        getBlockByHeight: {\n          handler: function () {\n            var _handler9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(params) {\n              return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n                while (1) {\n                  switch (_context15.prev = _context15.next) {\n                    case 0:\n                      return _context15.abrupt(\"return\", _this3._node.actions.getBlockByHeight(params));\n\n                    case 1:\n                    case \"end\":\n                      return _context15.stop();\n                  }\n                }\n              }, _callee15);\n            }));\n\n            function handler(_x10) {\n              return _handler9.apply(this, arguments);\n            }\n\n            return handler;\n          }()\n        },\n        getBlocksByHeightBetween: {\n          handler: function () {\n            var _handler10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(params) {\n              return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n                while (1) {\n                  switch (_context16.prev = _context16.next) {\n                    case 0:\n                      return _context16.abrupt(\"return\", _this3._node.actions.getBlocksByHeightBetween(params));\n\n                    case 1:\n                    case \"end\":\n                      return _context16.stop();\n                  }\n                }\n              }, _callee16);\n            }));\n\n            function handler(_x11) {\n              return _handler10.apply(this, arguments);\n            }\n\n            return handler;\n          }()\n        },\n        getTransactionByID: {\n          handler: function () {\n            var _handler11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(params) {\n              return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n                while (1) {\n                  switch (_context17.prev = _context17.next) {\n                    case 0:\n                      return _context17.abrupt(\"return\", _this3._node.actions.getTransactionByID(params));\n\n                    case 1:\n                    case \"end\":\n                      return _context17.stop();\n                  }\n                }\n              }, _callee17);\n            }));\n\n            function handler(_x12) {\n              return _handler11.apply(this, arguments);\n            }\n\n            return handler;\n          }()\n        },\n        getTransactionsByIDs: {\n          handler: function () {\n            var _handler12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(params) {\n              return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n                while (1) {\n                  switch (_context18.prev = _context18.next) {\n                    case 0:\n                      return _context18.abrupt(\"return\", _this3._node.actions.getTransactionsByIDs(params));\n\n                    case 1:\n                    case \"end\":\n                      return _context18.stop();\n                  }\n                }\n              }, _callee18);\n            }));\n\n            function handler(_x13) {\n              return _handler12.apply(this, arguments);\n            }\n\n            return handler;\n          }()\n        },\n        getSchema: {\n          handler: function handler() {\n            return _this3._node.actions.getSchema();\n          }\n        },\n        getRegisteredModules: {\n          handler: function handler() {\n            return _this3._node.actions.getRegisteredModules();\n          }\n        },\n        getNodeInfo: {\n          handler: function handler() {\n            return _this3._node.actions.getNodeInfo();\n          }\n        },\n        getRegisteredActions: {\n          handler: function handler() {\n            return _this3._controller.bus.getActions();\n          }\n        },\n        getRegisteredEvents: {\n          handler: function handler() {\n            return _this3._controller.bus.getEvents();\n          }\n        }\n      }, {\n        skipInternalEvents: true\n      });\n    }\n  }, {\n    key: \"_initController\",\n    value: function _initController() {\n      return new controller_1.Controller({\n        appLabel: this.config.label,\n        config: {\n          rootPath: this.config.rootPath,\n          rpc: this.config.rpc\n        },\n        logger: this.logger,\n        channel: this._channel\n      });\n    }\n  }, {\n    key: \"_setupDirectories\",\n    value: function () {\n      var _setupDirectories2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n        var dirs;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                dirs = system_dirs_1.systemDirs(this.config.label, this.config.rootPath);\n                _context20.next = 3;\n                return Promise.all(Array.from(Object.values(dirs)).map( /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(dirPath) {\n                    return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n                      while (1) {\n                        switch (_context19.prev = _context19.next) {\n                          case 0:\n                            return _context19.abrupt(\"return\", fs.ensureDir(dirPath));\n\n                          case 1:\n                          case \"end\":\n                            return _context19.stop();\n                        }\n                      }\n                    }, _callee19);\n                  }));\n\n                  return function (_x14) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }()));\n\n              case 3:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function _setupDirectories() {\n        return _setupDirectories2.apply(this, arguments);\n      }\n\n      return _setupDirectories;\n    }()\n  }, {\n    key: \"_emptySocketsDirectory\",\n    value: function () {\n      var _emptySocketsDirectory2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n        var _system_dirs_1$system, sockets, socketFiles;\n\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _system_dirs_1$system = system_dirs_1.systemDirs(this.config.label, this.config.rootPath), sockets = _system_dirs_1$system.sockets;\n                socketFiles = fs.readdirSync(sockets);\n                _context22.next = 4;\n                return Promise.all(socketFiles.map( /*#__PURE__*/function () {\n                  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(aSocketFile) {\n                    return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n                      while (1) {\n                        switch (_context21.prev = _context21.next) {\n                          case 0:\n                            return _context21.abrupt(\"return\", rm(path.join(sockets, aSocketFile)));\n\n                          case 1:\n                          case \"end\":\n                            return _context21.stop();\n                        }\n                      }\n                    }, _callee21);\n                  }));\n\n                  return function (_x15) {\n                    return _ref5.apply(this, arguments);\n                  };\n                }()));\n\n              case 4:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function _emptySocketsDirectory() {\n        return _emptySocketsDirectory2.apply(this, arguments);\n      }\n\n      return _emptySocketsDirectory;\n    }()\n  }, {\n    key: \"_validatePidFile\",\n    value: function () {\n      var _validatePidFile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n        var dirs, pidPath, pidExists, pid, pidRunning;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                dirs = system_dirs_1.systemDirs(this.config.label, this.config.rootPath);\n                pidPath = path.join(dirs.pids, 'controller.pid');\n                _context23.next = 4;\n                return fs.pathExists(pidPath);\n\n              case 4:\n                pidExists = _context23.sent;\n\n                if (!pidExists) {\n                  _context23.next = 19;\n                  break;\n                }\n\n                _context23.t0 = parseInt;\n                _context23.next = 9;\n                return fs.readFile(pidPath);\n\n              case 9:\n                _context23.t1 = _context23.sent.toString();\n                pid = (0, _context23.t0)(_context23.t1, 10);\n                _context23.next = 13;\n                return isPidRunning(pid);\n\n              case 13:\n                pidRunning = _context23.sent;\n                this.logger.info({\n                  pid: pid\n                }, 'Previous Lisk PID');\n                this.logger.info({\n                  pid: process.pid\n                }, 'Current Lisk PID');\n\n                if (!(pidRunning && pid !== process.pid)) {\n                  _context23.next = 19;\n                  break;\n                }\n\n                this.logger.error({\n                  appLabel: this.config.label\n                }, 'An instance of application is already running, please change the application label to run another instance');\n                throw new errors_1.DuplicateAppInstanceError(this.config.label, pidPath);\n\n              case 19:\n                _context23.next = 21;\n                return fs.writeFile(pidPath, process.pid);\n\n              case 21:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function _validatePidFile() {\n        return _validatePidFile2.apply(this, arguments);\n      }\n\n      return _validatePidFile;\n    }()\n  }, {\n    key: \"_clearControllerPidFile\",\n    value: function _clearControllerPidFile() {\n      var dirs = system_dirs_1.systemDirs(this.config.label, this.config.rootPath);\n      fs.unlinkSync(path.join(dirs.pids, 'controller.pid'));\n    }\n  }, {\n    key: \"_getDBInstance\",\n    value: function _getDBInstance(options, dbName) {\n      var dirs = system_dirs_1.systemDirs(options.label, options.rootPath);\n      var dbPath = \"\".concat(dirs.data, \"/\").concat(dbName);\n      this.logger.debug({\n        dbName: dbName,\n        dbPath: dbPath\n      }, 'Create database instance.');\n      return new lisk_db_1.KVStore(dbPath);\n    }\n  }], [{\n    key: \"getDefaultModules\",\n    value: function getDefaultModules() {\n      return [modules_1.TokenModule, modules_1.SequenceModule, modules_1.KeysModule, modules_1.DPoSModule];\n    }\n  }, {\n    key: \"defaultApplication\",\n    value: function defaultApplication(genesisBlock) {\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var application = new Application(genesisBlock, config);\n\n      var _iterator = _createForOfIteratorHelper(Application.getDefaultModules()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var Module = _step.value;\n\n          application._registerModule(Module);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return application;\n    }\n  }]);\n\n  return Application;\n}();\n\nexports.Application = Application;","map":{"version":3,"sources":["../src/application.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Application = void 0;\nconst fs = require(\"fs-extra\");\nconst path = require(\"path\");\nconst psList = require(\"ps-list\");\nconst assert = require(\"assert\");\nconst util_1 = require(\"util\");\nconst lisk_db_1 = require(\"@liskhq/lisk-db\");\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nconst constants_1 = require(\"./constants\");\nconst base_plugin_1 = require(\"./plugins/base_plugin\");\nconst system_dirs_1 = require(\"./system_dirs\");\nconst controller_1 = require(\"./controller\");\nconst schema_1 = require(\"./schema\");\nconst node_1 = require(\"./node\");\nconst logger_1 = require(\"./logger\");\nconst errors_1 = require(\"./errors\");\nconst modules_1 = require(\"./modules\");\nconst MINIMUM_EXTERNAL_MODULE_ID = 1000;\nconst rm = util_1.promisify(fs.unlink);\nconst isPidRunning = async (pid) => psList().then(list => list.some(x => x.pid === pid));\nconst registerProcessHooks = (app) => {\n    const handleShutdown = async (code, message) => {\n        await app.shutdown(code, message);\n    };\n    process.title = `${app.config.label}(${app.config.version})`;\n    process.on('uncaughtException', err => {\n        app.logger.error({\n            err,\n        }, 'System error: uncaughtException');\n        handleShutdown(1, err.message).catch((error) => app.logger.error({ error }));\n    });\n    process.on('unhandledRejection', err => {\n        app.logger.fatal({\n            err,\n        }, 'System error: unhandledRejection');\n        handleShutdown(1, err.message).catch((error) => app.logger.error({ error }));\n    });\n    process.once('SIGTERM', () => {\n        handleShutdown(0, 'SIGTERM').catch((error) => app.logger.error({ error }));\n    });\n    process.once('SIGINT', () => {\n        handleShutdown(0, 'SIGINT').catch((error) => app.logger.error({ error }));\n    });\n    process.once('exit', (code) => {\n        handleShutdown(code, 'process.exit').catch((error) => app.logger.error({ error }));\n    });\n};\nclass Application {\n    constructor(genesisBlock, config = {}) {\n        var _a, _b;\n        this._mutex = new lisk_utils_1.jobHandlers.Mutex();\n        this._genesisBlock = genesisBlock;\n        const appConfig = lisk_utils_1.objects.cloneDeep(schema_1.applicationConfigSchema.default);\n        appConfig.label =\n            (_a = config.label) !== null && _a !== void 0 ? _a : `lisk-${(_b = config.genesisConfig) === null || _b === void 0 ? void 0 : _b.communityIdentifier}`;\n        const mergedConfig = lisk_utils_1.objects.mergeDeep({}, appConfig, config);\n        const applicationConfigErrors = lisk_validator_1.validator.validate(schema_1.applicationConfigSchema, mergedConfig);\n        if (applicationConfigErrors.length) {\n            throw new lisk_validator_1.LiskValidationError(applicationConfigErrors);\n        }\n        this.config = mergedConfig;\n        this._plugins = {};\n        const { plugins, ...rootConfigs } = this.config;\n        this._node = new node_1.Node({\n            options: rootConfigs,\n        });\n    }\n    get networkIdentifier() {\n        return this._node.networkIdentifier;\n    }\n    static getDefaultModules() {\n        return [modules_1.TokenModule, modules_1.SequenceModule, modules_1.KeysModule, modules_1.DPoSModule];\n    }\n    static defaultApplication(genesisBlock, config = {}) {\n        const application = new Application(genesisBlock, config);\n        for (const Module of Application.getDefaultModules()) {\n            application._registerModule(Module);\n        }\n        return application;\n    }\n    registerPlugin(pluginKlass, options = { loadAsChildProcess: false }) {\n        var _a, _b;\n        assert(pluginKlass, 'Plugin implementation is required');\n        assert(typeof options === 'object', 'Plugin options must be provided or set to empty object.');\n        const pluginAlias = (_a = options === null || options === void 0 ? void 0 : options.alias) !== null && _a !== void 0 ? _a : pluginKlass.alias;\n        assert(!Object.keys(this._plugins).includes(pluginAlias), `A plugin with alias \"${pluginAlias}\" already registered.`);\n        if (options.loadAsChildProcess) {\n            if (!base_plugin_1.getPluginExportPath(pluginKlass)) {\n                throw new Error(`Unable to register plugin \"${pluginAlias}\" to load as child process. \\n -> To load plugin as child process it must be exported. \\n -> You can specify npm package as \"info.name\". \\n -> Or you can specify any static path as \"info.exportPath\". \\n -> To fix this issue you can simply assign __filename to info.exportPath in your plugin.`);\n            }\n        }\n        this.config.plugins[pluginAlias] = Object.assign((_b = this.config.plugins[pluginAlias]) !== null && _b !== void 0 ? _b : {}, options);\n        base_plugin_1.validatePluginSpec(pluginKlass, this.config.plugins[pluginAlias]);\n        this._plugins[pluginAlias] = pluginKlass;\n    }\n    overridePluginOptions(alias, options) {\n        assert(Object.keys(this._plugins).includes(alias), `No plugin ${alias} is registered`);\n        this.config.plugins[alias] = {\n            ...this.config.plugins[alias],\n            ...options,\n        };\n    }\n    registerModule(Module) {\n        this._registerModule(Module, true);\n    }\n    getSchema() {\n        return this._node.getSchema();\n    }\n    getDefaultAccount() {\n        return this._node.getDefaultAccount();\n    }\n    getRegisteredModules() {\n        return this._node.getRegisteredModules();\n    }\n    async run() {\n        Object.freeze(this.config);\n        registerProcessHooks(this);\n        await this._setupDirectories();\n        this.logger = this._initLogger();\n        this.logger.info(`Starting the app - ${this.config.label}`);\n        this.logger.info('If you experience any type of error, please open an issue on Lisk GitHub: https://github.com/LiskHQ/lisk-sdk/issues');\n        this.logger.info('Contribution guidelines can be found at Lisk-sdk: https://github.com/LiskHQ/lisk-sdk/blob/development/docs/CONTRIBUTING.md');\n        this.logger.info(`Booting the application with Lisk Framework(${this.config.version})`);\n        await this._validatePidFile();\n        this._forgerDB = this._getDBInstance(this.config, 'forger.db');\n        this._blockchainDB = this._getDBInstance(this.config, 'blockchain.db');\n        this._nodeDB = this._getDBInstance(this.config, 'node.db');\n        const dirs = system_dirs_1.systemDirs(this.config.label, this.config.rootPath);\n        await this._mutex.runExclusive(async () => {\n            this._channel = this._initChannel();\n            this._controller = this._initController();\n            await this._controller.load();\n            if (!this._genesisBlock) {\n                throw new Error('Genesis block must be provided to start a node');\n            }\n            await this._node.init({\n                dataPath: dirs.data,\n                genesisBlockJSON: this._genesisBlock,\n                bus: this._controller.bus,\n                channel: this._channel,\n                forgerDB: this._forgerDB,\n                blockchainDB: this._blockchainDB,\n                nodeDB: this._nodeDB,\n                logger: this.logger,\n            });\n            await this._loadPlugins();\n            this.logger.debug(this._controller.bus.getEvents(), 'Application listening to events');\n            this.logger.debug(this._controller.bus.getActions(), 'Application ready for actions');\n            this._channel.publish(constants_1.APP_EVENT_READY);\n            delete this._genesisBlock;\n        });\n    }\n    async shutdown(errorCode = 0, message = '') {\n        this.logger.info({ errorCode, message }, 'Application shutdown started');\n        const release = await this._mutex.acquire();\n        try {\n            this._channel.publish(constants_1.APP_EVENT_SHUTDOWN);\n            await this._node.cleanup();\n            await this._controller.cleanup(errorCode, message);\n            await this._blockchainDB.close();\n            await this._forgerDB.close();\n            await this._nodeDB.close();\n            await this._emptySocketsDirectory();\n            this._clearControllerPidFile();\n            this.logger.info({ errorCode, message }, 'Application shutdown completed');\n        }\n        catch (error) {\n            this.logger.fatal({ err: error }, 'Application shutdown failed');\n        }\n        finally {\n            this.config = lisk_utils_1.objects.mergeDeep({}, this.config);\n            release();\n            process.removeAllListeners('exit');\n            process.exit(errorCode);\n        }\n    }\n    _registerModule(Module, validateModuleID = false) {\n        assert(Module, 'Module implementation is required');\n        const InstantiableModule = Module;\n        const moduleInstance = new InstantiableModule(this.config.genesisConfig);\n        if (Application.getDefaultModules().includes(Module)) {\n            this._node.registerModule(moduleInstance);\n        }\n        else if (validateModuleID && moduleInstance.id < MINIMUM_EXTERNAL_MODULE_ID) {\n            throw new Error(`Custom module must have id greater than or equal to ${MINIMUM_EXTERNAL_MODULE_ID}`);\n        }\n        else {\n            this._node.registerModule(moduleInstance);\n        }\n    }\n    async _loadPlugins() {\n        const dirs = system_dirs_1.systemDirs(this.config.label, this.config.rootPath);\n        const pluginOptions = {};\n        const appConfigForPlugin = {\n            version: this.config.version,\n            networkVersion: this.config.networkVersion,\n            genesisConfig: this.config.genesisConfig,\n            logger: {\n                consoleLogLevel: this.config.logger.consoleLogLevel,\n                fileLogLevel: this.config.logger.fileLogLevel,\n            },\n            rootPath: this.config.rootPath,\n            label: this.config.label,\n        };\n        Object.keys(this._plugins).forEach(alias => {\n            pluginOptions[alias] = {\n                ...this.config.plugins[alias],\n                dataPath: dirs.dataPath,\n                appConfig: appConfigForPlugin,\n            };\n        });\n        await this._controller.loadPlugins(this._plugins, pluginOptions);\n    }\n    _initLogger() {\n        const dirs = system_dirs_1.systemDirs(this.config.label, this.config.rootPath);\n        return logger_1.createLogger({\n            ...this.config.logger,\n            logFilePath: path.join(dirs.logs, this.config.logger.logFileName),\n            module: 'lisk:app',\n        });\n    }\n    _initChannel() {\n        return new controller_1.InMemoryChannel(constants_1.APP_IDENTIFIER, [\n            constants_1.APP_EVENT_READY.replace('app:', ''),\n            constants_1.APP_EVENT_SHUTDOWN.replace('app:', ''),\n            constants_1.APP_EVENT_NETWORK_EVENT.replace('app:', ''),\n            constants_1.APP_EVENT_NETWORK_READY.replace('app:', ''),\n            constants_1.APP_EVENT_TRANSACTION_NEW.replace('app:', ''),\n            constants_1.APP_EVENT_CHAIN_FORK.replace('app:', ''),\n            constants_1.APP_EVENT_CHAIN_VALIDATORS_CHANGE.replace('app:', ''),\n            constants_1.APP_EVENT_BLOCK_NEW.replace('app:', ''),\n            constants_1.APP_EVENT_BLOCK_DELETE.replace('app:', ''),\n        ], {\n            getConnectedPeers: {\n                handler: () => this._node.actions.getConnectedPeers(),\n            },\n            getDisconnectedPeers: {\n                handler: () => this._node.actions.getDisconnectedPeers(),\n            },\n            getNetworkStats: {\n                handler: () => this._node.actions.getNetworkStats(),\n            },\n            getForgers: {\n                handler: async () => this._node.actions.getValidators(),\n            },\n            updateForgingStatus: {\n                handler: async (params) => this._node.actions.updateForgingStatus(params),\n            },\n            getForgingStatus: {\n                handler: async () => this._node.actions.getForgingStatus(),\n            },\n            getTransactionsFromPool: {\n                handler: () => this._node.actions.getTransactionsFromPool(),\n            },\n            postTransaction: {\n                handler: async (params) => this._node.actions.postTransaction(params),\n            },\n            getLastBlock: {\n                handler: () => this._node.actions.getLastBlock(),\n            },\n            getAccount: {\n                handler: async (params) => this._node.actions.getAccount(params),\n            },\n            getAccounts: {\n                handler: async (params) => this._node.actions.getAccounts(params),\n            },\n            getBlockByID: {\n                handler: async (params) => this._node.actions.getBlockByID(params),\n            },\n            getBlocksByIDs: {\n                handler: async (params) => this._node.actions.getBlocksByIDs(params),\n            },\n            getBlockByHeight: {\n                handler: async (params) => this._node.actions.getBlockByHeight(params),\n            },\n            getBlocksByHeightBetween: {\n                handler: async (params) => this._node.actions.getBlocksByHeightBetween(params),\n            },\n            getTransactionByID: {\n                handler: async (params) => this._node.actions.getTransactionByID(params),\n            },\n            getTransactionsByIDs: {\n                handler: async (params) => this._node.actions.getTransactionsByIDs(params),\n            },\n            getSchema: {\n                handler: () => this._node.actions.getSchema(),\n            },\n            getRegisteredModules: {\n                handler: () => this._node.actions.getRegisteredModules(),\n            },\n            getNodeInfo: {\n                handler: () => this._node.actions.getNodeInfo(),\n            },\n            getRegisteredActions: {\n                handler: () => this._controller.bus.getActions(),\n            },\n            getRegisteredEvents: {\n                handler: () => this._controller.bus.getEvents(),\n            },\n        }, { skipInternalEvents: true });\n    }\n    _initController() {\n        return new controller_1.Controller({\n            appLabel: this.config.label,\n            config: {\n                rootPath: this.config.rootPath,\n                rpc: this.config.rpc,\n            },\n            logger: this.logger,\n            channel: this._channel,\n        });\n    }\n    async _setupDirectories() {\n        const dirs = system_dirs_1.systemDirs(this.config.label, this.config.rootPath);\n        await Promise.all(Array.from(Object.values(dirs)).map(async (dirPath) => fs.ensureDir(dirPath)));\n    }\n    async _emptySocketsDirectory() {\n        const { sockets } = system_dirs_1.systemDirs(this.config.label, this.config.rootPath);\n        const socketFiles = fs.readdirSync(sockets);\n        await Promise.all(socketFiles.map(async (aSocketFile) => rm(path.join(sockets, aSocketFile))));\n    }\n    async _validatePidFile() {\n        const dirs = system_dirs_1.systemDirs(this.config.label, this.config.rootPath);\n        const pidPath = path.join(dirs.pids, 'controller.pid');\n        const pidExists = await fs.pathExists(pidPath);\n        if (pidExists) {\n            const pid = parseInt((await fs.readFile(pidPath)).toString(), 10);\n            const pidRunning = await isPidRunning(pid);\n            this.logger.info({ pid }, 'Previous Lisk PID');\n            this.logger.info({ pid: process.pid }, 'Current Lisk PID');\n            if (pidRunning && pid !== process.pid) {\n                this.logger.error({ appLabel: this.config.label }, 'An instance of application is already running, please change the application label to run another instance');\n                throw new errors_1.DuplicateAppInstanceError(this.config.label, pidPath);\n            }\n        }\n        await fs.writeFile(pidPath, process.pid);\n    }\n    _clearControllerPidFile() {\n        const dirs = system_dirs_1.systemDirs(this.config.label, this.config.rootPath);\n        fs.unlinkSync(path.join(dirs.pids, 'controller.pid'));\n    }\n    _getDBInstance(options, dbName) {\n        const dirs = system_dirs_1.systemDirs(options.label, options.rootPath);\n        const dbPath = `${dirs.data}/${dbName}`;\n        this.logger.debug({ dbName, dbPath }, 'Create database instance.');\n        return new lisk_db_1.KVStore(dbPath);\n    }\n}\nexports.Application = Application;\n//# sourceMappingURL=application.js.map"]},"metadata":{},"sourceType":"script"}