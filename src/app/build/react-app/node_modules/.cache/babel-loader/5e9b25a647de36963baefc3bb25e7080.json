{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBlockStats = void 0;\n\nvar getAverageReceivedBlocks = function getAverageReceivedBlocks(blocks) {\n  var totalCount = 0;\n\n  for (var _i = 0, _Object$values = Object.values(blocks); _i < _Object$values.length; _i++) {\n    var blockStat = _Object$values[_i];\n    totalCount += blockStat.count;\n  }\n\n  return Object.keys(blocks).length ? totalCount / Object.keys(blocks).length : 0;\n};\n\nvar getBlockStats = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(channel, state) {\n    var connectedPeers;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return channel.invoke('app:getConnectedPeers');\n\n          case 2:\n            connectedPeers = _context.sent;\n            return _context.abrupt(\"return\", {\n              blocks: state.blocks,\n              averageReceivedBlocks: getAverageReceivedBlocks(state.blocks),\n              connectedPeers: connectedPeers.length\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getBlockStats(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.getBlockStats = getBlockStats;","map":{"version":3,"sources":["../../src/controllers/blocks.ts"],"names":[],"mappings":";;;;;;;;;;;AAsBA,IAAM,wBAAwB,GAAG,SAA3B,wBAA2B,CAAC,MAAD,EAAqD;AACrF,MAAI,UAAU,GAAG,CAAjB;;AAEA,oCAAwB,MAAM,CAAC,MAAP,CAAc,MAAd,CAAxB,oCAA+C;AAA1C,QAAM,SAAS,qBAAf;AACJ,IAAA,UAAU,IAAI,SAAS,CAAC,KAAxB;AACA;;AAED,SAAO,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,MAApB,GAA6B,UAAU,GAAG,MAAM,CAAC,IAAP,CAAY,MAAZ,EAAoB,MAA9D,GAAuE,CAA9E;AACA,CARD;;AAUO,IAAM,aAAa;AAAA,sEAAG,iBAC5B,OAD4B,EAE5B,KAF4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIC,OAAO,CAAC,MAAR,CAAwC,uBAAxC,CAJD;;AAAA;AAItB,YAAA,cAJsB;AAAA,6CAMrB;AACN,cAAA,MAAM,EAAE,KAAK,CAAC,MADR;AAEN,cAAA,qBAAqB,EAAE,wBAAwB,CAAC,KAAK,CAAC,MAAP,CAFzC;AAGN,cAAA,cAAc,EAAE,cAAc,CAAC;AAHzB,aANqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAb,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAAM,OAAA,CAAA,aAAA,GAAa,aAAb","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getBlockStats = void 0;\nconst getAverageReceivedBlocks = (blocks) => {\n    let totalCount = 0;\n    for (const blockStat of Object.values(blocks)) {\n        totalCount += blockStat.count;\n    }\n    return Object.keys(blocks).length ? totalCount / Object.keys(blocks).length : 0;\n};\nconst getBlockStats = async (channel, state) => {\n    const connectedPeers = await channel.invoke('app:getConnectedPeers');\n    return {\n        blocks: state.blocks,\n        averageReceivedBlocks: getAverageReceivedBlocks(state.blocks),\n        connectedPeers: connectedPeers.length,\n    };\n};\nexports.getBlockStats = getBlockStats;\n//# sourceMappingURL=blocks.js.map"]},"metadata":{},"sourceType":"script"}