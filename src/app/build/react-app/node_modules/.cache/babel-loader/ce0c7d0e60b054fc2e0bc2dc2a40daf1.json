{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _slicedToArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FastChainSwitchingMechanism = void 0;\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar base_synchronizer_1 = require(\"./base_synchronizer\");\n\nvar utils_1 = require(\"./utils\");\n\nvar errors_1 = require(\"./errors\");\n\nvar FastChainSwitchingMechanism = /*#__PURE__*/function (_base_synchronizer_1$) {\n  _inherits(FastChainSwitchingMechanism, _base_synchronizer_1$);\n\n  var _super = _createSuper(FastChainSwitchingMechanism);\n\n  function FastChainSwitchingMechanism(_ref) {\n    var _this;\n\n    var logger = _ref.logger,\n        channel = _ref.channel,\n        chain = _ref.chain,\n        bft = _ref.bft,\n        processor = _ref.processor,\n        networkModule = _ref.networkModule;\n\n    _classCallCheck(this, FastChainSwitchingMechanism);\n\n    _this = _super.call(this, logger, channel, chain, networkModule);\n    _this._chain = chain;\n    _this.bft = bft;\n    _this.processor = processor;\n    return _this;\n  }\n\n  _createClass(FastChainSwitchingMechanism, [{\n    key: \"run\",\n    value: function () {\n      var _run = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(receivedBlock, peerId) {\n        var highestCommonBlock, blocks;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this._requestLastCommonBlock(peerId);\n\n              case 3:\n                highestCommonBlock = _context.sent;\n                _context.next = 6;\n                return this._queryBlocks(receivedBlock, highestCommonBlock, peerId);\n\n              case 6:\n                blocks = _context.sent;\n\n                this._validateBlocks(blocks, peerId);\n\n                _context.next = 10;\n                return this._switchChain(highestCommonBlock, blocks, peerId);\n\n              case 10:\n                _context.next = 24;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (!(_context.t0 instanceof errors_1.ApplyPenaltyAndAbortError)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                this._applyPenaltyAndRestartSync(_context.t0.peerId, receivedBlock, _context.t0.reason);\n\n                return _context.abrupt(\"return\");\n\n              case 17:\n                if (!(_context.t0 instanceof errors_1.RestartError)) {\n                  _context.next = 20;\n                  break;\n                }\n\n                this._restartSync(receivedBlock, _context.t0.reason);\n\n                return _context.abrupt(\"return\");\n\n              case 20:\n                if (!(_context.t0 instanceof errors_1.AbortError)) {\n                  _context.next = 23;\n                  break;\n                }\n\n                this._logger.info({\n                  err: _context.t0,\n                  reason: _context.t0.reason\n                }, \"Aborting synchronization mechanism with reason: \".concat(_context.t0.reason));\n\n                return _context.abrupt(\"return\");\n\n              case 23:\n                throw _context.t0;\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 12]]);\n      }));\n\n      function run(_x, _x2) {\n        return _run.apply(this, arguments);\n      }\n\n      return run;\n    }()\n  }, {\n    key: \"isValidFor\",\n    value: function () {\n      var _isValidFor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(receivedBlock, peerId) {\n        var lastBlock, twoRounds, generatorAddress, validators;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (peerId) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 2:\n                lastBlock = this._chain.lastBlock;\n                twoRounds = this._chain.numberOfValidators * 2;\n\n                if (!(Math.abs(receivedBlock.header.height - lastBlock.header.height) > twoRounds)) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 6:\n                generatorAddress = lisk_cryptography_1.getAddressFromPublicKey(receivedBlock.header.generatorPublicKey);\n                _context2.next = 9;\n                return this._chain.getValidators();\n\n              case 9:\n                validators = _context2.sent;\n                return _context2.abrupt(\"return\", validators.find(function (v) {\n                  return v.address.equals(generatorAddress) && v.isConsensusParticipant;\n                }) !== undefined);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function isValidFor(_x3, _x4) {\n        return _isValidFor.apply(this, arguments);\n      }\n\n      return isValidFor;\n    }()\n  }, {\n    key: \"_requestBlocksWithinIDs\",\n    value: function () {\n      var _requestBlocksWithinIDs2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(peerId, fromId, toId) {\n        var maxFailedAttempts, blocks, failedAttempts, lastFetchedID, chunkOfBlocks, _chunkOfBlocks$slice, _chunkOfBlocks$slice2, index;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                maxFailedAttempts = 10;\n                blocks = [];\n                failedAttempts = 0;\n                lastFetchedID = fromId;\n\n              case 4:\n                if (!(failedAttempts < maxFailedAttempts)) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                chunkOfBlocks = [];\n                _context3.prev = 6;\n                _context3.next = 9;\n                return this._getBlocksFromNetwork(peerId, lastFetchedID);\n\n              case 9:\n                chunkOfBlocks = _context3.sent;\n                _context3.next = 16;\n                break;\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](6);\n                failedAttempts += 1;\n                return _context3.abrupt(\"continue\", 4);\n\n              case 16:\n                chunkOfBlocks.sort(function (a, b) {\n                  return a.header.height - b.header.height;\n                });\n                blocks.push.apply(blocks, _toConsumableArray(chunkOfBlocks));\n                _chunkOfBlocks$slice = chunkOfBlocks.slice(-1);\n                _chunkOfBlocks$slice2 = _slicedToArray(_chunkOfBlocks$slice, 1);\n                lastFetchedID = _chunkOfBlocks$slice2[0].header.id;\n                index = blocks.findIndex(function (block) {\n                  return block.header.id.equals(toId);\n                });\n\n                if (!(index > -1)) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", blocks.splice(0, index + 1));\n\n              case 24:\n                _context3.next = 4;\n                break;\n\n              case 26:\n                return _context3.abrupt(\"return\", blocks);\n\n              case 27:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[6, 12]]);\n      }));\n\n      function _requestBlocksWithinIDs(_x5, _x6, _x7) {\n        return _requestBlocksWithinIDs2.apply(this, arguments);\n      }\n\n      return _requestBlocksWithinIDs;\n    }()\n  }, {\n    key: \"_queryBlocks\",\n    value: function () {\n      var _queryBlocks2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(receivedBlock, highestCommonBlock, peerId) {\n        var blocks;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (highestCommonBlock) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new errors_1.ApplyPenaltyAndAbortError(peerId, \"Peer didn't return a common block\");\n\n              case 2:\n                if (!(highestCommonBlock.height < this.bft.finalizedHeight)) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw new errors_1.ApplyPenaltyAndAbortError(peerId, \"Common block height \".concat(highestCommonBlock.height, \" is lower than the finalized height of the chain \").concat(this.bft.finalizedHeight));\n\n              case 4:\n                if (!(this._chain.lastBlock.header.height - highestCommonBlock.height > this._chain.numberOfValidators * 2 || receivedBlock.header.height - highestCommonBlock.height > this._chain.numberOfValidators * 2)) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new errors_1.AbortError(\"Height difference between both chains is higher than \".concat(this._chain.numberOfValidators * 2));\n\n              case 6:\n                this._logger.debug({\n                  peerId: peerId,\n                  fromBlockId: highestCommonBlock.id,\n                  toBlockId: receivedBlock.header.id\n                }, 'Requesting blocks within ID range from peer');\n\n                _context4.next = 9;\n                return this._requestBlocksWithinIDs(peerId, highestCommonBlock.id, receivedBlock.header.id);\n\n              case 9:\n                blocks = _context4.sent;\n\n                if (blocks.length) {\n                  _context4.next = 12;\n                  break;\n                }\n\n                throw new errors_1.ApplyPenaltyAndAbortError(peerId, \"Peer didn't return any requested block within IDs \".concat(highestCommonBlock.id.toString('hex'), \" and \").concat(receivedBlock.header.id.toString('hex')));\n\n              case 12:\n                return _context4.abrupt(\"return\", blocks);\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _queryBlocks(_x8, _x9, _x10) {\n        return _queryBlocks2.apply(this, arguments);\n      }\n\n      return _queryBlocks;\n    }()\n  }, {\n    key: \"_validateBlocks\",\n    value: function _validateBlocks(blocks, peerId) {\n      this._logger.debug({\n        blocks: blocks.map(function (block) {\n          return {\n            blockId: block.header.id,\n            height: block.header.height\n          };\n        })\n      }, 'Validating blocks');\n\n      try {\n        var _iterator = _createForOfIteratorHelper(blocks),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var block = _step.value;\n\n            this._logger.trace({\n              blockId: block.header.id,\n              height: block.header.height\n            }, 'Validating block');\n\n            this.processor.validate(block);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } catch (err) {\n        throw new errors_1.ApplyPenaltyAndAbortError(peerId, 'Block validation failed');\n      }\n\n      this._logger.debug('Successfully validated blocks');\n    }\n  }, {\n    key: \"_applyBlocks\",\n    value: function () {\n      var _applyBlocks2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(blocksToApply) {\n        var _iterator2, _step2, block;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _iterator2 = _createForOfIteratorHelper(blocksToApply);\n                _context5.prev = 2;\n\n                _iterator2.s();\n\n              case 4:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                block = _step2.value;\n\n                if (!this._stop) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 8:\n                this._logger.trace({\n                  blockId: block.header.id,\n                  height: block.header.height\n                }, 'Applying blocks');\n\n                _context5.next = 11;\n                return this.processor.processValidated(block);\n\n              case 11:\n                _context5.next = 4;\n                break;\n\n              case 13:\n                _context5.next = 18;\n                break;\n\n              case 15:\n                _context5.prev = 15;\n                _context5.t0 = _context5[\"catch\"](2);\n\n                _iterator2.e(_context5.t0);\n\n              case 18:\n                _context5.prev = 18;\n\n                _iterator2.f();\n\n                return _context5.finish(18);\n\n              case 21:\n                _context5.next = 26;\n                break;\n\n              case 23:\n                _context5.prev = 23;\n                _context5.t1 = _context5[\"catch\"](0);\n                throw new errors_1.BlockProcessingError();\n\n              case 26:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 23], [2, 15, 18, 21]]);\n      }));\n\n      function _applyBlocks(_x11) {\n        return _applyBlocks2.apply(this, arguments);\n      }\n\n      return _applyBlocks;\n    }()\n  }, {\n    key: \"_handleBlockProcessingFailure\",\n    value: function () {\n      var _handleBlockProcessingFailure2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(error, highestCommonBlock, peerId) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this._logger.error({\n                  err: error\n                }, 'Error while processing blocks');\n\n                this._logger.debug({\n                  height: highestCommonBlock.height\n                }, 'Deleting blocks after height');\n\n                _context6.next = 4;\n                return utils_1.deleteBlocksAfterHeight(this.processor, this._chain, this._logger, highestCommonBlock.height);\n\n              case 4:\n                this._logger.debug('Restoring blocks from temporary table');\n\n                _context6.next = 7;\n                return utils_1.restoreBlocks(this._chain, this.processor);\n\n              case 7:\n                throw new errors_1.ApplyPenaltyAndAbortError(peerId, 'Detected invalid block while processing list of requested blocks');\n\n              case 8:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _handleBlockProcessingFailure(_x12, _x13, _x14) {\n        return _handleBlockProcessingFailure2.apply(this, arguments);\n      }\n\n      return _handleBlockProcessingFailure;\n    }()\n  }, {\n    key: \"_switchChain\",\n    value: function () {\n      var _switchChain2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(highestCommonBlock, blocksToApply, peerId) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                this._logger.info('Switching chain');\n\n                this._logger.debug({\n                  height: highestCommonBlock.height\n                }, \"Deleting blocks after height \".concat(highestCommonBlock.height));\n\n                _context7.next = 4;\n                return utils_1.deleteBlocksAfterHeight(this.processor, this._chain, this._logger, highestCommonBlock.height, true);\n\n              case 4:\n                _context7.prev = 4;\n\n                this._logger.debug({\n                  blocks: blocksToApply.map(function (block) {\n                    return {\n                      blockId: block.header.id,\n                      height: block.header.height\n                    };\n                  })\n                }, 'Applying blocks');\n\n                _context7.next = 8;\n                return this._applyBlocks(blocksToApply);\n\n              case 8:\n                this._logger.info({\n                  currentHeight: this._chain.lastBlock.header.height,\n                  highestCommonBlockHeight: highestCommonBlock.height\n                }, 'Successfully switched chains. Node is now up to date');\n\n                _context7.next = 19;\n                break;\n\n              case 11:\n                _context7.prev = 11;\n                _context7.t0 = _context7[\"catch\"](4);\n\n                if (!(_context7.t0 instanceof errors_1.BlockProcessingError)) {\n                  _context7.next = 18;\n                  break;\n                }\n\n                _context7.next = 16;\n                return this._handleBlockProcessingFailure(_context7.t0, highestCommonBlock, peerId);\n\n              case 16:\n                _context7.next = 19;\n                break;\n\n              case 18:\n                throw _context7.t0;\n\n              case 19:\n                _context7.prev = 19;\n\n                this._logger.debug('Cleaning blocks temp table');\n\n                _context7.next = 23;\n                return utils_1.clearBlocksTempTable(this._chain);\n\n              case 23:\n                return _context7.finish(19);\n\n              case 24:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[4, 11, 19, 24]]);\n      }));\n\n      function _switchChain(_x15, _x16, _x17) {\n        return _switchChain2.apply(this, arguments);\n      }\n\n      return _switchChain;\n    }()\n  }, {\n    key: \"_computeLastTwoRoundsHeights\",\n    value: function _computeLastTwoRoundsHeights() {\n      var _this2 = this;\n\n      return new Array(Math.min(this._chain.numberOfValidators * 2, this._chain.lastBlock.header.height)).fill(0).map(function (_, index) {\n        return _this2._chain.lastBlock.header.height - index;\n      });\n    }\n  }, {\n    key: \"_requestLastCommonBlock\",\n    value: function () {\n      var _requestLastCommonBlock2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(peerId) {\n        var requestLimit, numberOfRequests, heightList, blockIds, commonBlock;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this._logger.debug({\n                  peerId: peerId\n                }, 'Requesting the last common block with peer');\n\n                requestLimit = 10;\n                numberOfRequests = 1;\n                heightList = this._computeLastTwoRoundsHeights();\n\n              case 4:\n                if (!(numberOfRequests < requestLimit)) {\n                  _context8.next = 20;\n                  break;\n                }\n\n                _context8.next = 7;\n                return this._chain.dataAccess.getBlockHeadersWithHeights(heightList);\n\n              case 7:\n                blockIds = _context8.sent.map(function (block) {\n                  return block.id;\n                });\n                _context8.prev = 8;\n                _context8.next = 11;\n                return this._getHighestCommonBlockFromNetwork(peerId, blockIds);\n\n              case 11:\n                commonBlock = _context8.sent;\n                return _context8.abrupt(\"return\", commonBlock);\n\n              case 15:\n                _context8.prev = 15;\n                _context8.t0 = _context8[\"catch\"](8);\n                numberOfRequests += 1;\n\n              case 18:\n                _context8.next = 4;\n                break;\n\n              case 20:\n                return _context8.abrupt(\"return\", undefined);\n\n              case 21:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[8, 15]]);\n      }));\n\n      function _requestLastCommonBlock(_x18) {\n        return _requestLastCommonBlock2.apply(this, arguments);\n      }\n\n      return _requestLastCommonBlock;\n    }()\n  }]);\n\n  return FastChainSwitchingMechanism;\n}(base_synchronizer_1.BaseSynchronizer);\n\nexports.FastChainSwitchingMechanism = FastChainSwitchingMechanism;","map":{"version":3,"sources":["../../../src/node/synchronizer/fast_chain_switching_mechanism.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FastChainSwitchingMechanism = void 0;\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst base_synchronizer_1 = require(\"./base_synchronizer\");\nconst utils_1 = require(\"./utils\");\nconst errors_1 = require(\"./errors\");\nclass FastChainSwitchingMechanism extends base_synchronizer_1.BaseSynchronizer {\n    constructor({ logger, channel, chain, bft, processor, networkModule, }) {\n        super(logger, channel, chain, networkModule);\n        this._chain = chain;\n        this.bft = bft;\n        this.processor = processor;\n    }\n    async run(receivedBlock, peerId) {\n        try {\n            const highestCommonBlock = await this._requestLastCommonBlock(peerId);\n            const blocks = await this._queryBlocks(receivedBlock, highestCommonBlock, peerId);\n            this._validateBlocks(blocks, peerId);\n            await this._switchChain(highestCommonBlock, blocks, peerId);\n        }\n        catch (error) {\n            if (error instanceof errors_1.ApplyPenaltyAndAbortError) {\n                this._applyPenaltyAndRestartSync(error.peerId, receivedBlock, error.reason);\n                return;\n            }\n            if (error instanceof errors_1.RestartError) {\n                this._restartSync(receivedBlock, error.reason);\n                return;\n            }\n            if (error instanceof errors_1.AbortError) {\n                this._logger.info({ err: error, reason: error.reason }, `Aborting synchronization mechanism with reason: ${error.reason}`);\n                return;\n            }\n            throw error;\n        }\n    }\n    async isValidFor(receivedBlock, peerId) {\n        if (!peerId) {\n            return false;\n        }\n        const { lastBlock } = this._chain;\n        const twoRounds = this._chain.numberOfValidators * 2;\n        if (Math.abs(receivedBlock.header.height - lastBlock.header.height) > twoRounds) {\n            return false;\n        }\n        const generatorAddress = lisk_cryptography_1.getAddressFromPublicKey(receivedBlock.header.generatorPublicKey);\n        const validators = await this._chain.getValidators();\n        return (validators.find(v => v.address.equals(generatorAddress) && v.isConsensusParticipant) !==\n            undefined);\n    }\n    async _requestBlocksWithinIDs(peerId, fromId, toId) {\n        const maxFailedAttempts = 10;\n        const blocks = [];\n        let failedAttempts = 0;\n        let lastFetchedID = fromId;\n        while (failedAttempts < maxFailedAttempts) {\n            let chunkOfBlocks = [];\n            try {\n                chunkOfBlocks = await this._getBlocksFromNetwork(peerId, lastFetchedID);\n            }\n            catch (error) {\n                failedAttempts += 1;\n                continue;\n            }\n            chunkOfBlocks.sort((a, b) => a.header.height - b.header.height);\n            blocks.push(...chunkOfBlocks);\n            [\n                {\n                    header: { id: lastFetchedID },\n                },\n            ] = chunkOfBlocks.slice(-1);\n            const index = blocks.findIndex(block => block.header.id.equals(toId));\n            if (index > -1) {\n                return blocks.splice(0, index + 1);\n            }\n        }\n        return blocks;\n    }\n    async _queryBlocks(receivedBlock, highestCommonBlock, peerId) {\n        if (!highestCommonBlock) {\n            throw new errors_1.ApplyPenaltyAndAbortError(peerId, \"Peer didn't return a common block\");\n        }\n        if (highestCommonBlock.height < this.bft.finalizedHeight) {\n            throw new errors_1.ApplyPenaltyAndAbortError(peerId, `Common block height ${highestCommonBlock.height} is lower than the finalized height of the chain ${this.bft.finalizedHeight}`);\n        }\n        if (this._chain.lastBlock.header.height - highestCommonBlock.height >\n            this._chain.numberOfValidators * 2 ||\n            receivedBlock.header.height - highestCommonBlock.height > this._chain.numberOfValidators * 2) {\n            throw new errors_1.AbortError(`Height difference between both chains is higher than ${this._chain.numberOfValidators * 2}`);\n        }\n        this._logger.debug({\n            peerId,\n            fromBlockId: highestCommonBlock.id,\n            toBlockId: receivedBlock.header.id,\n        }, 'Requesting blocks within ID range from peer');\n        const blocks = await this._requestBlocksWithinIDs(peerId, highestCommonBlock.id, receivedBlock.header.id);\n        if (!blocks.length) {\n            throw new errors_1.ApplyPenaltyAndAbortError(peerId, `Peer didn't return any requested block within IDs ${highestCommonBlock.id.toString('hex')} and ${receivedBlock.header.id.toString('hex')}`);\n        }\n        return blocks;\n    }\n    _validateBlocks(blocks, peerId) {\n        this._logger.debug({\n            blocks: blocks.map(block => ({\n                blockId: block.header.id,\n                height: block.header.height,\n            })),\n        }, 'Validating blocks');\n        try {\n            for (const block of blocks) {\n                this._logger.trace({\n                    blockId: block.header.id,\n                    height: block.header.height,\n                }, 'Validating block');\n                this.processor.validate(block);\n            }\n        }\n        catch (err) {\n            throw new errors_1.ApplyPenaltyAndAbortError(peerId, 'Block validation failed');\n        }\n        this._logger.debug('Successfully validated blocks');\n    }\n    async _applyBlocks(blocksToApply) {\n        try {\n            for (const block of blocksToApply) {\n                if (this._stop) {\n                    return;\n                }\n                this._logger.trace({\n                    blockId: block.header.id,\n                    height: block.header.height,\n                }, 'Applying blocks');\n                await this.processor.processValidated(block);\n            }\n        }\n        catch (e) {\n            throw new errors_1.BlockProcessingError();\n        }\n    }\n    async _handleBlockProcessingFailure(error, highestCommonBlock, peerId) {\n        this._logger.error({ err: error }, 'Error while processing blocks');\n        this._logger.debug({ height: highestCommonBlock.height }, 'Deleting blocks after height');\n        await utils_1.deleteBlocksAfterHeight(this.processor, this._chain, this._logger, highestCommonBlock.height);\n        this._logger.debug('Restoring blocks from temporary table');\n        await utils_1.restoreBlocks(this._chain, this.processor);\n        throw new errors_1.ApplyPenaltyAndAbortError(peerId, 'Detected invalid block while processing list of requested blocks');\n    }\n    async _switchChain(highestCommonBlock, blocksToApply, peerId) {\n        this._logger.info('Switching chain');\n        this._logger.debug({ height: highestCommonBlock.height }, `Deleting blocks after height ${highestCommonBlock.height}`);\n        await utils_1.deleteBlocksAfterHeight(this.processor, this._chain, this._logger, highestCommonBlock.height, true);\n        try {\n            this._logger.debug({\n                blocks: blocksToApply.map(block => ({\n                    blockId: block.header.id,\n                    height: block.header.height,\n                })),\n            }, 'Applying blocks');\n            await this._applyBlocks(blocksToApply);\n            this._logger.info({\n                currentHeight: this._chain.lastBlock.header.height,\n                highestCommonBlockHeight: highestCommonBlock.height,\n            }, 'Successfully switched chains. Node is now up to date');\n        }\n        catch (err) {\n            if (err instanceof errors_1.BlockProcessingError) {\n                await this._handleBlockProcessingFailure(err, highestCommonBlock, peerId);\n            }\n            else {\n                throw err;\n            }\n        }\n        finally {\n            this._logger.debug('Cleaning blocks temp table');\n            await utils_1.clearBlocksTempTable(this._chain);\n        }\n    }\n    _computeLastTwoRoundsHeights() {\n        return new Array(Math.min(this._chain.numberOfValidators * 2, this._chain.lastBlock.header.height))\n            .fill(0)\n            .map((_, index) => this._chain.lastBlock.header.height - index);\n    }\n    async _requestLastCommonBlock(peerId) {\n        this._logger.debug({ peerId }, 'Requesting the last common block with peer');\n        const requestLimit = 10;\n        let numberOfRequests = 1;\n        const heightList = this._computeLastTwoRoundsHeights();\n        while (numberOfRequests < requestLimit) {\n            const blockIds = (await this._chain.dataAccess.getBlockHeadersWithHeights(heightList)).map(block => block.id);\n            try {\n                const commonBlock = await this._getHighestCommonBlockFromNetwork(peerId, blockIds);\n                return commonBlock;\n            }\n            catch (error) {\n                numberOfRequests += 1;\n            }\n        }\n        return undefined;\n    }\n}\nexports.FastChainSwitchingMechanism = FastChainSwitchingMechanism;\n//# sourceMappingURL=fast_chain_switching_mechanism.js.map"]},"metadata":{},"sourceType":"script"}