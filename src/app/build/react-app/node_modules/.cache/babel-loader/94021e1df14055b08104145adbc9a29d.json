{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Account = void 0;\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar Account = /*#__PURE__*/function () {\n  function Account(channel, schemas) {\n    _classCallCheck(this, Account);\n\n    this._channel = channel;\n    this._schemas = schemas;\n  }\n\n  _createClass(Account, [{\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(address) {\n        var addressString, accountHex;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                addressString = Buffer.isBuffer(address) ? address.toString('hex') : address;\n                _context.next = 3;\n                return this._channel.invoke('app:getAccount', {\n                  address: addressString\n                });\n\n              case 3:\n                accountHex = _context.sent;\n                return _context.abrupt(\"return\", this.decode(Buffer.from(accountHex, 'hex')));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"encode\",\n    value: function encode(input) {\n      return lisk_codec_1.codec.encode(this._schemas.account, input);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(input) {\n      var inputBuffer = Buffer.isBuffer(input) ? input : Buffer.from(input, 'hex');\n      return lisk_codec_1.codec.decode(this._schemas.account, inputBuffer);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(account) {\n      return lisk_codec_1.codec.toJSON(this._schemas.account, account);\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(account) {\n      return lisk_codec_1.codec.fromJSON(this._schemas.account, account);\n    }\n  }]);\n\n  return Account;\n}();\n\nexports.Account = Account;","map":{"version":3,"sources":["../src/account.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAcA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;IAGa,O;AAIZ,mBAAmB,OAAnB,EAAqC,OAArC,EAA+D;AAAA;;AAC9D,SAAK,QAAL,GAAgB,OAAhB;AACA,SAAK,QAAL,GAAgB,OAAhB;AACA;;;;;0EAEM,iBAAU,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,gBAAA,aADA,GACwB,MAAM,CAAC,QAAP,CAAgB,OAAhB,IAA2B,OAAO,CAAC,QAAR,CAAiB,KAAjB,CAA3B,GAAqD,OAD7E;AAAA;AAAA,uBAE2B,KAAK,QAAL,CAAc,MAAd,CAAqB,gBAArB,EAAuC;AACvE,kBAAA,OAAO,EAAE;AAD8D,iBAAvC,CAF3B;;AAAA;AAEA,gBAAA,UAFA;AAAA,iDAMC,KAAK,MAAL,CAAY,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,KAAxB,CAAZ,CAND;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WASA,gBAAO,KAAP,EAAqC;AAC3C,aAAO,YAAA,CAAA,KAAA,CAAM,MAAN,CAAa,KAAK,QAAL,CAAc,OAA3B,EAAoC,KAApC,CAAP;AACA;;;WAEM,gBAAO,KAAP,EAA6B;AACnC,UAAM,WAAW,GAAW,MAAM,CAAC,QAAP,CAAgB,KAAhB,IAAyB,KAAzB,GAAiC,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,KAAnB,CAA7D;AACA,aAAO,YAAA,CAAA,KAAA,CAAM,MAAN,CAAa,KAAK,QAAL,CAAc,OAA3B,EAAoC,WAApC,CAAP;AACA;;;WAEM,gBAAO,OAAP,EAAuC;AAC7C,aAAO,YAAA,CAAA,KAAA,CAAM,MAAN,CAAa,KAAK,QAAL,CAAc,OAA3B,EAAoC,OAApC,CAAP;AACA;;;WAEM,kBAAS,OAAT,EAAyC;AAC/C,aAAO,YAAA,CAAA,KAAA,CAAM,QAAN,CAAe,KAAK,QAAL,CAAc,OAA7B,EAAsC,OAAtC,CAAP;AACA;;;;;;AAjCF,OAAA,CAAA,OAAA,GAAA,OAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Account = void 0;\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nclass Account {\n    constructor(channel, schemas) {\n        this._channel = channel;\n        this._schemas = schemas;\n    }\n    async get(address) {\n        const addressString = Buffer.isBuffer(address) ? address.toString('hex') : address;\n        const accountHex = await this._channel.invoke('app:getAccount', {\n            address: addressString,\n        });\n        return this.decode(Buffer.from(accountHex, 'hex'));\n    }\n    encode(input) {\n        return lisk_codec_1.codec.encode(this._schemas.account, input);\n    }\n    decode(input) {\n        const inputBuffer = Buffer.isBuffer(input) ? input : Buffer.from(input, 'hex');\n        return lisk_codec_1.codec.decode(this._schemas.account, inputBuffer);\n    }\n    toJSON(account) {\n        return lisk_codec_1.codec.toJSON(this._schemas.account, account);\n    }\n    fromJSON(account) {\n        return lisk_codec_1.codec.fromJSON(this._schemas.account, account);\n    }\n}\nexports.Account = Account;\n//# sourceMappingURL=account.js.map"]},"metadata":{},"sourceType":"script"}