{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _taggedTemplateLiteral = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23, _templateObject24, _templateObject25, _templateObject26, _templateObject27, _templateObject28, _templateObject29, _templateObject30, _templateObject31, _templateObject32, _templateObject33;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;\n\nvar rules_1 = require(\"../rules\");\n\nvar applicability_1 = require(\"./applicability\");\n\nvar errors_1 = require(\"../errors\");\n\nvar codegen_1 = require(\"../codegen\");\n\nvar util_1 = require(\"../util\");\n\nvar DataType;\n\n(function (DataType) {\n  DataType[DataType[\"Correct\"] = 0] = \"Correct\";\n  DataType[DataType[\"Wrong\"] = 1] = \"Wrong\";\n})(DataType = exports.DataType || (exports.DataType = {}));\n\nfunction getSchemaTypes(schema) {\n  var types = getJSONTypes(schema.type);\n  var hasNull = types.includes(\"null\");\n\n  if (hasNull) {\n    if (schema.nullable === false) throw new Error(\"type: null contradicts nullable: false\");\n  } else {\n    if (!types.length && schema.nullable !== undefined) {\n      throw new Error('\"nullable\" cannot be used without \"type\"');\n    }\n\n    if (schema.nullable === true) types.push(\"null\");\n  }\n\n  return types;\n}\n\nexports.getSchemaTypes = getSchemaTypes;\n\nfunction getJSONTypes(ts) {\n  var types = Array.isArray(ts) ? ts : ts ? [ts] : [];\n  if (types.every(rules_1.isJSONType)) return types;\n  throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"));\n}\n\nexports.getJSONTypes = getJSONTypes;\n\nfunction coerceAndCheckDataType(it, types) {\n  var gen = it.gen,\n      data = it.data,\n      opts = it.opts;\n  var coerceTo = coerceToTypes(types, opts.coerceTypes);\n  var checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && applicability_1.schemaHasRulesForType(it, types[0]));\n\n  if (checkTypes) {\n    var wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);\n    gen.if(wrongType, function () {\n      if (coerceTo.length) coerceData(it, types, coerceTo);else reportTypeError(it);\n    });\n  }\n\n  return checkTypes;\n}\n\nexports.coerceAndCheckDataType = coerceAndCheckDataType;\nvar COERCIBLE = new Set([\"string\", \"number\", \"integer\", \"boolean\", \"null\"]);\n\nfunction coerceToTypes(types, coerceTypes) {\n  return coerceTypes ? types.filter(function (t) {\n    return COERCIBLE.has(t) || coerceTypes === \"array\" && t === \"array\";\n  }) : [];\n}\n\nfunction coerceData(it, types, coerceTo) {\n  var gen = it.gen,\n      data = it.data,\n      opts = it.opts;\n  var dataType = gen.let(\"dataType\", codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"typeof \", \"\"])), data));\n  var coerced = gen.let(\"coerced\", codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"undefined\"]))));\n\n  if (opts.coerceTypes === \"array\") {\n    gen.if(codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\", \" == 'object' && Array.isArray(\", \") && \", \".length == 1\"])), dataType, data, data), function () {\n      return gen.assign(data, codegen_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \"[0]\"])), data)).assign(dataType, codegen_1._(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"typeof \", \"\"])), data)).if(checkDataTypes(types, data, opts.strictNumbers), function () {\n        return gen.assign(coerced, data);\n      });\n    });\n  }\n\n  gen.if(codegen_1._(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\", \" !== undefined\"])), coerced));\n\n  var _iterator = _createForOfIteratorHelper(coerceTo),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var t = _step.value;\n\n      if (COERCIBLE.has(t) || t === \"array\" && opts.coerceTypes === \"array\") {\n        coerceSpecificType(t);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  gen.else();\n  reportTypeError(it);\n  gen.endIf();\n  gen.if(codegen_1._(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\", \" !== undefined\"])), coerced), function () {\n    gen.assign(data, coerced);\n    assignParentData(it, coerced);\n  });\n\n  function coerceSpecificType(t) {\n    switch (t) {\n      case \"string\":\n        gen.elseIf(codegen_1._(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\", \" == \\\"number\\\" || \", \" == \\\"boolean\\\"\"])), dataType, dataType)).assign(coerced, codegen_1._(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\\\"\\\" + \", \"\"])), data)).elseIf(codegen_1._(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\", \" === null\"])), data)).assign(coerced, codegen_1._(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"\\\"\\\"\"]))));\n        return;\n\n      case \"number\":\n        gen.elseIf(codegen_1._(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"\", \" == \\\"boolean\\\" || \", \" === null\\n              || (\", \" == \\\"string\\\" && \", \" && \", \" == +\", \")\"])), dataType, data, dataType, data, data, data)).assign(coerced, codegen_1._(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral([\"+\", \"\"])), data));\n        return;\n\n      case \"integer\":\n        gen.elseIf(codegen_1._(_templateObject14 || (_templateObject14 = _taggedTemplateLiteral([\"\", \" === \\\"boolean\\\" || \", \" === null\\n              || (\", \" === \\\"string\\\" && \", \" && \", \" == +\", \" && !(\", \" % 1))\"])), dataType, data, dataType, data, data, data, data)).assign(coerced, codegen_1._(_templateObject15 || (_templateObject15 = _taggedTemplateLiteral([\"+\", \"\"])), data));\n        return;\n\n      case \"boolean\":\n        gen.elseIf(codegen_1._(_templateObject16 || (_templateObject16 = _taggedTemplateLiteral([\"\", \" === \\\"false\\\" || \", \" === 0 || \", \" === null\"])), data, data, data)).assign(coerced, false).elseIf(codegen_1._(_templateObject17 || (_templateObject17 = _taggedTemplateLiteral([\"\", \" === \\\"true\\\" || \", \" === 1\"])), data, data)).assign(coerced, true);\n        return;\n\n      case \"null\":\n        gen.elseIf(codegen_1._(_templateObject18 || (_templateObject18 = _taggedTemplateLiteral([\"\", \" === \\\"\\\" || \", \" === 0 || \", \" === false\"])), data, data, data));\n        gen.assign(coerced, null);\n        return;\n\n      case \"array\":\n        gen.elseIf(codegen_1._(_templateObject19 || (_templateObject19 = _taggedTemplateLiteral([\"\", \" === \\\"string\\\" || \", \" === \\\"number\\\"\\n              || \", \" === \\\"boolean\\\" || \", \" === null\"])), dataType, dataType, dataType, data)).assign(coerced, codegen_1._(_templateObject20 || (_templateObject20 = _taggedTemplateLiteral([\"[\", \"]\"])), data));\n    }\n  }\n}\n\nfunction assignParentData(_ref, expr) {\n  var gen = _ref.gen,\n      parentData = _ref.parentData,\n      parentDataProperty = _ref.parentDataProperty;\n  // TODO use gen.property\n  gen.if(codegen_1._(_templateObject21 || (_templateObject21 = _taggedTemplateLiteral([\"\", \" !== undefined\"])), parentData), function () {\n    return gen.assign(codegen_1._(_templateObject22 || (_templateObject22 = _taggedTemplateLiteral([\"\", \"[\", \"]\"])), parentData, parentDataProperty), expr);\n  });\n}\n\nfunction checkDataType(dataType, data, strictNums) {\n  var correct = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DataType.Correct;\n  var EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;\n  var cond;\n\n  switch (dataType) {\n    case \"null\":\n      return codegen_1._(_templateObject23 || (_templateObject23 = _taggedTemplateLiteral([\"\", \" \", \" null\"])), data, EQ);\n\n    case \"array\":\n      cond = codegen_1._(_templateObject24 || (_templateObject24 = _taggedTemplateLiteral([\"Array.isArray(\", \")\"])), data);\n      break;\n\n    case \"object\":\n      cond = codegen_1._(_templateObject25 || (_templateObject25 = _taggedTemplateLiteral([\"\", \" && typeof \", \" == \\\"object\\\" && !Array.isArray(\", \")\"])), data, data, data);\n      break;\n\n    case \"integer\":\n      cond = numCond(codegen_1._(_templateObject26 || (_templateObject26 = _taggedTemplateLiteral([\"!(\", \" % 1) && !isNaN(\", \")\"])), data, data));\n      break;\n\n    case \"number\":\n      cond = numCond();\n      break;\n\n    default:\n      return codegen_1._(_templateObject27 || (_templateObject27 = _taggedTemplateLiteral([\"typeof \", \" \", \" \", \"\"])), data, EQ, dataType);\n  }\n\n  return correct === DataType.Correct ? cond : codegen_1.not(cond);\n\n  function numCond() {\n    var _cond = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : codegen_1.nil;\n\n    return codegen_1.and(codegen_1._(_templateObject28 || (_templateObject28 = _taggedTemplateLiteral([\"typeof \", \" == \\\"number\\\"\"])), data), _cond, strictNums ? codegen_1._(_templateObject29 || (_templateObject29 = _taggedTemplateLiteral([\"isFinite(\", \")\"])), data) : codegen_1.nil);\n  }\n}\n\nexports.checkDataType = checkDataType;\n\nfunction checkDataTypes(dataTypes, data, strictNums, correct) {\n  if (dataTypes.length === 1) {\n    return checkDataType(dataTypes[0], data, strictNums, correct);\n  }\n\n  var cond;\n  var types = util_1.toHash(dataTypes);\n\n  if (types.array && types.object) {\n    var notObj = codegen_1._(_templateObject30 || (_templateObject30 = _taggedTemplateLiteral([\"typeof \", \" != \\\"object\\\"\"])), data);\n\n    cond = types.null ? notObj : codegen_1._(_templateObject31 || (_templateObject31 = _taggedTemplateLiteral([\"!\", \" || \", \"\"])), data, notObj);\n    delete types.null;\n    delete types.array;\n    delete types.object;\n  } else {\n    cond = codegen_1.nil;\n  }\n\n  if (types.number) delete types.integer;\n\n  for (var t in types) {\n    cond = codegen_1.and(cond, checkDataType(t, data, strictNums, correct));\n  }\n\n  return cond;\n}\n\nexports.checkDataTypes = checkDataTypes;\nvar typeError = {\n  message: function message(_ref2) {\n    var schema = _ref2.schema;\n    return \"must be \".concat(schema);\n  },\n  params: function params(_ref3) {\n    var schema = _ref3.schema,\n        schemaValue = _ref3.schemaValue;\n    return typeof schema == \"string\" ? codegen_1._(_templateObject32 || (_templateObject32 = _taggedTemplateLiteral([\"{type: \", \"}\"])), schema) : codegen_1._(_templateObject33 || (_templateObject33 = _taggedTemplateLiteral([\"{type: \", \"}\"])), schemaValue);\n  }\n};\n\nfunction reportTypeError(it) {\n  var cxt = getTypeErrorContext(it);\n  errors_1.reportError(cxt, typeError);\n}\n\nexports.reportTypeError = reportTypeError;\n\nfunction getTypeErrorContext(it) {\n  var gen = it.gen,\n      data = it.data,\n      schema = it.schema;\n  var schemaCode = util_1.schemaRefOrVal(it, schema, \"type\");\n  return {\n    gen: gen,\n    keyword: \"type\",\n    data: data,\n    schema: schema.type,\n    schemaCode: schemaCode,\n    schemaValue: schemaCode,\n    parentSchema: schema,\n    params: {},\n    it: it\n  };\n}","map":{"version":3,"sources":["../../../lib/compile/validate/dataType.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;\nconst rules_1 = require(\"../rules\");\nconst applicability_1 = require(\"./applicability\");\nconst errors_1 = require(\"../errors\");\nconst codegen_1 = require(\"../codegen\");\nconst util_1 = require(\"../util\");\nvar DataType;\n(function (DataType) {\n    DataType[DataType[\"Correct\"] = 0] = \"Correct\";\n    DataType[DataType[\"Wrong\"] = 1] = \"Wrong\";\n})(DataType = exports.DataType || (exports.DataType = {}));\nfunction getSchemaTypes(schema) {\n    const types = getJSONTypes(schema.type);\n    const hasNull = types.includes(\"null\");\n    if (hasNull) {\n        if (schema.nullable === false)\n            throw new Error(\"type: null contradicts nullable: false\");\n    }\n    else {\n        if (!types.length && schema.nullable !== undefined) {\n            throw new Error('\"nullable\" cannot be used without \"type\"');\n        }\n        if (schema.nullable === true)\n            types.push(\"null\");\n    }\n    return types;\n}\nexports.getSchemaTypes = getSchemaTypes;\nfunction getJSONTypes(ts) {\n    const types = Array.isArray(ts) ? ts : ts ? [ts] : [];\n    if (types.every(rules_1.isJSONType))\n        return types;\n    throw new Error(\"type must be JSONType or JSONType[]: \" + types.join(\",\"));\n}\nexports.getJSONTypes = getJSONTypes;\nfunction coerceAndCheckDataType(it, types) {\n    const { gen, data, opts } = it;\n    const coerceTo = coerceToTypes(types, opts.coerceTypes);\n    const checkTypes = types.length > 0 &&\n        !(coerceTo.length === 0 && types.length === 1 && applicability_1.schemaHasRulesForType(it, types[0]));\n    if (checkTypes) {\n        const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);\n        gen.if(wrongType, () => {\n            if (coerceTo.length)\n                coerceData(it, types, coerceTo);\n            else\n                reportTypeError(it);\n        });\n    }\n    return checkTypes;\n}\nexports.coerceAndCheckDataType = coerceAndCheckDataType;\nconst COERCIBLE = new Set([\"string\", \"number\", \"integer\", \"boolean\", \"null\"]);\nfunction coerceToTypes(types, coerceTypes) {\n    return coerceTypes\n        ? types.filter((t) => COERCIBLE.has(t) || (coerceTypes === \"array\" && t === \"array\"))\n        : [];\n}\nfunction coerceData(it, types, coerceTo) {\n    const { gen, data, opts } = it;\n    const dataType = gen.let(\"dataType\", codegen_1._ `typeof ${data}`);\n    const coerced = gen.let(\"coerced\", codegen_1._ `undefined`);\n    if (opts.coerceTypes === \"array\") {\n        gen.if(codegen_1._ `${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen\n            .assign(data, codegen_1._ `${data}[0]`)\n            .assign(dataType, codegen_1._ `typeof ${data}`)\n            .if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));\n    }\n    gen.if(codegen_1._ `${coerced} !== undefined`);\n    for (const t of coerceTo) {\n        if (COERCIBLE.has(t) || (t === \"array\" && opts.coerceTypes === \"array\")) {\n            coerceSpecificType(t);\n        }\n    }\n    gen.else();\n    reportTypeError(it);\n    gen.endIf();\n    gen.if(codegen_1._ `${coerced} !== undefined`, () => {\n        gen.assign(data, coerced);\n        assignParentData(it, coerced);\n    });\n    function coerceSpecificType(t) {\n        switch (t) {\n            case \"string\":\n                gen\n                    .elseIf(codegen_1._ `${dataType} == \"number\" || ${dataType} == \"boolean\"`)\n                    .assign(coerced, codegen_1._ `\"\" + ${data}`)\n                    .elseIf(codegen_1._ `${data} === null`)\n                    .assign(coerced, codegen_1._ `\"\"`);\n                return;\n            case \"number\":\n                gen\n                    .elseIf(codegen_1._ `${dataType} == \"boolean\" || ${data} === null\n              || (${dataType} == \"string\" && ${data} && ${data} == +${data})`)\n                    .assign(coerced, codegen_1._ `+${data}`);\n                return;\n            case \"integer\":\n                gen\n                    .elseIf(codegen_1._ `${dataType} === \"boolean\" || ${data} === null\n              || (${dataType} === \"string\" && ${data} && ${data} == +${data} && !(${data} % 1))`)\n                    .assign(coerced, codegen_1._ `+${data}`);\n                return;\n            case \"boolean\":\n                gen\n                    .elseIf(codegen_1._ `${data} === \"false\" || ${data} === 0 || ${data} === null`)\n                    .assign(coerced, false)\n                    .elseIf(codegen_1._ `${data} === \"true\" || ${data} === 1`)\n                    .assign(coerced, true);\n                return;\n            case \"null\":\n                gen.elseIf(codegen_1._ `${data} === \"\" || ${data} === 0 || ${data} === false`);\n                gen.assign(coerced, null);\n                return;\n            case \"array\":\n                gen\n                    .elseIf(codegen_1._ `${dataType} === \"string\" || ${dataType} === \"number\"\n              || ${dataType} === \"boolean\" || ${data} === null`)\n                    .assign(coerced, codegen_1._ `[${data}]`);\n        }\n    }\n}\nfunction assignParentData({ gen, parentData, parentDataProperty }, expr) {\n    // TODO use gen.property\n    gen.if(codegen_1._ `${parentData} !== undefined`, () => gen.assign(codegen_1._ `${parentData}[${parentDataProperty}]`, expr));\n}\nfunction checkDataType(dataType, data, strictNums, correct = DataType.Correct) {\n    const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;\n    let cond;\n    switch (dataType) {\n        case \"null\":\n            return codegen_1._ `${data} ${EQ} null`;\n        case \"array\":\n            cond = codegen_1._ `Array.isArray(${data})`;\n            break;\n        case \"object\":\n            cond = codegen_1._ `${data} && typeof ${data} == \"object\" && !Array.isArray(${data})`;\n            break;\n        case \"integer\":\n            cond = numCond(codegen_1._ `!(${data} % 1) && !isNaN(${data})`);\n            break;\n        case \"number\":\n            cond = numCond();\n            break;\n        default:\n            return codegen_1._ `typeof ${data} ${EQ} ${dataType}`;\n    }\n    return correct === DataType.Correct ? cond : codegen_1.not(cond);\n    function numCond(_cond = codegen_1.nil) {\n        return codegen_1.and(codegen_1._ `typeof ${data} == \"number\"`, _cond, strictNums ? codegen_1._ `isFinite(${data})` : codegen_1.nil);\n    }\n}\nexports.checkDataType = checkDataType;\nfunction checkDataTypes(dataTypes, data, strictNums, correct) {\n    if (dataTypes.length === 1) {\n        return checkDataType(dataTypes[0], data, strictNums, correct);\n    }\n    let cond;\n    const types = util_1.toHash(dataTypes);\n    if (types.array && types.object) {\n        const notObj = codegen_1._ `typeof ${data} != \"object\"`;\n        cond = types.null ? notObj : codegen_1._ `!${data} || ${notObj}`;\n        delete types.null;\n        delete types.array;\n        delete types.object;\n    }\n    else {\n        cond = codegen_1.nil;\n    }\n    if (types.number)\n        delete types.integer;\n    for (const t in types)\n        cond = codegen_1.and(cond, checkDataType(t, data, strictNums, correct));\n    return cond;\n}\nexports.checkDataTypes = checkDataTypes;\nconst typeError = {\n    message: ({ schema }) => `must be ${schema}`,\n    params: ({ schema, schemaValue }) => typeof schema == \"string\" ? codegen_1._ `{type: ${schema}}` : codegen_1._ `{type: ${schemaValue}}`,\n};\nfunction reportTypeError(it) {\n    const cxt = getTypeErrorContext(it);\n    errors_1.reportError(cxt, typeError);\n}\nexports.reportTypeError = reportTypeError;\nfunction getTypeErrorContext(it) {\n    const { gen, data, schema } = it;\n    const schemaCode = util_1.schemaRefOrVal(it, schema, \"type\");\n    return {\n        gen,\n        keyword: \"type\",\n        data,\n        schema: schema.type,\n        schemaCode,\n        schemaValue: schemaCode,\n        parentSchema: schema,\n        params: {},\n        it,\n    };\n}\n//# sourceMappingURL=dataType.js.map"]},"metadata":{},"sourceType":"script"}