{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getVoters = void 0;\n\nvar db_1 = require(\"../db\");\n\nvar getVoters = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(channel, codec, db) {\n    var forgersList, forgerAccounts, result, _iterator, _step, account, forgerInfo;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return channel.invoke('app:getForgingStatus');\n\n          case 2:\n            forgersList = _context.sent;\n            _context.next = 5;\n            return channel.invoke('app:getAccounts', {\n              address: forgersList.map(function (forger) {\n                return forger.address;\n              })\n            });\n\n          case 5:\n            forgerAccounts = _context.sent.map(function (encodedAccount) {\n              return codec.decodeAccount(encodedAccount);\n            });\n            result = [];\n            _iterator = _createForOfIteratorHelper(forgerAccounts);\n            _context.prev = 8;\n\n            _iterator.s();\n\n          case 10:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 18;\n              break;\n            }\n\n            account = _step.value;\n            _context.next = 14;\n            return db_1.getForgerInfo(db, Buffer.from(account.address, 'hex').toString('binary'));\n\n          case 14:\n            forgerInfo = _context.sent;\n            result.push({\n              address: account.address,\n              username: account.dpos.delegate.username,\n              totalVotesReceived: account.dpos.delegate.totalVotesReceived,\n              voters: forgerInfo.votesReceived.map(function (vote) {\n                return {\n                  address: vote.address.toString('hex'),\n                  amount: vote.amount.toString()\n                };\n              })\n            });\n\n          case 16:\n            _context.next = 10;\n            break;\n\n          case 18:\n            _context.next = 23;\n            break;\n\n          case 20:\n            _context.prev = 20;\n            _context.t0 = _context[\"catch\"](8);\n\n            _iterator.e(_context.t0);\n\n          case 23:\n            _context.prev = 23;\n\n            _iterator.f();\n\n            return _context.finish(23);\n\n          case 26:\n            return _context.abrupt(\"return\", result);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[8, 20, 23, 26]]);\n  }));\n\n  return function getVoters(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.getVoters = getVoters;","map":{"version":3,"sources":["../../src/controllers/voters.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAiBA,IAAA,IAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAYO,IAAM,SAAS;AAAA,sEAAG,iBACxB,OADwB,EAExB,KAFwB,EAGxB,EAHwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKE,OAAO,CAAC,MAAR,CAAyB,sBAAzB,CALF;;AAAA;AAKlB,YAAA,WALkB;AAAA;AAAA,mBAOjB,OAAO,CAAC,MAAR,CAAyB,iBAAzB,EAA4C;AACjD,cAAA,OAAO,EAAE,WAAW,CAAC,GAAZ,CAAgB,UAAA,MAAM;AAAA,uBAAI,MAAM,CAAC,OAAX;AAAA,eAAtB;AADwC,aAA5C,CAPiB;;AAAA;AAMlB,YAAA,cANkB,iBAUtB,GAVsB,CAUlB,UAAA,cAAc;AAAA,qBAAI,KAAK,CAAC,aAAN,CAAqC,cAArC,CAAJ;AAAA,aAVI;AAYlB,YAAA,MAZkB,GAYA,EAZA;AAAA,mDAaF,cAbE;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAab,YAAA,OAba;AAAA;AAAA,mBAcE,IAAA,CAAA,aAAA,CACxB,EADwB,EAExB,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,OAApB,EAA6B,KAA7B,EAAoC,QAApC,CAA6C,QAA7C,CAFwB,CAdF;;AAAA;AAcjB,YAAA,UAdiB;AAmBvB,YAAA,MAAM,CAAC,IAAP,CAAY;AACX,cAAA,OAAO,EAAE,OAAO,CAAC,OADN;AAEX,cAAA,QAAQ,EAAE,OAAO,CAAC,IAAR,CAAa,QAAb,CAAsB,QAFrB;AAGX,cAAA,kBAAkB,EAAE,OAAO,CAAC,IAAR,CAAa,QAAb,CAAsB,kBAH/B;AAIX,cAAA,MAAM,EAAE,UAAU,CAAC,aAAX,CAAyB,GAAzB,CAA6B,UAAA,IAAI;AAAA,uBAAK;AAC7C,kBAAA,OAAO,EAAE,IAAI,CAAC,OAAL,CAAa,QAAb,CAAsB,KAAtB,CADoC;AAE7C,kBAAA,MAAM,EAAE,IAAI,CAAC,MAAL,CAAY,QAAZ;AAFqC,iBAAL;AAAA,eAAjC;AAJG,aAAZ;;AAnBuB;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA,6CA8BjB,MA9BiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAT,SAAS;AAAA;AAAA;AAAA,GAAf;;AAAM,OAAA,CAAA,SAAA,GAAS,SAAT","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getVoters = void 0;\nconst db_1 = require(\"../db\");\nconst getVoters = async (channel, codec, db) => {\n    const forgersList = await channel.invoke('app:getForgingStatus');\n    const forgerAccounts = (await channel.invoke('app:getAccounts', {\n        address: forgersList.map(forger => forger.address),\n    })).map(encodedAccount => codec.decodeAccount(encodedAccount));\n    const result = [];\n    for (const account of forgerAccounts) {\n        const forgerInfo = await db_1.getForgerInfo(db, Buffer.from(account.address, 'hex').toString('binary'));\n        result.push({\n            address: account.address,\n            username: account.dpos.delegate.username,\n            totalVotesReceived: account.dpos.delegate.totalVotesReceived,\n            voters: forgerInfo.votesReceived.map(vote => ({\n                address: vote.address.toString('hex'),\n                amount: vote.amount.toString(),\n            })),\n        });\n    }\n    return result;\n};\nexports.getVoters = getVoters;\n//# sourceMappingURL=voters.js.map"]},"metadata":{},"sourceType":"script"}