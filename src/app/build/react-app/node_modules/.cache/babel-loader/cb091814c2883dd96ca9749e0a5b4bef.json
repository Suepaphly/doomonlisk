{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.P2P = void 0;\n\nvar events_1 = require(\"events\");\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nvar constants_1 = require(\"./constants\");\n\nvar errors_1 = require(\"./errors\");\n\nvar events_2 = require(\"./events\");\n\nvar peer_book_1 = require(\"./peer_book\");\n\nvar peer_pool_1 = require(\"./peer_pool\");\n\nvar peer_server_1 = require(\"./peer_server\");\n\nvar utils_1 = require(\"./utils\");\n\nvar schema_1 = require(\"./schema\");\n\nvar codec_1 = require(\"./utils/codec\");\n\nvar validate_1 = require(\"./utils/validate\");\n\nvar createPeerPoolConfig = function createPeerPoolConfig(config, peerBook) {\n  return {\n    hostPort: config.port,\n    connectTimeout: config.connectTimeout,\n    ackTimeout: config.ackTimeout,\n    wsMaxPayload: config.wsMaxPayload ? config.wsMaxPayload : constants_1.DEFAULT_WS_MAX_PAYLOAD,\n    peerSelectionForSend: config.peerSelectionForSend ? config.peerSelectionForSend : utils_1.selectPeersForSend,\n    peerSelectionForRequest: config.peerSelectionForRequest ? config.peerSelectionForRequest : utils_1.selectPeersForRequest,\n    peerSelectionForConnection: config.peerSelectionForConnection ? config.peerSelectionForConnection : utils_1.selectPeersForConnection,\n    sendPeerLimit: config.sendPeerLimit === undefined ? constants_1.DEFAULT_SEND_PEER_LIMIT : config.sendPeerLimit,\n    peerBanTime: config.peerBanTime ? config.peerBanTime : constants_1.DEFAULT_BAN_TIME,\n    maxOutboundConnections: config.maxOutboundConnections === undefined ? constants_1.DEFAULT_MAX_OUTBOUND_CONNECTIONS : config.maxOutboundConnections,\n    maxInboundConnections: config.maxInboundConnections === undefined ? constants_1.DEFAULT_MAX_INBOUND_CONNECTIONS : config.maxInboundConnections,\n    maxPeerDiscoveryResponseLength: config.maxPeerDiscoveryResponseLength === undefined ? constants_1.DEFAULT_MAX_PEER_DISCOVERY_RESPONSE_LENGTH : config.maxPeerDiscoveryResponseLength,\n    maxPeerInfoSize: config.maxPeerInfoSize ? config.maxPeerInfoSize : constants_1.DEFAULT_MAX_PEER_INFO_SIZE,\n    outboundShuffleInterval: config.outboundShuffleInterval ? config.outboundShuffleInterval : constants_1.DEFAULT_OUTBOUND_SHUFFLE_INTERVAL,\n    netgroupProtectionRatio: typeof config.netgroupProtectionRatio === 'number' ? config.netgroupProtectionRatio : constants_1.DEFAULT_PEER_PROTECTION_FOR_NETGROUP,\n    latencyProtectionRatio: typeof config.latencyProtectionRatio === 'number' ? config.latencyProtectionRatio : constants_1.DEFAULT_PEER_PROTECTION_FOR_LATENCY,\n    productivityProtectionRatio: typeof config.productivityProtectionRatio === 'number' ? config.productivityProtectionRatio : constants_1.DEFAULT_PEER_PROTECTION_FOR_USEFULNESS,\n    longevityProtectionRatio: typeof config.longevityProtectionRatio === 'number' ? config.longevityProtectionRatio : constants_1.DEFAULT_PEER_PROTECTION_FOR_LONGEVITY,\n    wsMaxMessageRate: typeof config.wsMaxMessageRate === 'number' ? config.wsMaxMessageRate : constants_1.DEFAULT_WS_MAX_MESSAGE_RATE,\n    wsMaxMessageRatePenalty: typeof config.wsMaxMessageRatePenalty === 'number' ? config.wsMaxMessageRatePenalty : constants_1.DEFAULT_WS_MAX_MESSAGE_RATE_PENALTY,\n    rateCalculationInterval: typeof config.rateCalculationInterval === 'number' ? config.rateCalculationInterval : constants_1.DEFAULT_RATE_CALCULATION_INTERVAL,\n    peerStatusMessageRate: typeof config.peerStatusMessageRate === 'number' ? config.peerStatusMessageRate : constants_1.DEFAULT_PEER_STATUS_MESSAGE_RATE,\n    secret: config.secret ? config.secret : constants_1.DEFAULT_RANDOM_SECRET,\n    peerBook: peerBook,\n    rpcSchemas: config.customNodeInfoSchema ? {\n      nodeInfo: schema_1.mergeCustomSchema(schema_1.nodeInfoSchema, config.customNodeInfoSchema),\n      peerInfo: schema_1.peerInfoSchema,\n      peerRequestResponse: schema_1.peerRequestResponseSchema\n    } : schema_1.defaultRPCSchemas\n  };\n};\n\nvar P2P = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(P2P, _events_1$EventEmitte);\n\n  var _super = _createSuper(P2P);\n\n  function P2P(config) {\n    var _this;\n\n    _classCallCheck(this, P2P);\n\n    var _a, _b;\n\n    _this = _super.call(this);\n    _this._secret = config.secret ? config.secret : constants_1.DEFAULT_RANDOM_SECRET;\n    _this._sanitizedPeerLists = utils_1.sanitizePeerLists({\n      seedPeers: config.seedPeers ? config.seedPeers.map(utils_1.sanitizeInitialPeerInfo) : [],\n      blacklistedIPs: config.blacklistedIPs ? config.blacklistedIPs : [],\n      fixedPeers: config.fixedPeers ? config.fixedPeers.map(utils_1.sanitizeInitialPeerInfo) : [],\n      whitelisted: config.whitelistedPeers ? config.whitelistedPeers.map(utils_1.sanitizeInitialPeerInfo) : [],\n      previousPeers: config.previousPeers ? config.previousPeers.map(utils_1.sanitizeInitialPeerInfo) : []\n    }, {\n      peerId: utils_1.constructPeerId((_a = config.hostIp) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_NODE_HOST_IP, config.port),\n      ipAddress: (_b = config.hostIp) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_NODE_HOST_IP,\n      port: config.port\n    }, _this._secret);\n    _this._config = config;\n    _this._isActive = false;\n    _this._hasConnected = false;\n    _this._peerBook = new peer_book_1.PeerBook({\n      sanitizedPeerLists: _this._sanitizedPeerLists,\n      secret: _this._secret\n    });\n    _this._rpcSchemas = config.customNodeInfoSchema ? {\n      nodeInfo: schema_1.mergeCustomSchema(schema_1.nodeInfoSchema, config.customNodeInfoSchema),\n      peerInfo: schema_1.peerInfoSchema,\n      peerRequestResponse: schema_1.peerRequestResponseSchema\n    } : schema_1.defaultRPCSchemas;\n    lisk_codec_1.codec.addSchema(_this._rpcSchemas.peerInfo);\n    lisk_codec_1.codec.addSchema(_this._rpcSchemas.nodeInfo);\n    lisk_codec_1.codec.addSchema(_this._rpcSchemas.peerRequestResponse);\n    _this._networkStats = {\n      startTime: Date.now(),\n      incoming: {\n        count: 0,\n        connects: 0,\n        disconnects: 0\n      },\n      outgoing: {\n        count: 0,\n        connects: 0,\n        disconnects: 0\n      },\n      banning: {\n        bannedPeers: {},\n        count: 0\n      },\n      totalConnectedPeers: 0,\n      totalDisconnectedPeers: 0,\n      totalErrors: 0,\n      totalPeersDiscovered: 0,\n      totalRemovedPeers: 0,\n      totalMessagesReceived: {},\n      totalRequestsReceived: {}\n    };\n\n    _this._handlePeerPoolRPC = function (request) {\n      _this._networkStats.totalRequestsReceived[request.procedure] = _this._networkStats.totalRequestsReceived[request.procedure] + 1 || 1;\n\n      switch (request.procedure) {\n        case events_2.REMOTE_EVENT_RPC_GET_PEERS_LIST:\n          _this._handleGetPeersRequest(request);\n\n          break;\n\n        case events_2.REMOTE_EVENT_RPC_GET_NODE_INFO:\n          _this._handleGetNodeInfo(request);\n\n          break;\n\n        default:\n      }\n\n      _this.emit(events_2.EVENT_REQUEST_RECEIVED, request);\n    };\n\n    _this._handlePeerPoolMessage = function (message) {\n      _this._networkStats.totalMessagesReceived[message.event] = _this._networkStats.totalMessagesReceived[message.event] + 1 || 1;\n\n      if (message.event === events_2.REMOTE_EVENT_POST_NODE_INFO) {\n        var decodedNodeInfo = lisk_codec_1.codec.decode(schema_1.nodeInfoSchema, message.data);\n\n        _this.emit(events_2.EVENT_MESSAGE_RECEIVED, {\n          event: message.event,\n          peerId: message.peerId,\n          data: decodedNodeInfo\n        });\n\n        return;\n      }\n\n      _this.emit(events_2.EVENT_MESSAGE_RECEIVED, message);\n    };\n\n    _this._handleOutboundPeerConnect = function (peerInfo) {\n      _this._networkStats.outgoing.connects += 1;\n\n      if (!_this._peerBook.hasPeer(peerInfo)) {\n        _this._peerBook.addPeer(peerInfo);\n      }\n\n      _this._peerBook.upgradePeer(peerInfo);\n\n      _this.emit(events_2.EVENT_CONNECT_OUTBOUND, peerInfo);\n\n      if (_this._isNetworkReady()) {\n        _this.emit(events_2.EVENT_NETWORK_READY);\n      }\n    };\n\n    _this._handleOutboundPeerConnectAbort = function (peerInfo) {\n      if (_this._peerBook.hasPeer(peerInfo)) {\n        _this._peerBook.downgradePeer(peerInfo);\n      }\n\n      _this.emit(events_2.EVENT_CONNECT_ABORT_OUTBOUND, peerInfo);\n    };\n\n    _this._handlePeerCloseOutbound = function (closePacket) {\n      _this._networkStats.outgoing.disconnects += 1;\n      var peerInfo = closePacket.peerInfo;\n\n      if (_this._peerBook.getPeer(closePacket.peerInfo)) {\n        var updatedPeer = _objectSpread(_objectSpread({}, peerInfo), {}, {\n          internalState: utils_1.assignInternalInfo(peerInfo, _this._secret)\n        });\n\n        _this._peerBook.updatePeer(updatedPeer);\n      }\n\n      _this.emit(events_2.EVENT_CLOSE_OUTBOUND, closePacket);\n    };\n\n    _this._handlePeerCloseInbound = function (closePacket) {\n      _this._networkStats.incoming.disconnects += 1;\n      var peerInfo = closePacket.peerInfo;\n\n      if (_this._peerBook.getPeer(closePacket.peerInfo)) {\n        var updatedPeer = _objectSpread(_objectSpread({}, peerInfo), {}, {\n          internalState: utils_1.assignInternalInfo(peerInfo, _this._secret)\n        });\n\n        _this._peerBook.updatePeer(updatedPeer);\n      }\n\n      _this.emit(events_2.EVENT_CLOSE_INBOUND, closePacket);\n    };\n\n    _this._handleFailedInboundPeerConnect = function (err) {\n      _this._networkStats.totalErrors += 1;\n\n      _this.emit(events_2.EVENT_FAILED_TO_ADD_INBOUND_PEER, err);\n    };\n\n    _this._handleInboundPeerConnect = function (incomingPeerConnection) {\n      if (!lisk_validator_1.isIPV4(incomingPeerConnection.socket.remoteAddress)) {\n        incomingPeerConnection.socket.disconnect(constants_1.INVALID_CONNECTION_ADDRESS_CODE, constants_1.INVALID_CONNECTION_ADDRESS_REASON);\n\n        _this.emit(events_2.EVENT_FAILED_TO_ADD_INBOUND_PEER, constants_1.INVALID_CONNECTION_URL_REASON);\n\n        return;\n      }\n\n      try {\n        _this._peerPool.addInboundPeer(incomingPeerConnection.peerInfo, incomingPeerConnection.socket);\n\n        if (!_this._peerBook.hasPeer(incomingPeerConnection.peerInfo)) {\n          _this._peerBook.addPeer(_objectSpread(_objectSpread({}, incomingPeerConnection.peerInfo), {}, {\n            sourceAddress: incomingPeerConnection.socket.remoteAddress\n          }));\n        }\n\n        _this._networkStats.incoming.connects += 1;\n\n        _this.emit(events_2.EVENT_NEW_INBOUND_PEER, incomingPeerConnection.peerInfo);\n\n        return;\n      } catch (err) {\n        if (err instanceof errors_1.PeerInboundDuplicateConnectionError) {\n          incomingPeerConnection.socket.disconnect(constants_1.DUPLICATE_CONNECTION, constants_1.DUPLICATE_CONNECTION_REASON);\n\n          _this.emit(events_2.EVENT_FAILED_TO_ADD_INBOUND_PEER, err);\n\n          return;\n        }\n\n        incomingPeerConnection.socket.disconnect(constants_1.INCOMPATIBLE_PEER_CODE, constants_1.INCOMPATIBLE_PEER_UNKNOWN_REASON);\n\n        _this.emit(events_2.EVENT_FAILED_TO_ADD_INBOUND_PEER, err);\n      }\n    };\n\n    _this._handleRemovePeer = function (peerId) {\n      _this._networkStats.totalRemovedPeers += 1;\n\n      _this.emit(events_2.EVENT_REMOVE_PEER, peerId);\n    };\n\n    _this._handlePeerInfoUpdate = function (peerInfo) {\n      if (!_this._peerBook.hasPeer(peerInfo)) {\n        _this._peerBook.addPeer(peerInfo);\n      }\n\n      var isUpdated = _this._peerBook.updatePeer(peerInfo);\n\n      if (isUpdated) {\n        _this._peerBook.upgradePeer(peerInfo);\n\n        _this.emit(events_2.EVENT_UPDATED_PEER_INFO, peerInfo);\n      }\n    };\n\n    _this._handleFailedPeerInfoUpdate = function (error) {\n      _this._networkStats.totalErrors += 1;\n\n      _this.emit(events_2.EVENT_FAILED_PEER_INFO_UPDATE, error);\n    };\n\n    _this._handleFailedToFetchPeerInfo = function (error) {\n      _this._networkStats.totalErrors += 1;\n\n      _this.emit(events_2.EVENT_FAILED_TO_FETCH_PEER_INFO, error);\n    };\n\n    _this._handleFailedToFetchPeers = function (error) {\n      _this._networkStats.totalErrors += 1;\n\n      _this.emit(events_2.EVENT_FAILED_TO_FETCH_PEERS, error);\n    };\n\n    _this._handleFailedToCollectPeerDetails = function (error) {\n      _this._networkStats.totalErrors += 1;\n\n      _this.emit(events_2.EVENT_FAILED_TO_COLLECT_PEER_DETAILS_ON_CONNECT, error);\n    };\n\n    _this._handleBanPeer = function (peerId) {\n      var _a;\n\n      var banTime = (_a = _this._config.peerBanTime) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_BAN_TIME;\n\n      if (_this._peerPool.hasPeer(peerId)) {\n        _this._peerPool.removePeer(peerId);\n      }\n\n      _this._peerBook.addBannedPeer(peerId, banTime);\n\n      _this._networkStats.banning.count += 1;\n\n      if (!_this._networkStats.banning.bannedPeers[peerId]) {\n        _this._networkStats.banning.bannedPeers[peerId] = {\n          banCount: 1,\n          lastBanTime: Date.now()\n        };\n      } else {\n        _this._networkStats.banning.bannedPeers[peerId].banCount += 1;\n        _this._networkStats.banning.bannedPeers[peerId].lastBanTime = Date.now();\n      }\n\n      _this.emit(events_2.EVENT_BAN_PEER, peerId);\n    };\n\n    _this._handleDiscoveredPeer = function (detailedPeerInfo) {\n      if (_this._peerBook.hasPeer(detailedPeerInfo)) {\n        return;\n      }\n\n      if (_this._peerBook.addPeer(detailedPeerInfo)) {\n        _this._networkStats.totalPeersDiscovered += 1;\n\n        _this.emit(events_2.EVENT_DISCOVERED_PEER, detailedPeerInfo);\n      }\n    };\n\n    _this._handleFailedToPushNodeInfo = function (error) {\n      _this._networkStats.totalErrors += 1;\n\n      _this.emit(events_2.EVENT_FAILED_TO_PUSH_NODE_INFO, error);\n    };\n\n    _this._handleFailedToSendMessage = function (error) {\n      _this._networkStats.totalErrors += 1;\n\n      _this.emit(events_2.EVENT_FAILED_TO_SEND_MESSAGE, error);\n    };\n\n    _this._handleOutboundSocketError = function (error) {\n      _this._networkStats.totalErrors += 1;\n\n      _this.emit(events_2.EVENT_OUTBOUND_SOCKET_ERROR, error);\n    };\n\n    _this._handleInboundSocketError = function (error) {\n      _this._networkStats.totalErrors += 1;\n\n      _this.emit(events_2.EVENT_INBOUND_SOCKET_ERROR, error);\n    };\n\n    var peerPoolConfig = createPeerPoolConfig(config, _this._peerBook);\n    _this._peerPool = new peer_pool_1.PeerPool(peerPoolConfig);\n\n    _this._bindHandlersToPeerPool(_this._peerPool);\n\n    _this._nodeInfo = _objectSpread(_objectSpread({}, config.nodeInfo), {}, {\n      nonce: lisk_cryptography_1.getRandomBytes(constants_1.DEFAULT_NONCE_LENGTH_BYTES).toString('hex')\n    });\n\n    _this.applyNodeInfo(_this._nodeInfo);\n\n    _this._populatorInterval = config.populatorInterval ? config.populatorInterval : constants_1.DEFAULT_POPULATOR_INTERVAL;\n    _this._fallbackSeedPeerDiscoveryInterval = config.fallbackSeedPeerDiscoveryInterval ? config.fallbackSeedPeerDiscoveryInterval : constants_1.DEFAULT_FALLBACK_SEED_PEER_DISCOVERY_INTERVAL;\n    _this._nextSeedPeerDiscovery = Date.now() + _this._fallbackSeedPeerDiscoveryInterval;\n    return _this;\n  }\n\n  _createClass(P2P, [{\n    key: \"config\",\n    get: function get() {\n      return this._config;\n    }\n  }, {\n    key: \"isActive\",\n    get: function get() {\n      return this._isActive;\n    }\n  }, {\n    key: \"nodeInfo\",\n    get: function get() {\n      return this._nodeInfo;\n    }\n  }, {\n    key: \"applyNodeInfo\",\n    value: function applyNodeInfo(nodeInfo) {\n      this._nodeInfo = _objectSpread(_objectSpread({}, nodeInfo), {}, {\n        nonce: this.nodeInfo.nonce\n      });\n\n      this._peerPool.applyNodeInfo(this._nodeInfo);\n    }\n  }, {\n    key: \"applyPenalty\",\n    value: function applyPenalty(peerPenalty) {\n      this._peerPool.applyPenalty(peerPenalty);\n    }\n  }, {\n    key: \"getTriedPeers\",\n    value: function getTriedPeers() {\n      return this._peerBook.triedPeers.map(function (peer) {\n        return _objectSpread(_objectSpread({}, peer.sharedState), {}, {\n          ipAddress: peer.ipAddress,\n          port: peer.port\n        });\n      });\n    }\n  }, {\n    key: \"getConnectedPeers\",\n    value: function getConnectedPeers() {\n      return this._peerPool.getAllConnectedPeerInfos().filter(function (peer) {\n        return !(peer.internalState && !peer.internalState.advertiseAddress);\n      }).map(function (peer) {\n        return _objectSpread(_objectSpread({}, peer.sharedState), {}, {\n          ipAddress: peer.ipAddress,\n          port: peer.port,\n          peerId: peer.peerId\n        });\n      });\n    }\n  }, {\n    key: \"getDisconnectedPeers\",\n    value: function getDisconnectedPeers() {\n      var allPeers = this._peerBook.allPeers;\n      var connectedPeers = this.getConnectedPeers();\n      var disconnectedPeers = allPeers.filter(function (peer) {\n        if (connectedPeers.find(function (connectedPeer) {\n          return peer.ipAddress === connectedPeer.ipAddress && peer.port === connectedPeer.port;\n        })) {\n          return false;\n        }\n\n        return true;\n      });\n      return disconnectedPeers.filter(function (peer) {\n        return !(peer.internalState && !peer.internalState.advertiseAddress);\n      }).map(function (peer) {\n        return _objectSpread(_objectSpread({}, peer.sharedState), {}, {\n          ipAddress: peer.ipAddress,\n          port: peer.port,\n          peerId: peer.peerId\n        });\n      });\n    }\n  }, {\n    key: \"getNetworkStats\",\n    value: function getNetworkStats() {\n      var _this$_peerPool$getPe = this._peerPool.getPeersCountPerKind(),\n          inboundCount = _this$_peerPool$getPe.inboundCount,\n          outboundCount = _this$_peerPool$getPe.outboundCount;\n\n      this._networkStats.outgoing.count = outboundCount;\n      this._networkStats.incoming.count = inboundCount;\n      this._networkStats.totalDisconnectedPeers = this.getDisconnectedPeers().length;\n      this._networkStats.totalConnectedPeers = this.getConnectedPeers().length;\n      return this._networkStats;\n    }\n  }, {\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(packet) {\n        var bufferData, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                bufferData = this._getBufferData(packet.data);\n                _context.next = 3;\n                return this._peerPool.request({\n                  procedure: packet.procedure,\n                  data: bufferData\n                });\n\n              case 3:\n                response = _context.sent;\n                return _context.abrupt(\"return\", response);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function request(_x) {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n  }, {\n    key: \"send\",\n    value: function send(packet) {\n      var bufferData = this._getBufferData(packet.data);\n\n      this._peerPool.send({\n        event: packet.event,\n        data: bufferData\n      });\n    }\n  }, {\n    key: \"broadcast\",\n    value: function broadcast(packet) {\n      var bufferData = this._getBufferData(packet.data);\n\n      this._peerPool.broadcast({\n        event: packet.event,\n        data: bufferData\n      });\n    }\n  }, {\n    key: \"requestFromPeer\",\n    value: function () {\n      var _requestFromPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(packet, peerId) {\n        var bufferData;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                bufferData = this._getBufferData(packet.data);\n                return _context2.abrupt(\"return\", this._peerPool.requestFromPeer({\n                  procedure: packet.procedure,\n                  data: bufferData\n                }, peerId));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function requestFromPeer(_x2, _x3) {\n        return _requestFromPeer.apply(this, arguments);\n      }\n\n      return requestFromPeer;\n    }()\n  }, {\n    key: \"sendToPeer\",\n    value: function sendToPeer(packet, peerId) {\n      var bufferData = this._getBufferData(packet.data);\n\n      this._peerPool.sendToPeer({\n        event: packet.event,\n        data: bufferData\n      }, peerId);\n    }\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _a;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this._isActive) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error('Node cannot start because it is already active.');\n\n              case 2:\n                if (!(this._config.maxInboundConnections !== 0)) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                this._peerServer = new peer_server_1.PeerServer({\n                  port: this.config.port,\n                  nodeInfo: this._nodeInfo,\n                  hostIp: (_a = this._config.hostIp) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_NODE_HOST_IP,\n                  secret: this._secret,\n                  peerBook: this._peerBook,\n                  maxPayload: this._config.wsMaxPayload ? this._config.wsMaxPayload : constants_1.DEFAULT_WS_MAX_PAYLOAD,\n                  maxPeerInfoSize: this._config.maxPeerInfoSize ? this._config.maxPeerInfoSize : constants_1.DEFAULT_MAX_PEER_INFO_SIZE,\n                  peerHandshakeCheck: this._config.peerHandshakeCheck ? this._config.peerHandshakeCheck : utils_1.validatePeerCompatibility\n                });\n\n                this._bindHandlersToPeerServer(this._peerServer);\n\n                _context3.prev = 5;\n                _context3.next = 8;\n                return this._peerServer.start();\n\n              case 8:\n                _context3.next = 14;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](5);\n                this._isActive = false;\n                throw new Error('Peer server did not start successfully');\n\n              case 14:\n                this._isActive = true;\n\n                if (this._isActive) {\n                  if (this._peerBook.triedPeers.length < constants_1.DEFAULT_MIN_TRIED_PEER_COUNT) {\n                    this._peerPool.discoverFromSeedPeers();\n\n                    this._nextSeedPeerDiscovery = Date.now() + this._fallbackSeedPeerDiscoveryInterval;\n                  }\n\n                  this._startPopulator();\n                }\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 10]]);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this._isActive) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new Error('Node cannot be stopped because it is not active.');\n\n              case 2:\n                this._isActive = false;\n                this._hasConnected = false;\n\n                this._stopPopulator();\n\n                this._peerPool.removeAllPeers();\n\n                this._peerBook.cleanUpTimers();\n\n                if (!this._peerServer) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                _context4.next = 10;\n                return this._peerServer.stop();\n\n              case 10:\n                this._removeListeners(this._peerServer);\n\n              case 11:\n                this._removeListeners(this._peerPool);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n\n      return stop;\n    }()\n  }, {\n    key: \"_handleGetNodeInfo\",\n    value: function _handleGetNodeInfo(request) {\n      if (!validate_1.isEmptyMessage(request.data)) {\n        this.applyPenalty({\n          peerId: request.peerId,\n          penalty: 100\n        });\n        request.error(new Error('Invalid request.'));\n        return;\n      }\n\n      var encodedNodeInfo = codec_1.encodeNodeInfo(this._rpcSchemas.nodeInfo, this._nodeInfo);\n      request.end(encodedNodeInfo);\n    }\n  }, {\n    key: \"_bindHandlersToPeerPool\",\n    value: function _bindHandlersToPeerPool(peerPool) {\n      peerPool.on(events_2.EVENT_REQUEST_RECEIVED, this._handlePeerPoolRPC);\n      peerPool.on(events_2.EVENT_MESSAGE_RECEIVED, this._handlePeerPoolMessage);\n      peerPool.on(events_2.EVENT_CONNECT_OUTBOUND, this._handleOutboundPeerConnect);\n      peerPool.on(events_2.EVENT_CONNECT_ABORT_OUTBOUND, this._handleOutboundPeerConnectAbort);\n      peerPool.on(events_2.EVENT_CLOSE_INBOUND, this._handlePeerCloseInbound);\n      peerPool.on(events_2.EVENT_CLOSE_OUTBOUND, this._handlePeerCloseOutbound);\n      peerPool.on(events_2.EVENT_REMOVE_PEER, this._handleRemovePeer);\n      peerPool.on(events_2.EVENT_UPDATED_PEER_INFO, this._handlePeerInfoUpdate);\n      peerPool.on(events_2.EVENT_FAILED_PEER_INFO_UPDATE, this._handleFailedPeerInfoUpdate);\n      peerPool.on(events_2.EVENT_FAILED_TO_FETCH_PEER_INFO, this._handleFailedToFetchPeerInfo);\n      peerPool.on(events_2.EVENT_FAILED_TO_FETCH_PEERS, this._handleFailedToFetchPeers);\n      peerPool.on(events_2.EVENT_FAILED_TO_COLLECT_PEER_DETAILS_ON_CONNECT, this._handleFailedToCollectPeerDetails);\n      peerPool.on(events_2.EVENT_DISCOVERED_PEER, this._handleDiscoveredPeer);\n      peerPool.on(events_2.EVENT_FAILED_TO_PUSH_NODE_INFO, this._handleFailedToPushNodeInfo);\n      peerPool.on(events_2.EVENT_FAILED_TO_SEND_MESSAGE, this._handleFailedToSendMessage);\n      peerPool.on(events_2.EVENT_OUTBOUND_SOCKET_ERROR, this._handleOutboundSocketError);\n      peerPool.on(events_2.EVENT_INBOUND_SOCKET_ERROR, this._handleInboundSocketError);\n      peerPool.on(events_2.EVENT_BAN_PEER, this._handleBanPeer);\n    }\n  }, {\n    key: \"_bindHandlersToPeerServer\",\n    value: function _bindHandlersToPeerServer(peerServer) {\n      peerServer.on(events_2.EVENT_BAN_PEER, this._handleBanPeer);\n      peerServer.on(events_2.EVENT_INBOUND_SOCKET_ERROR, this._handleInboundSocketError);\n      peerServer.on(events_2.EVENT_FAILED_TO_ADD_INBOUND_PEER, this._handleFailedInboundPeerConnect);\n      peerServer.on(events_2.EVENT_NEW_INBOUND_PEER_CONNECTION, this._handleInboundPeerConnect);\n    }\n  }, {\n    key: \"_startPopulator\",\n    value: function _startPopulator() {\n      var _this2 = this;\n\n      if (this._populatorIntervalId) {\n        throw new Error('Populator is already running');\n      }\n\n      this._populatorIntervalId = setInterval(function () {\n        _this2._peerPool.triggerNewConnections(_this2._peerBook.newPeers, _this2._peerBook.triedPeers);\n\n        if (_this2._nextSeedPeerDiscovery < Date.now() && _this2._peerPool.getFreeOutboundSlots() > 0) {\n          _this2._peerPool.discoverFromSeedPeers();\n\n          _this2._nextSeedPeerDiscovery = Date.now() + _this2._fallbackSeedPeerDiscoveryInterval;\n        }\n      }, this._populatorInterval);\n\n      this._peerPool.triggerNewConnections(this._peerBook.newPeers, this._peerBook.triedPeers);\n    }\n  }, {\n    key: \"_stopPopulator\",\n    value: function _stopPopulator() {\n      if (this._populatorIntervalId) {\n        clearInterval(this._populatorIntervalId);\n      }\n    }\n  }, {\n    key: \"_isNetworkReady\",\n    value: function _isNetworkReady() {\n      if (!this._hasConnected && this._peerPool.getConnectedPeers().length > 0) {\n        this._hasConnected = true;\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_handleGetPeersRequest\",\n    value: function _handleGetPeersRequest(request) {\n      var _this3 = this;\n\n      if (!validate_1.isEmptyMessage(request.data)) {\n        this.applyPenalty({\n          peerId: request.peerId,\n          penalty: 100\n        });\n        request.error(new Error('Invalid request.'));\n        return;\n      }\n\n      var minimumPeerDiscoveryThreshold = this._config.minimumPeerDiscoveryThreshold ? this._config.minimumPeerDiscoveryThreshold : constants_1.DEFAULT_MIN_PEER_DISCOVERY_THRESHOLD;\n      var maxPeerDiscoveryResponseLength = this._config.maxPeerDiscoveryResponseLength ? this._config.maxPeerDiscoveryResponseLength : constants_1.DEFAULT_MAX_PEER_DISCOVERY_RESPONSE_LENGTH;\n      var wsMaxPayload = this._config.wsMaxPayload ? this._config.wsMaxPayload : constants_1.DEFAULT_WS_MAX_PAYLOAD;\n      var maxPeerInfoSize = this._config.maxPeerInfoSize ? this._config.maxPeerInfoSize : constants_1.DEFAULT_MAX_PEER_INFO_SIZE;\n      var safeMaxPeerInfoLength = Math.floor(constants_1.DEFAULT_WS_MAX_PAYLOAD / maxPeerInfoSize) - 1;\n\n      var selectedPeers = this._peerBook.getRandomizedPeerList(minimumPeerDiscoveryThreshold, maxPeerDiscoveryResponseLength);\n\n      var sanitizedPeerInfoList = selectedPeers.filter(function (peer) {\n        return !(peer.internalState && !peer.internalState.advertiseAddress);\n      }).map(function (peer) {\n        return {\n          ipAddress: peer.ipAddress,\n          port: peer.port\n        };\n      });\n      var encodedPeersList = sanitizedPeerInfoList.map(function (peer) {\n        return codec_1.encodePeerInfo(_this3._rpcSchemas.peerInfo, peer);\n      });\n      var validatedPeerList = utils_1.getByteSize(encodedPeersList) < wsMaxPayload ? encodedPeersList : encodedPeersList.slice(0, safeMaxPeerInfoLength);\n      var encodedResponse = lisk_codec_1.codec.encode(this._rpcSchemas.peerRequestResponse, {\n        peers: validatedPeerList\n      });\n      request.end(encodedResponse);\n    }\n  }, {\n    key: \"_removeListeners\",\n    value: function _removeListeners(emitter) {\n      emitter.eventNames().forEach(function (eventName) {\n        emitter.removeAllListeners(eventName);\n      });\n    }\n  }, {\n    key: \"_getBufferData\",\n    value: function _getBufferData(data) {\n      if (data === undefined) {\n        return undefined;\n      }\n\n      if (Buffer.isBuffer(data)) {\n        return data;\n      }\n\n      return Buffer.from(JSON.stringify(data), 'utf8');\n    }\n  }]);\n\n  return P2P;\n}(events_1.EventEmitter);\n\nexports.P2P = P2P;","map":{"version":3,"sources":["../src/p2p.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.P2P = void 0;\nconst events_1 = require(\"events\");\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst constants_1 = require(\"./constants\");\nconst errors_1 = require(\"./errors\");\nconst events_2 = require(\"./events\");\nconst peer_book_1 = require(\"./peer_book\");\nconst peer_pool_1 = require(\"./peer_pool\");\nconst peer_server_1 = require(\"./peer_server\");\nconst utils_1 = require(\"./utils\");\nconst schema_1 = require(\"./schema\");\nconst codec_1 = require(\"./utils/codec\");\nconst validate_1 = require(\"./utils/validate\");\nconst createPeerPoolConfig = (config, peerBook) => ({\n    hostPort: config.port,\n    connectTimeout: config.connectTimeout,\n    ackTimeout: config.ackTimeout,\n    wsMaxPayload: config.wsMaxPayload ? config.wsMaxPayload : constants_1.DEFAULT_WS_MAX_PAYLOAD,\n    peerSelectionForSend: config.peerSelectionForSend\n        ? config.peerSelectionForSend\n        : utils_1.selectPeersForSend,\n    peerSelectionForRequest: config.peerSelectionForRequest\n        ? config.peerSelectionForRequest\n        : utils_1.selectPeersForRequest,\n    peerSelectionForConnection: config.peerSelectionForConnection\n        ? config.peerSelectionForConnection\n        : utils_1.selectPeersForConnection,\n    sendPeerLimit: config.sendPeerLimit === undefined ? constants_1.DEFAULT_SEND_PEER_LIMIT : config.sendPeerLimit,\n    peerBanTime: config.peerBanTime ? config.peerBanTime : constants_1.DEFAULT_BAN_TIME,\n    maxOutboundConnections: config.maxOutboundConnections === undefined\n        ? constants_1.DEFAULT_MAX_OUTBOUND_CONNECTIONS\n        : config.maxOutboundConnections,\n    maxInboundConnections: config.maxInboundConnections === undefined\n        ? constants_1.DEFAULT_MAX_INBOUND_CONNECTIONS\n        : config.maxInboundConnections,\n    maxPeerDiscoveryResponseLength: config.maxPeerDiscoveryResponseLength === undefined\n        ? constants_1.DEFAULT_MAX_PEER_DISCOVERY_RESPONSE_LENGTH\n        : config.maxPeerDiscoveryResponseLength,\n    maxPeerInfoSize: config.maxPeerInfoSize ? config.maxPeerInfoSize : constants_1.DEFAULT_MAX_PEER_INFO_SIZE,\n    outboundShuffleInterval: config.outboundShuffleInterval\n        ? config.outboundShuffleInterval\n        : constants_1.DEFAULT_OUTBOUND_SHUFFLE_INTERVAL,\n    netgroupProtectionRatio: typeof config.netgroupProtectionRatio === 'number'\n        ? config.netgroupProtectionRatio\n        : constants_1.DEFAULT_PEER_PROTECTION_FOR_NETGROUP,\n    latencyProtectionRatio: typeof config.latencyProtectionRatio === 'number'\n        ? config.latencyProtectionRatio\n        : constants_1.DEFAULT_PEER_PROTECTION_FOR_LATENCY,\n    productivityProtectionRatio: typeof config.productivityProtectionRatio === 'number'\n        ? config.productivityProtectionRatio\n        : constants_1.DEFAULT_PEER_PROTECTION_FOR_USEFULNESS,\n    longevityProtectionRatio: typeof config.longevityProtectionRatio === 'number'\n        ? config.longevityProtectionRatio\n        : constants_1.DEFAULT_PEER_PROTECTION_FOR_LONGEVITY,\n    wsMaxMessageRate: typeof config.wsMaxMessageRate === 'number'\n        ? config.wsMaxMessageRate\n        : constants_1.DEFAULT_WS_MAX_MESSAGE_RATE,\n    wsMaxMessageRatePenalty: typeof config.wsMaxMessageRatePenalty === 'number'\n        ? config.wsMaxMessageRatePenalty\n        : constants_1.DEFAULT_WS_MAX_MESSAGE_RATE_PENALTY,\n    rateCalculationInterval: typeof config.rateCalculationInterval === 'number'\n        ? config.rateCalculationInterval\n        : constants_1.DEFAULT_RATE_CALCULATION_INTERVAL,\n    peerStatusMessageRate: typeof config.peerStatusMessageRate === 'number'\n        ? config.peerStatusMessageRate\n        : constants_1.DEFAULT_PEER_STATUS_MESSAGE_RATE,\n    secret: config.secret ? config.secret : constants_1.DEFAULT_RANDOM_SECRET,\n    peerBook,\n    rpcSchemas: config.customNodeInfoSchema\n        ? {\n            nodeInfo: schema_1.mergeCustomSchema(schema_1.nodeInfoSchema, config.customNodeInfoSchema),\n            peerInfo: schema_1.peerInfoSchema,\n            peerRequestResponse: schema_1.peerRequestResponseSchema,\n        }\n        : schema_1.defaultRPCSchemas,\n});\nclass P2P extends events_1.EventEmitter {\n    constructor(config) {\n        var _a, _b;\n        super();\n        this._secret = config.secret ? config.secret : constants_1.DEFAULT_RANDOM_SECRET;\n        this._sanitizedPeerLists = utils_1.sanitizePeerLists({\n            seedPeers: config.seedPeers ? config.seedPeers.map(utils_1.sanitizeInitialPeerInfo) : [],\n            blacklistedIPs: config.blacklistedIPs ? config.blacklistedIPs : [],\n            fixedPeers: config.fixedPeers ? config.fixedPeers.map(utils_1.sanitizeInitialPeerInfo) : [],\n            whitelisted: config.whitelistedPeers\n                ? config.whitelistedPeers.map(utils_1.sanitizeInitialPeerInfo)\n                : [],\n            previousPeers: config.previousPeers\n                ? config.previousPeers.map(utils_1.sanitizeInitialPeerInfo)\n                : [],\n        }, {\n            peerId: utils_1.constructPeerId((_a = config.hostIp) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_NODE_HOST_IP, config.port),\n            ipAddress: (_b = config.hostIp) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_NODE_HOST_IP,\n            port: config.port,\n        }, this._secret);\n        this._config = config;\n        this._isActive = false;\n        this._hasConnected = false;\n        this._peerBook = new peer_book_1.PeerBook({\n            sanitizedPeerLists: this._sanitizedPeerLists,\n            secret: this._secret,\n        });\n        this._rpcSchemas = config.customNodeInfoSchema\n            ? {\n                nodeInfo: schema_1.mergeCustomSchema(schema_1.nodeInfoSchema, config.customNodeInfoSchema),\n                peerInfo: schema_1.peerInfoSchema,\n                peerRequestResponse: schema_1.peerRequestResponseSchema,\n            }\n            : schema_1.defaultRPCSchemas;\n        lisk_codec_1.codec.addSchema(this._rpcSchemas.peerInfo);\n        lisk_codec_1.codec.addSchema(this._rpcSchemas.nodeInfo);\n        lisk_codec_1.codec.addSchema(this._rpcSchemas.peerRequestResponse);\n        this._networkStats = {\n            startTime: Date.now(),\n            incoming: {\n                count: 0,\n                connects: 0,\n                disconnects: 0,\n            },\n            outgoing: {\n                count: 0,\n                connects: 0,\n                disconnects: 0,\n            },\n            banning: {\n                bannedPeers: {},\n                count: 0,\n            },\n            totalConnectedPeers: 0,\n            totalDisconnectedPeers: 0,\n            totalErrors: 0,\n            totalPeersDiscovered: 0,\n            totalRemovedPeers: 0,\n            totalMessagesReceived: {},\n            totalRequestsReceived: {},\n        };\n        this._handlePeerPoolRPC = (request) => {\n            this._networkStats.totalRequestsReceived[request.procedure] =\n                this._networkStats.totalRequestsReceived[request.procedure] + 1 || 1;\n            switch (request.procedure) {\n                case events_2.REMOTE_EVENT_RPC_GET_PEERS_LIST:\n                    this._handleGetPeersRequest(request);\n                    break;\n                case events_2.REMOTE_EVENT_RPC_GET_NODE_INFO:\n                    this._handleGetNodeInfo(request);\n                    break;\n                default:\n            }\n            this.emit(events_2.EVENT_REQUEST_RECEIVED, request);\n        };\n        this._handlePeerPoolMessage = (message) => {\n            this._networkStats.totalMessagesReceived[message.event] =\n                this._networkStats.totalMessagesReceived[message.event] + 1 || 1;\n            if (message.event === events_2.REMOTE_EVENT_POST_NODE_INFO) {\n                const decodedNodeInfo = lisk_codec_1.codec.decode(schema_1.nodeInfoSchema, message.data);\n                this.emit(events_2.EVENT_MESSAGE_RECEIVED, {\n                    event: message.event,\n                    peerId: message.peerId,\n                    data: decodedNodeInfo,\n                });\n                return;\n            }\n            this.emit(events_2.EVENT_MESSAGE_RECEIVED, message);\n        };\n        this._handleOutboundPeerConnect = (peerInfo) => {\n            this._networkStats.outgoing.connects += 1;\n            if (!this._peerBook.hasPeer(peerInfo)) {\n                this._peerBook.addPeer(peerInfo);\n            }\n            this._peerBook.upgradePeer(peerInfo);\n            this.emit(events_2.EVENT_CONNECT_OUTBOUND, peerInfo);\n            if (this._isNetworkReady()) {\n                this.emit(events_2.EVENT_NETWORK_READY);\n            }\n        };\n        this._handleOutboundPeerConnectAbort = (peerInfo) => {\n            if (this._peerBook.hasPeer(peerInfo)) {\n                this._peerBook.downgradePeer(peerInfo);\n            }\n            this.emit(events_2.EVENT_CONNECT_ABORT_OUTBOUND, peerInfo);\n        };\n        this._handlePeerCloseOutbound = (closePacket) => {\n            this._networkStats.outgoing.disconnects += 1;\n            const { peerInfo } = closePacket;\n            if (this._peerBook.getPeer(closePacket.peerInfo)) {\n                const updatedPeer = {\n                    ...peerInfo,\n                    internalState: utils_1.assignInternalInfo(peerInfo, this._secret),\n                };\n                this._peerBook.updatePeer(updatedPeer);\n            }\n            this.emit(events_2.EVENT_CLOSE_OUTBOUND, closePacket);\n        };\n        this._handlePeerCloseInbound = (closePacket) => {\n            this._networkStats.incoming.disconnects += 1;\n            const { peerInfo } = closePacket;\n            if (this._peerBook.getPeer(closePacket.peerInfo)) {\n                const updatedPeer = {\n                    ...peerInfo,\n                    internalState: utils_1.assignInternalInfo(peerInfo, this._secret),\n                };\n                this._peerBook.updatePeer(updatedPeer);\n            }\n            this.emit(events_2.EVENT_CLOSE_INBOUND, closePacket);\n        };\n        this._handleFailedInboundPeerConnect = (err) => {\n            this._networkStats.totalErrors += 1;\n            this.emit(events_2.EVENT_FAILED_TO_ADD_INBOUND_PEER, err);\n        };\n        this._handleInboundPeerConnect = (incomingPeerConnection) => {\n            if (!lisk_validator_1.isIPV4(incomingPeerConnection.socket.remoteAddress)) {\n                incomingPeerConnection.socket.disconnect(constants_1.INVALID_CONNECTION_ADDRESS_CODE, constants_1.INVALID_CONNECTION_ADDRESS_REASON);\n                this.emit(events_2.EVENT_FAILED_TO_ADD_INBOUND_PEER, constants_1.INVALID_CONNECTION_URL_REASON);\n                return;\n            }\n            try {\n                this._peerPool.addInboundPeer(incomingPeerConnection.peerInfo, incomingPeerConnection.socket);\n                if (!this._peerBook.hasPeer(incomingPeerConnection.peerInfo)) {\n                    this._peerBook.addPeer({\n                        ...incomingPeerConnection.peerInfo,\n                        sourceAddress: incomingPeerConnection.socket.remoteAddress,\n                    });\n                }\n                this._networkStats.incoming.connects += 1;\n                this.emit(events_2.EVENT_NEW_INBOUND_PEER, incomingPeerConnection.peerInfo);\n                return;\n            }\n            catch (err) {\n                if (err instanceof errors_1.PeerInboundDuplicateConnectionError) {\n                    incomingPeerConnection.socket.disconnect(constants_1.DUPLICATE_CONNECTION, constants_1.DUPLICATE_CONNECTION_REASON);\n                    this.emit(events_2.EVENT_FAILED_TO_ADD_INBOUND_PEER, err);\n                    return;\n                }\n                incomingPeerConnection.socket.disconnect(constants_1.INCOMPATIBLE_PEER_CODE, constants_1.INCOMPATIBLE_PEER_UNKNOWN_REASON);\n                this.emit(events_2.EVENT_FAILED_TO_ADD_INBOUND_PEER, err);\n            }\n        };\n        this._handleRemovePeer = (peerId) => {\n            this._networkStats.totalRemovedPeers += 1;\n            this.emit(events_2.EVENT_REMOVE_PEER, peerId);\n        };\n        this._handlePeerInfoUpdate = (peerInfo) => {\n            if (!this._peerBook.hasPeer(peerInfo)) {\n                this._peerBook.addPeer(peerInfo);\n            }\n            const isUpdated = this._peerBook.updatePeer(peerInfo);\n            if (isUpdated) {\n                this._peerBook.upgradePeer(peerInfo);\n                this.emit(events_2.EVENT_UPDATED_PEER_INFO, peerInfo);\n            }\n        };\n        this._handleFailedPeerInfoUpdate = (error) => {\n            this._networkStats.totalErrors += 1;\n            this.emit(events_2.EVENT_FAILED_PEER_INFO_UPDATE, error);\n        };\n        this._handleFailedToFetchPeerInfo = (error) => {\n            this._networkStats.totalErrors += 1;\n            this.emit(events_2.EVENT_FAILED_TO_FETCH_PEER_INFO, error);\n        };\n        this._handleFailedToFetchPeers = (error) => {\n            this._networkStats.totalErrors += 1;\n            this.emit(events_2.EVENT_FAILED_TO_FETCH_PEERS, error);\n        };\n        this._handleFailedToCollectPeerDetails = (error) => {\n            this._networkStats.totalErrors += 1;\n            this.emit(events_2.EVENT_FAILED_TO_COLLECT_PEER_DETAILS_ON_CONNECT, error);\n        };\n        this._handleBanPeer = (peerId) => {\n            var _a;\n            const banTime = (_a = this._config.peerBanTime) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_BAN_TIME;\n            if (this._peerPool.hasPeer(peerId)) {\n                this._peerPool.removePeer(peerId);\n            }\n            this._peerBook.addBannedPeer(peerId, banTime);\n            this._networkStats.banning.count += 1;\n            if (!this._networkStats.banning.bannedPeers[peerId]) {\n                this._networkStats.banning.bannedPeers[peerId] = {\n                    banCount: 1,\n                    lastBanTime: Date.now(),\n                };\n            }\n            else {\n                this._networkStats.banning.bannedPeers[peerId].banCount += 1;\n                this._networkStats.banning.bannedPeers[peerId].lastBanTime = Date.now();\n            }\n            this.emit(events_2.EVENT_BAN_PEER, peerId);\n        };\n        this._handleDiscoveredPeer = (detailedPeerInfo) => {\n            if (this._peerBook.hasPeer(detailedPeerInfo)) {\n                return;\n            }\n            if (this._peerBook.addPeer(detailedPeerInfo)) {\n                this._networkStats.totalPeersDiscovered += 1;\n                this.emit(events_2.EVENT_DISCOVERED_PEER, detailedPeerInfo);\n            }\n        };\n        this._handleFailedToPushNodeInfo = (error) => {\n            this._networkStats.totalErrors += 1;\n            this.emit(events_2.EVENT_FAILED_TO_PUSH_NODE_INFO, error);\n        };\n        this._handleFailedToSendMessage = (error) => {\n            this._networkStats.totalErrors += 1;\n            this.emit(events_2.EVENT_FAILED_TO_SEND_MESSAGE, error);\n        };\n        this._handleOutboundSocketError = (error) => {\n            this._networkStats.totalErrors += 1;\n            this.emit(events_2.EVENT_OUTBOUND_SOCKET_ERROR, error);\n        };\n        this._handleInboundSocketError = (error) => {\n            this._networkStats.totalErrors += 1;\n            this.emit(events_2.EVENT_INBOUND_SOCKET_ERROR, error);\n        };\n        const peerPoolConfig = createPeerPoolConfig(config, this._peerBook);\n        this._peerPool = new peer_pool_1.PeerPool(peerPoolConfig);\n        this._bindHandlersToPeerPool(this._peerPool);\n        this._nodeInfo = {\n            ...config.nodeInfo,\n            nonce: lisk_cryptography_1.getRandomBytes(constants_1.DEFAULT_NONCE_LENGTH_BYTES).toString('hex'),\n        };\n        this.applyNodeInfo(this._nodeInfo);\n        this._populatorInterval = config.populatorInterval\n            ? config.populatorInterval\n            : constants_1.DEFAULT_POPULATOR_INTERVAL;\n        this._fallbackSeedPeerDiscoveryInterval = config.fallbackSeedPeerDiscoveryInterval\n            ? config.fallbackSeedPeerDiscoveryInterval\n            : constants_1.DEFAULT_FALLBACK_SEED_PEER_DISCOVERY_INTERVAL;\n        this._nextSeedPeerDiscovery = Date.now() + this._fallbackSeedPeerDiscoveryInterval;\n    }\n    get config() {\n        return this._config;\n    }\n    get isActive() {\n        return this._isActive;\n    }\n    get nodeInfo() {\n        return this._nodeInfo;\n    }\n    applyNodeInfo(nodeInfo) {\n        this._nodeInfo = {\n            ...nodeInfo,\n            nonce: this.nodeInfo.nonce,\n        };\n        this._peerPool.applyNodeInfo(this._nodeInfo);\n    }\n    applyPenalty(peerPenalty) {\n        this._peerPool.applyPenalty(peerPenalty);\n    }\n    getTriedPeers() {\n        return this._peerBook.triedPeers.map(peer => ({\n            ...peer.sharedState,\n            ipAddress: peer.ipAddress,\n            port: peer.port,\n        }));\n    }\n    getConnectedPeers() {\n        return this._peerPool\n            .getAllConnectedPeerInfos()\n            .filter(peer => !(peer.internalState && !peer.internalState.advertiseAddress))\n            .map(peer => ({\n            ...peer.sharedState,\n            ipAddress: peer.ipAddress,\n            port: peer.port,\n            peerId: peer.peerId,\n        }));\n    }\n    getDisconnectedPeers() {\n        const { allPeers } = this._peerBook;\n        const connectedPeers = this.getConnectedPeers();\n        const disconnectedPeers = allPeers.filter(peer => {\n            if (connectedPeers.find(connectedPeer => peer.ipAddress === connectedPeer.ipAddress && peer.port === connectedPeer.port)) {\n                return false;\n            }\n            return true;\n        });\n        return disconnectedPeers\n            .filter(peer => !(peer.internalState && !peer.internalState.advertiseAddress))\n            .map(peer => ({\n            ...peer.sharedState,\n            ipAddress: peer.ipAddress,\n            port: peer.port,\n            peerId: peer.peerId,\n        }));\n    }\n    getNetworkStats() {\n        const { inboundCount, outboundCount } = this._peerPool.getPeersCountPerKind();\n        this._networkStats.outgoing.count = outboundCount;\n        this._networkStats.incoming.count = inboundCount;\n        this._networkStats.totalDisconnectedPeers = this.getDisconnectedPeers().length;\n        this._networkStats.totalConnectedPeers = this.getConnectedPeers().length;\n        return this._networkStats;\n    }\n    async request(packet) {\n        const bufferData = this._getBufferData(packet.data);\n        const response = await this._peerPool.request({\n            procedure: packet.procedure,\n            data: bufferData,\n        });\n        return response;\n    }\n    send(packet) {\n        const bufferData = this._getBufferData(packet.data);\n        this._peerPool.send({ event: packet.event, data: bufferData });\n    }\n    broadcast(packet) {\n        const bufferData = this._getBufferData(packet.data);\n        this._peerPool.broadcast({ event: packet.event, data: bufferData });\n    }\n    async requestFromPeer(packet, peerId) {\n        const bufferData = this._getBufferData(packet.data);\n        return this._peerPool.requestFromPeer({ procedure: packet.procedure, data: bufferData }, peerId);\n    }\n    sendToPeer(packet, peerId) {\n        const bufferData = this._getBufferData(packet.data);\n        this._peerPool.sendToPeer({ event: packet.event, data: bufferData }, peerId);\n    }\n    async start() {\n        var _a;\n        if (this._isActive) {\n            throw new Error('Node cannot start because it is already active.');\n        }\n        if (this._config.maxInboundConnections !== 0) {\n            this._peerServer = new peer_server_1.PeerServer({\n                port: this.config.port,\n                nodeInfo: this._nodeInfo,\n                hostIp: (_a = this._config.hostIp) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_NODE_HOST_IP,\n                secret: this._secret,\n                peerBook: this._peerBook,\n                maxPayload: this._config.wsMaxPayload ? this._config.wsMaxPayload : constants_1.DEFAULT_WS_MAX_PAYLOAD,\n                maxPeerInfoSize: this._config.maxPeerInfoSize\n                    ? this._config.maxPeerInfoSize\n                    : constants_1.DEFAULT_MAX_PEER_INFO_SIZE,\n                peerHandshakeCheck: this._config.peerHandshakeCheck\n                    ? this._config.peerHandshakeCheck\n                    : utils_1.validatePeerCompatibility,\n            });\n            this._bindHandlersToPeerServer(this._peerServer);\n            try {\n                await this._peerServer.start();\n            }\n            catch (err) {\n                this._isActive = false;\n                throw new Error('Peer server did not start successfully');\n            }\n        }\n        this._isActive = true;\n        if (this._isActive) {\n            if (this._peerBook.triedPeers.length < constants_1.DEFAULT_MIN_TRIED_PEER_COUNT) {\n                this._peerPool.discoverFromSeedPeers();\n                this._nextSeedPeerDiscovery = Date.now() + this._fallbackSeedPeerDiscoveryInterval;\n            }\n            this._startPopulator();\n        }\n    }\n    async stop() {\n        if (!this._isActive) {\n            throw new Error('Node cannot be stopped because it is not active.');\n        }\n        this._isActive = false;\n        this._hasConnected = false;\n        this._stopPopulator();\n        this._peerPool.removeAllPeers();\n        this._peerBook.cleanUpTimers();\n        if (this._peerServer) {\n            await this._peerServer.stop();\n            this._removeListeners(this._peerServer);\n        }\n        this._removeListeners(this._peerPool);\n    }\n    _handleGetNodeInfo(request) {\n        if (!validate_1.isEmptyMessage(request.data)) {\n            this.applyPenalty({\n                peerId: request.peerId,\n                penalty: 100,\n            });\n            request.error(new Error('Invalid request.'));\n            return;\n        }\n        const encodedNodeInfo = codec_1.encodeNodeInfo(this._rpcSchemas.nodeInfo, this._nodeInfo);\n        request.end(encodedNodeInfo);\n    }\n    _bindHandlersToPeerPool(peerPool) {\n        peerPool.on(events_2.EVENT_REQUEST_RECEIVED, this._handlePeerPoolRPC);\n        peerPool.on(events_2.EVENT_MESSAGE_RECEIVED, this._handlePeerPoolMessage);\n        peerPool.on(events_2.EVENT_CONNECT_OUTBOUND, this._handleOutboundPeerConnect);\n        peerPool.on(events_2.EVENT_CONNECT_ABORT_OUTBOUND, this._handleOutboundPeerConnectAbort);\n        peerPool.on(events_2.EVENT_CLOSE_INBOUND, this._handlePeerCloseInbound);\n        peerPool.on(events_2.EVENT_CLOSE_OUTBOUND, this._handlePeerCloseOutbound);\n        peerPool.on(events_2.EVENT_REMOVE_PEER, this._handleRemovePeer);\n        peerPool.on(events_2.EVENT_UPDATED_PEER_INFO, this._handlePeerInfoUpdate);\n        peerPool.on(events_2.EVENT_FAILED_PEER_INFO_UPDATE, this._handleFailedPeerInfoUpdate);\n        peerPool.on(events_2.EVENT_FAILED_TO_FETCH_PEER_INFO, this._handleFailedToFetchPeerInfo);\n        peerPool.on(events_2.EVENT_FAILED_TO_FETCH_PEERS, this._handleFailedToFetchPeers);\n        peerPool.on(events_2.EVENT_FAILED_TO_COLLECT_PEER_DETAILS_ON_CONNECT, this._handleFailedToCollectPeerDetails);\n        peerPool.on(events_2.EVENT_DISCOVERED_PEER, this._handleDiscoveredPeer);\n        peerPool.on(events_2.EVENT_FAILED_TO_PUSH_NODE_INFO, this._handleFailedToPushNodeInfo);\n        peerPool.on(events_2.EVENT_FAILED_TO_SEND_MESSAGE, this._handleFailedToSendMessage);\n        peerPool.on(events_2.EVENT_OUTBOUND_SOCKET_ERROR, this._handleOutboundSocketError);\n        peerPool.on(events_2.EVENT_INBOUND_SOCKET_ERROR, this._handleInboundSocketError);\n        peerPool.on(events_2.EVENT_BAN_PEER, this._handleBanPeer);\n    }\n    _bindHandlersToPeerServer(peerServer) {\n        peerServer.on(events_2.EVENT_BAN_PEER, this._handleBanPeer);\n        peerServer.on(events_2.EVENT_INBOUND_SOCKET_ERROR, this._handleInboundSocketError);\n        peerServer.on(events_2.EVENT_FAILED_TO_ADD_INBOUND_PEER, this._handleFailedInboundPeerConnect);\n        peerServer.on(events_2.EVENT_NEW_INBOUND_PEER_CONNECTION, this._handleInboundPeerConnect);\n    }\n    _startPopulator() {\n        if (this._populatorIntervalId) {\n            throw new Error('Populator is already running');\n        }\n        this._populatorIntervalId = setInterval(() => {\n            this._peerPool.triggerNewConnections(this._peerBook.newPeers, this._peerBook.triedPeers);\n            if (this._nextSeedPeerDiscovery < Date.now() && this._peerPool.getFreeOutboundSlots() > 0) {\n                this._peerPool.discoverFromSeedPeers();\n                this._nextSeedPeerDiscovery = Date.now() + this._fallbackSeedPeerDiscoveryInterval;\n            }\n        }, this._populatorInterval);\n        this._peerPool.triggerNewConnections(this._peerBook.newPeers, this._peerBook.triedPeers);\n    }\n    _stopPopulator() {\n        if (this._populatorIntervalId) {\n            clearInterval(this._populatorIntervalId);\n        }\n    }\n    _isNetworkReady() {\n        if (!this._hasConnected && this._peerPool.getConnectedPeers().length > 0) {\n            this._hasConnected = true;\n            return true;\n        }\n        return false;\n    }\n    _handleGetPeersRequest(request) {\n        if (!validate_1.isEmptyMessage(request.data)) {\n            this.applyPenalty({\n                peerId: request.peerId,\n                penalty: 100,\n            });\n            request.error(new Error('Invalid request.'));\n            return;\n        }\n        const minimumPeerDiscoveryThreshold = this._config.minimumPeerDiscoveryThreshold\n            ? this._config.minimumPeerDiscoveryThreshold\n            : constants_1.DEFAULT_MIN_PEER_DISCOVERY_THRESHOLD;\n        const maxPeerDiscoveryResponseLength = this._config.maxPeerDiscoveryResponseLength\n            ? this._config.maxPeerDiscoveryResponseLength\n            : constants_1.DEFAULT_MAX_PEER_DISCOVERY_RESPONSE_LENGTH;\n        const wsMaxPayload = this._config.wsMaxPayload\n            ? this._config.wsMaxPayload\n            : constants_1.DEFAULT_WS_MAX_PAYLOAD;\n        const maxPeerInfoSize = this._config.maxPeerInfoSize\n            ? this._config.maxPeerInfoSize\n            : constants_1.DEFAULT_MAX_PEER_INFO_SIZE;\n        const safeMaxPeerInfoLength = Math.floor(constants_1.DEFAULT_WS_MAX_PAYLOAD / maxPeerInfoSize) - 1;\n        const selectedPeers = this._peerBook.getRandomizedPeerList(minimumPeerDiscoveryThreshold, maxPeerDiscoveryResponseLength);\n        const sanitizedPeerInfoList = selectedPeers\n            .filter(peer => !(peer.internalState && !peer.internalState.advertiseAddress))\n            .map(peer => ({\n            ipAddress: peer.ipAddress,\n            port: peer.port,\n        }));\n        const encodedPeersList = sanitizedPeerInfoList.map(peer => codec_1.encodePeerInfo(this._rpcSchemas.peerInfo, peer));\n        const validatedPeerList = utils_1.getByteSize(encodedPeersList) < wsMaxPayload\n            ? encodedPeersList\n            : encodedPeersList.slice(0, safeMaxPeerInfoLength);\n        const encodedResponse = lisk_codec_1.codec.encode(this._rpcSchemas.peerRequestResponse, {\n            peers: validatedPeerList,\n        });\n        request.end(encodedResponse);\n    }\n    _removeListeners(emitter) {\n        emitter.eventNames().forEach((eventName) => {\n            emitter.removeAllListeners(eventName);\n        });\n    }\n    _getBufferData(data) {\n        if (data === undefined) {\n            return undefined;\n        }\n        if (Buffer.isBuffer(data)) {\n            return data;\n        }\n        return Buffer.from(JSON.stringify(data), 'utf8');\n    }\n}\nexports.P2P = P2P;\n//# sourceMappingURL=p2p.js.map"]},"metadata":{},"sourceType":"script"}