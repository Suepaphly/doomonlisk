{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReportMisbehaviorPlugin = void 0;\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar lisk_chain_1 = require(\"@liskhq/lisk-chain\");\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar lisk_framework_1 = require(\"lisk-framework\");\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nvar db_1 = require(\"./db\");\n\nvar config = require(\"./defaults\");\n\nvar schema_1 = require(\"./schema\");\n\nvar packageJSON = require('../package.json');\n\nvar actionParamsSchema = {\n  $id: 'lisk/report_misbehavior/auth',\n  type: 'object',\n  required: ['password', 'enable'],\n  properties: {\n    password: {\n      type: 'string'\n    },\n    enable: {\n      type: 'boolean'\n    }\n  }\n};\n\nvar ReportMisbehaviorPlugin = /*#__PURE__*/function (_lisk_framework_1$Bas) {\n  _inherits(ReportMisbehaviorPlugin, _lisk_framework_1$Bas);\n\n  var _super = _createSuper(ReportMisbehaviorPlugin);\n\n  function ReportMisbehaviorPlugin() {\n    var _this;\n\n    _classCallCheck(this, ReportMisbehaviorPlugin);\n\n    _this = _super.apply(this, arguments);\n    _this._state = {\n      currentHeight: 0\n    };\n    return _this;\n  }\n\n  _createClass(ReportMisbehaviorPlugin, [{\n    key: \"defaults\",\n    get: function get() {\n      return config.defaultConfig;\n    }\n  }, {\n    key: \"events\",\n    get: function get() {\n      return [];\n    }\n  }, {\n    key: \"actions\",\n    get: function get() {\n      var _this2 = this;\n\n      return {\n        authorize: function authorize(params) {\n          var errors = lisk_validator_1.validator.validate(actionParamsSchema, params);\n\n          if (errors.length) {\n            throw new lisk_validator_1.LiskValidationError(_toConsumableArray(errors));\n          }\n\n          if (!_this2._options.encryptedPassphrase || typeof _this2._options.encryptedPassphrase !== 'string') {\n            throw new Error('Encrypted passphrase string must be set in the config.');\n          }\n\n          var enable = params.enable,\n              password = params.password;\n\n          try {\n            var parsedEncryptedPassphrase = lisk_cryptography_1.parseEncryptedPassphrase(_this2._options.encryptedPassphrase);\n            var passphrase = lisk_cryptography_1.decryptPassphraseWithPassword(parsedEncryptedPassphrase, password);\n\n            var _lisk_cryptography_1$ = lisk_cryptography_1.getAddressAndPublicKeyFromPassphrase(passphrase),\n                publicKey = _lisk_cryptography_1$.publicKey;\n\n            _this2._state.publicKey = enable ? publicKey : undefined;\n            _this2._state.passphrase = enable ? passphrase : undefined;\n            var changedState = enable ? 'enabled' : 'disabled';\n            return {\n              result: \"Successfully \".concat(changedState, \" the reporting of misbehavior.\")\n            };\n          } catch (error) {\n            throw new Error('Password given is not valid.');\n          }\n        }\n      };\n    }\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(channel) {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this._channel = channel;\n                this._options = lisk_utils_1.objects.mergeDeep({}, config.defaultConfig.default, this.options);\n                this._clearBlockHeadersInterval = this._options.clearBlockHeadersInterval || 60000;\n                _context.next = 5;\n                return db_1.getDBInstance(this._options.dataPath);\n\n              case 5:\n                this._pluginDB = _context.sent;\n\n                this._subscribeToChannel();\n\n                this._clearBlockHeadersIntervalId = setInterval(function () {\n                  db_1.clearBlockHeaders(_this3._pluginDB, _this3.schemas, _this3._state.currentHeight).catch(function (error) {\n                    return _this3._logger.error(error);\n                  });\n                }, this._clearBlockHeadersInterval);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function load(_x) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"unload\",\n    value: function () {\n      var _unload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                clearInterval(this._clearBlockHeadersIntervalId);\n                _context2.next = 3;\n                return this._pluginDB.close();\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function unload() {\n        return _unload.apply(this, arguments);\n      }\n\n      return unload;\n    }()\n  }, {\n    key: \"_subscribeToChannel\",\n    value: function _subscribeToChannel() {\n      var _this4 = this;\n\n      this._channel.subscribe('app:network:event', /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(eventData) {\n          var event, data, errors, blockData, _lisk_codec_1$codec$d, header, saved, decodedBlockHeader, contradictingBlock, encodedTransaction, result;\n\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  event = eventData.event, data = eventData.data;\n\n                  if (!(event === 'postBlock')) {\n                    _context3.next = 32;\n                    break;\n                  }\n\n                  errors = lisk_validator_1.validator.validate(schema_1.postBlockEventSchema, data);\n\n                  if (!(errors.length > 0)) {\n                    _context3.next = 6;\n                    break;\n                  }\n\n                  _this4._logger.error(errors, 'Invalid block data');\n\n                  return _context3.abrupt(\"return\");\n\n                case 6:\n                  blockData = data;\n                  _lisk_codec_1$codec$d = lisk_codec_1.codec.decode(_this4.schemas.block, Buffer.from(blockData.block, 'hex')), header = _lisk_codec_1$codec$d.header;\n                  _context3.prev = 8;\n                  _context3.next = 11;\n                  return db_1.saveBlockHeaders(_this4._pluginDB, _this4.schemas, header);\n\n                case 11:\n                  saved = _context3.sent;\n\n                  if (saved) {\n                    _context3.next = 14;\n                    break;\n                  }\n\n                  return _context3.abrupt(\"return\");\n\n                case 14:\n                  decodedBlockHeader = db_1.decodeBlockHeader(header, _this4.schemas);\n\n                  if (decodedBlockHeader.height > _this4._state.currentHeight) {\n                    _this4._state.currentHeight = decodedBlockHeader.height;\n                  }\n\n                  _context3.next = 18;\n                  return db_1.getContradictingBlockHeader(_this4._pluginDB, decodedBlockHeader, _this4.schemas);\n\n                case 18:\n                  contradictingBlock = _context3.sent;\n\n                  if (!(contradictingBlock && _this4._state.passphrase)) {\n                    _context3.next = 27;\n                    break;\n                  }\n\n                  _context3.next = 22;\n                  return _this4._createPoMTransaction(decodedBlockHeader, contradictingBlock);\n\n                case 22:\n                  encodedTransaction = _context3.sent;\n                  _context3.next = 25;\n                  return _this4._channel.invoke('app:postTransaction', {\n                    transaction: encodedTransaction\n                  });\n\n                case 25:\n                  result = _context3.sent;\n\n                  _this4._logger.debug('Sent Report misbehavior transaction', result.transactionId);\n\n                case 27:\n                  _context3.next = 32;\n                  break;\n\n                case 29:\n                  _context3.prev = 29;\n                  _context3.t0 = _context3[\"catch\"](8);\n\n                  _this4._logger.error(_context3.t0);\n\n                case 32:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, null, [[8, 29]]);\n        }));\n\n        return function (_x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"_createPoMTransaction\",\n    value: function () {\n      var _createPoMTransaction2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(contradictingBlock, decodedBlockHeader) {\n        var _a, pomAssetInfo, passphrase, encodedAccount, _lisk_codec_1$codec$d2, nonce, pomTransactionAsset, _yield$this$_channel$, networkIdentifier, encodedAsset, tx;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                pomAssetInfo = this.schemas.transactionsAssets.find(function (_ref2) {\n                  var moduleID = _ref2.moduleID,\n                      assetID = _ref2.assetID;\n                  return moduleID === 5 && assetID === 3;\n                });\n\n                if (pomAssetInfo) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                throw new Error('PoM asset schema is not registered in the application.');\n\n              case 3:\n                passphrase = this._state.passphrase;\n                _context4.next = 6;\n                return this._channel.invoke('app:getAccount', {\n                  address: lisk_cryptography_1.getAddressFromPassphrase(passphrase).toString('hex')\n                });\n\n              case 6:\n                encodedAccount = _context4.sent;\n                _lisk_codec_1$codec$d2 = lisk_codec_1.codec.decode(this.schemas.account, Buffer.from(encodedAccount, 'hex')), nonce = _lisk_codec_1$codec$d2.sequence.nonce;\n                pomTransactionAsset = {\n                  header1: decodedBlockHeader,\n                  header2: contradictingBlock\n                };\n                _context4.next = 11;\n                return this._channel.invoke('app:getNodeInfo');\n\n              case 11:\n                _yield$this$_channel$ = _context4.sent;\n                networkIdentifier = _yield$this$_channel$.networkIdentifier;\n                encodedAsset = lisk_codec_1.codec.encode(pomAssetInfo.schema, pomTransactionAsset);\n                tx = new lisk_chain_1.Transaction({\n                  moduleID: pomAssetInfo.moduleID,\n                  assetID: pomAssetInfo.assetID,\n                  nonce: nonce,\n                  senderPublicKey: (_a = this._state.publicKey) !== null && _a !== void 0 ? _a : lisk_cryptography_1.getAddressAndPublicKeyFromPassphrase(passphrase).publicKey,\n                  fee: BigInt(this._options.fee),\n                  asset: encodedAsset,\n                  signatures: []\n                });\n                tx.signatures.push(lisk_cryptography_1.signData(Buffer.concat([Buffer.from(networkIdentifier, 'hex'), tx.getSigningBytes()]), passphrase));\n                return _context4.abrupt(\"return\", tx.getBytes().toString('hex'));\n\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _createPoMTransaction(_x3, _x4) {\n        return _createPoMTransaction2.apply(this, arguments);\n      }\n\n      return _createPoMTransaction;\n    }()\n  }], [{\n    key: \"alias\",\n    get: function get() {\n      return 'reportMisbehavior';\n    }\n  }, {\n    key: \"info\",\n    get: function get() {\n      return {\n        author: packageJSON.author,\n        version: packageJSON.version,\n        name: packageJSON.name\n      };\n    }\n  }]);\n\n  return ReportMisbehaviorPlugin;\n}(lisk_framework_1.BasePlugin);\n\nexports.ReportMisbehaviorPlugin = ReportMisbehaviorPlugin;","map":{"version":3,"sources":["../src/report_misbehavior_plugin.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReportMisbehaviorPlugin = void 0;\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst lisk_chain_1 = require(\"@liskhq/lisk-chain\");\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_framework_1 = require(\"lisk-framework\");\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nconst db_1 = require(\"./db\");\nconst config = require(\"./defaults\");\nconst schema_1 = require(\"./schema\");\nconst packageJSON = require('../package.json');\nconst actionParamsSchema = {\n    $id: 'lisk/report_misbehavior/auth',\n    type: 'object',\n    required: ['password', 'enable'],\n    properties: {\n        password: {\n            type: 'string',\n        },\n        enable: {\n            type: 'boolean',\n        },\n    },\n};\nclass ReportMisbehaviorPlugin extends lisk_framework_1.BasePlugin {\n    constructor() {\n        super(...arguments);\n        this._state = { currentHeight: 0 };\n    }\n    static get alias() {\n        return 'reportMisbehavior';\n    }\n    static get info() {\n        return {\n            author: packageJSON.author,\n            version: packageJSON.version,\n            name: packageJSON.name,\n        };\n    }\n    get defaults() {\n        return config.defaultConfig;\n    }\n    get events() {\n        return [];\n    }\n    get actions() {\n        return {\n            authorize: (params) => {\n                const errors = lisk_validator_1.validator.validate(actionParamsSchema, params);\n                if (errors.length) {\n                    throw new lisk_validator_1.LiskValidationError([...errors]);\n                }\n                if (!this._options.encryptedPassphrase ||\n                    typeof this._options.encryptedPassphrase !== 'string') {\n                    throw new Error('Encrypted passphrase string must be set in the config.');\n                }\n                const { enable, password } = params;\n                try {\n                    const parsedEncryptedPassphrase = lisk_cryptography_1.parseEncryptedPassphrase(this._options.encryptedPassphrase);\n                    const passphrase = lisk_cryptography_1.decryptPassphraseWithPassword(parsedEncryptedPassphrase, password);\n                    const { publicKey } = lisk_cryptography_1.getAddressAndPublicKeyFromPassphrase(passphrase);\n                    this._state.publicKey = enable ? publicKey : undefined;\n                    this._state.passphrase = enable ? passphrase : undefined;\n                    const changedState = enable ? 'enabled' : 'disabled';\n                    return {\n                        result: `Successfully ${changedState} the reporting of misbehavior.`,\n                    };\n                }\n                catch (error) {\n                    throw new Error('Password given is not valid.');\n                }\n            },\n        };\n    }\n    async load(channel) {\n        this._channel = channel;\n        this._options = lisk_utils_1.objects.mergeDeep({}, config.defaultConfig.default, this.options);\n        this._clearBlockHeadersInterval = this._options.clearBlockHeadersInterval || 60000;\n        this._pluginDB = await db_1.getDBInstance(this._options.dataPath);\n        this._subscribeToChannel();\n        this._clearBlockHeadersIntervalId = setInterval(() => {\n            db_1.clearBlockHeaders(this._pluginDB, this.schemas, this._state.currentHeight).catch(error => this._logger.error(error));\n        }, this._clearBlockHeadersInterval);\n    }\n    async unload() {\n        clearInterval(this._clearBlockHeadersIntervalId);\n        await this._pluginDB.close();\n    }\n    _subscribeToChannel() {\n        this._channel.subscribe('app:network:event', async (eventData) => {\n            const { event, data } = eventData;\n            if (event === 'postBlock') {\n                const errors = lisk_validator_1.validator.validate(schema_1.postBlockEventSchema, data);\n                if (errors.length > 0) {\n                    this._logger.error(errors, 'Invalid block data');\n                    return;\n                }\n                const blockData = data;\n                const { header } = lisk_codec_1.codec.decode(this.schemas.block, Buffer.from(blockData.block, 'hex'));\n                try {\n                    const saved = await db_1.saveBlockHeaders(this._pluginDB, this.schemas, header);\n                    if (!saved) {\n                        return;\n                    }\n                    const decodedBlockHeader = db_1.decodeBlockHeader(header, this.schemas);\n                    if (decodedBlockHeader.height > this._state.currentHeight) {\n                        this._state.currentHeight = decodedBlockHeader.height;\n                    }\n                    const contradictingBlock = await db_1.getContradictingBlockHeader(this._pluginDB, decodedBlockHeader, this.schemas);\n                    if (contradictingBlock && this._state.passphrase) {\n                        const encodedTransaction = await this._createPoMTransaction(decodedBlockHeader, contradictingBlock);\n                        const result = await this._channel.invoke('app:postTransaction', {\n                            transaction: encodedTransaction,\n                        });\n                        this._logger.debug('Sent Report misbehavior transaction', result.transactionId);\n                    }\n                }\n                catch (error) {\n                    this._logger.error(error);\n                }\n            }\n        });\n    }\n    async _createPoMTransaction(contradictingBlock, decodedBlockHeader) {\n        var _a;\n        const pomAssetInfo = this.schemas.transactionsAssets.find(({ moduleID, assetID }) => moduleID === 5 && assetID === 3);\n        if (!pomAssetInfo) {\n            throw new Error('PoM asset schema is not registered in the application.');\n        }\n        const passphrase = this._state.passphrase;\n        const encodedAccount = await this._channel.invoke('app:getAccount', {\n            address: lisk_cryptography_1.getAddressFromPassphrase(passphrase).toString('hex'),\n        });\n        const { sequence: { nonce }, } = lisk_codec_1.codec.decode(this.schemas.account, Buffer.from(encodedAccount, 'hex'));\n        const pomTransactionAsset = {\n            header1: decodedBlockHeader,\n            header2: contradictingBlock,\n        };\n        const { networkIdentifier } = await this._channel.invoke('app:getNodeInfo');\n        const encodedAsset = lisk_codec_1.codec.encode(pomAssetInfo.schema, pomTransactionAsset);\n        const tx = new lisk_chain_1.Transaction({\n            moduleID: pomAssetInfo.moduleID,\n            assetID: pomAssetInfo.assetID,\n            nonce,\n            senderPublicKey: (_a = this._state.publicKey) !== null && _a !== void 0 ? _a : lisk_cryptography_1.getAddressAndPublicKeyFromPassphrase(passphrase).publicKey,\n            fee: BigInt(this._options.fee),\n            asset: encodedAsset,\n            signatures: [],\n        });\n        tx.signatures.push(lisk_cryptography_1.signData(Buffer.concat([Buffer.from(networkIdentifier, 'hex'), tx.getSigningBytes()]), passphrase));\n        return tx.getBytes().toString('hex');\n    }\n}\nexports.ReportMisbehaviorPlugin = ReportMisbehaviorPlugin;\n//# sourceMappingURL=report_misbehavior_plugin.js.map"]},"metadata":{},"sourceType":"script"}