{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNetworkIdentifier = exports.hash = void 0;\n\nvar crypto = require(\"crypto\");\n\nvar buffer_1 = require(\"./buffer\");\n\nvar cryptoHashSha256 = function cryptoHashSha256(data) {\n  var dataHash = crypto.createHash('sha256');\n  dataHash.update(data);\n  return dataHash.digest();\n};\n\nvar hash = function hash(data, format) {\n  if (Buffer.isBuffer(data)) {\n    return cryptoHashSha256(data);\n  }\n\n  if (typeof data === 'string' && typeof format === 'string') {\n    if (!['utf8', 'hex'].includes(format)) {\n      throw new Error('Unsupported string format. Currently only `hex` and `utf8` are supported.');\n    }\n\n    var encoded = format === 'utf8' ? Buffer.from(data, 'utf8') : buffer_1.hexToBuffer(data);\n    return cryptoHashSha256(encoded);\n  }\n\n  throw new Error(\"Unsupported data:\".concat(data, \" and format:\").concat(format !== null && format !== void 0 ? format : 'undefined', \". Currently only Buffers or hex and utf8 strings are supported.\"));\n};\n\nexports.hash = hash;\n\nvar getNetworkIdentifier = function getNetworkIdentifier(genesisBlockID, communityIdentifier) {\n  return exports.hash(Buffer.concat([genesisBlockID, Buffer.from(communityIdentifier, 'utf8')]));\n};\n\nexports.getNetworkIdentifier = getNetworkIdentifier;","map":{"version":3,"sources":["../src/hash.ts"],"names":[],"mappings":";;;;;;;AAcA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,IAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,IAAD,EAAyB;AACjD,MAAM,QAAQ,GAAG,MAAM,CAAC,UAAP,CAAkB,QAAlB,CAAjB;AACA,EAAA,QAAQ,CAAC,MAAT,CAAgB,IAAhB;AAEA,SAAO,QAAQ,CAAC,MAAT,EAAP;AACA,CALD;;AAOO,IAAM,IAAI,GAAG,SAAP,IAAO,CAAC,IAAD,EAAwB,MAAxB,EAAmD;AACtE,MAAI,MAAM,CAAC,QAAP,CAAgB,IAAhB,CAAJ,EAA2B;AAC1B,WAAO,gBAAgB,CAAC,IAAD,CAAvB;AACA;;AAED,MAAI,OAAO,IAAP,KAAgB,QAAhB,IAA4B,OAAO,MAAP,KAAkB,QAAlD,EAA4D;AAC3D,QAAI,CAAC,CAAC,MAAD,EAAS,KAAT,EAAgB,QAAhB,CAAyB,MAAzB,CAAL,EAAuC;AACtC,YAAM,IAAI,KAAJ,CAAU,2EAAV,CAAN;AACA;;AACD,QAAM,OAAO,GAAG,MAAM,KAAK,MAAX,GAAoB,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,MAAlB,CAApB,GAAgD,QAAA,CAAA,WAAA,CAAY,IAAZ,CAAhE;AAEA,WAAO,gBAAgB,CAAC,OAAD,CAAvB;AACA;;AAED,QAAM,IAAI,KAAJ,4BACe,IADf,yBAEJ,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAA,MAAA,GAAU,WAFN,qEAAN;AAKA,CAnBM;;AAAM,OAAA,CAAA,IAAA,GAAI,IAAJ;;AAqBN,IAAM,oBAAoB,GAAG,SAAvB,oBAAuB,CAAC,cAAD,EAAyB,mBAAzB;AAAA,SACnC,OAAA,CAAA,IAAA,CAAK,MAAM,CAAC,MAAP,CAAc,CAAC,cAAD,EAAiB,MAAM,CAAC,IAAP,CAAY,mBAAZ,EAAiC,MAAjC,CAAjB,CAAd,CAAL,CADmC;AAAA,CAA7B;;AAAM,OAAA,CAAA,oBAAA,GAAoB,oBAApB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNetworkIdentifier = exports.hash = void 0;\nconst crypto = require(\"crypto\");\nconst buffer_1 = require(\"./buffer\");\nconst cryptoHashSha256 = (data) => {\n    const dataHash = crypto.createHash('sha256');\n    dataHash.update(data);\n    return dataHash.digest();\n};\nconst hash = (data, format) => {\n    if (Buffer.isBuffer(data)) {\n        return cryptoHashSha256(data);\n    }\n    if (typeof data === 'string' && typeof format === 'string') {\n        if (!['utf8', 'hex'].includes(format)) {\n            throw new Error('Unsupported string format. Currently only `hex` and `utf8` are supported.');\n        }\n        const encoded = format === 'utf8' ? Buffer.from(data, 'utf8') : buffer_1.hexToBuffer(data);\n        return cryptoHashSha256(encoded);\n    }\n    throw new Error(`Unsupported data:${data} and format:${format !== null && format !== void 0 ? format : 'undefined'}. Currently only Buffers or hex and utf8 strings are supported.`);\n};\nexports.hash = hash;\nconst getNetworkIdentifier = (genesisBlockID, communityIdentifier) => exports.hash(Buffer.concat([genesisBlockID, Buffer.from(communityIdentifier, 'utf8')]));\nexports.getNetworkIdentifier = getNetworkIdentifier;\n//# sourceMappingURL=hash.js.map"]},"metadata":{},"sourceType":"script"}