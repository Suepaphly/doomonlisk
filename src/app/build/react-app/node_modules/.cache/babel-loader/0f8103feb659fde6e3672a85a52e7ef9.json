{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransferAsset = void 0;\n\nvar constants_1 = require(\"./constants\");\n\nvar base_asset_1 = require(\"../base_asset\");\n\nvar TransferAsset = /*#__PURE__*/function (_base_asset_1$BaseAss) {\n  _inherits(TransferAsset, _base_asset_1$BaseAss);\n\n  var _super = _createSuper(TransferAsset);\n\n  function TransferAsset(minRemainingBalance) {\n    var _this;\n\n    _classCallCheck(this, TransferAsset);\n\n    _this = _super.call(this);\n    _this.name = 'transfer';\n    _this.id = 0;\n    _this.schema = {\n      $id: 'lisk/transfer-asset',\n      title: 'Transfer transaction asset',\n      type: 'object',\n      required: ['amount', 'recipientAddress', 'data'],\n      properties: {\n        amount: {\n          dataType: 'uint64',\n          fieldNumber: 1\n        },\n        recipientAddress: {\n          dataType: 'bytes',\n          fieldNumber: 2,\n          minLength: 20,\n          maxLength: 20\n        },\n        data: {\n          dataType: 'string',\n          fieldNumber: 3,\n          minLength: 0,\n          maxLength: 64\n        }\n      }\n    };\n    _this._minRemainingBalance = minRemainingBalance;\n    return _this;\n  }\n\n  _createClass(TransferAsset, [{\n    key: \"apply\",\n    value: function () {\n      var _apply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var asset, transaction, stateStore, sender, recipient;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                asset = _ref.asset, transaction = _ref.transaction, stateStore = _ref.stateStore;\n                _context.next = 3;\n                return stateStore.account.get(transaction.senderAddress);\n\n              case 3:\n                sender = _context.sent;\n\n                if (sender) {\n                  _context.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Account does not exist for senderAddress: \".concat(transaction.senderAddress.toString('hex')));\n\n              case 6:\n                sender.token.balance -= asset.amount;\n                _context.next = 9;\n                return stateStore.account.set(sender.address, sender);\n\n              case 9:\n                _context.next = 11;\n                return stateStore.account.getOrDefault(asset.recipientAddress);\n\n              case 11:\n                recipient = _context.sent;\n                recipient.token.balance += asset.amount;\n\n                if (!(recipient.token.balance > BigInt(constants_1.MAX_TRANSACTION_AMOUNT))) {\n                  _context.next = 15;\n                  break;\n                }\n\n                throw new Error(\"Invalid transfer amount: \".concat(asset.amount.toString(), \". Maximum allowed balance for recipient is: \").concat(constants_1.MAX_TRANSACTION_AMOUNT));\n\n              case 15:\n                if (!(recipient.token.balance < this._minRemainingBalance)) {\n                  _context.next = 17;\n                  break;\n                }\n\n                throw new Error(\"Recipient account \".concat(recipient.address.toString('hex'), \" does not meet the minimum remaining balance requirement: \").concat(this._minRemainingBalance, \".\"));\n\n              case 17:\n                _context.next = 19;\n                return stateStore.account.set(recipient.address, recipient);\n\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function apply(_x) {\n        return _apply.apply(this, arguments);\n      }\n\n      return apply;\n    }()\n  }]);\n\n  return TransferAsset;\n}(base_asset_1.BaseAsset);\n\nexports.TransferAsset = TransferAsset;","map":{"version":3,"sources":["../../../src/modules/token/transfer_asset.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAcA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;IAGa,a;;;;;AA6BZ,yBAAmB,mBAAnB,EAA8C;AAAA;;AAAA;;AAC7C;AA7BM,UAAA,IAAA,GAAO,UAAP;AACA,UAAA,EAAA,GAAK,CAAL;AACA,UAAA,MAAA,GAAS;AACf,MAAA,GAAG,EAAE,qBADU;AAEf,MAAA,KAAK,EAAE,4BAFQ;AAGf,MAAA,IAAI,EAAE,QAHS;AAIf,MAAA,QAAQ,EAAE,CAAC,QAAD,EAAW,kBAAX,EAA+B,MAA/B,CAJK;AAKf,MAAA,UAAU,EAAE;AACX,QAAA,MAAM,EAAE;AACP,UAAA,QAAQ,EAAE,QADH;AAEP,UAAA,WAAW,EAAE;AAFN,SADG;AAKX,QAAA,gBAAgB,EAAE;AACjB,UAAA,QAAQ,EAAE,OADO;AAEjB,UAAA,WAAW,EAAE,CAFI;AAGjB,UAAA,SAAS,EAAE,EAHM;AAIjB,UAAA,SAAS,EAAE;AAJM,SALP;AAWX,QAAA,IAAI,EAAE;AACL,UAAA,QAAQ,EAAE,QADL;AAEL,UAAA,WAAW,EAAE,CAFR;AAGL,UAAA,SAAS,EAAE,CAHN;AAIL,UAAA,SAAS,EAAE;AAJN;AAXK;AALG,KAAT;AA4BN,UAAK,oBAAL,GAA4B,mBAA5B;AAF6C;AAG7C;;;;;4EAEM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAc,gBAAA,KAAd,QAAc,KAAd,EAAqB,WAArB,QAAqB,WAArB,EAAkC,UAAlC,QAAkC,UAAlC;AAAA;AAAA,uBACe,UAAU,CAAC,OAAX,CAAmB,GAAnB,CAAqC,WAAW,CAAC,aAAjD,CADf;;AAAA;AACA,gBAAA,MADA;;AAAA,oBAED,MAFC;AAAA;AAAA;AAAA;;AAAA,sBAGC,IAAI,KAAJ,qDACwC,WAAW,CAAC,aAAZ,CAA0B,QAA1B,CAAmC,KAAnC,CADxC,EAHD;;AAAA;AAON,gBAAA,MAAM,CAAC,KAAP,CAAa,OAAb,IAAwB,KAAK,CAAC,MAA9B;AAPM;AAAA,uBAQA,UAAU,CAAC,OAAX,CAAmB,GAAnB,CAAuB,MAAM,CAAC,OAA9B,EAAuC,MAAvC,CARA;;AAAA;AAAA;AAAA,uBASkB,UAAU,CAAC,OAAX,CAAmB,YAAnB,CAA8C,KAAK,CAAC,gBAApD,CATlB;;AAAA;AASA,gBAAA,SATA;AAUN,gBAAA,SAAS,CAAC,KAAV,CAAgB,OAAhB,IAA2B,KAAK,CAAC,MAAjC;;AAVM,sBAWF,SAAS,CAAC,KAAV,CAAgB,OAAhB,GAA0B,MAAM,CAAC,WAAA,CAAA,sBAAD,CAX9B;AAAA;AAAA;AAAA;;AAAA,sBAYC,IAAI,KAAJ,oCACuB,KAAK,CAAC,MAAN,CAAa,QAAb,EADvB,yDAC6F,WAAA,CAAA,sBAD7F,EAZD;;AAAA;AAAA,sBAiBF,SAAS,CAAC,KAAV,CAAgB,OAAhB,GAA0B,KAAK,oBAjB7B;AAAA;AAAA;AAAA;;AAAA,sBAkBC,IAAI,KAAJ,6BACgB,SAAS,CAAC,OAAV,CAAkB,QAAlB,CACpB,KADoB,CADhB,uEAGyD,KAAK,oBAH9D,OAlBD;;AAAA;AAAA;AAAA,uBAyBA,UAAU,CAAC,OAAX,CAAmB,GAAnB,CAAuB,SAAS,CAAC,OAAjC,EAA0C,SAA1C,CAzBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;EAlC2B,YAAA,CAAA,S;;AAAnC,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransferAsset = void 0;\nconst constants_1 = require(\"./constants\");\nconst base_asset_1 = require(\"../base_asset\");\nclass TransferAsset extends base_asset_1.BaseAsset {\n    constructor(minRemainingBalance) {\n        super();\n        this.name = 'transfer';\n        this.id = 0;\n        this.schema = {\n            $id: 'lisk/transfer-asset',\n            title: 'Transfer transaction asset',\n            type: 'object',\n            required: ['amount', 'recipientAddress', 'data'],\n            properties: {\n                amount: {\n                    dataType: 'uint64',\n                    fieldNumber: 1,\n                },\n                recipientAddress: {\n                    dataType: 'bytes',\n                    fieldNumber: 2,\n                    minLength: 20,\n                    maxLength: 20,\n                },\n                data: {\n                    dataType: 'string',\n                    fieldNumber: 3,\n                    minLength: 0,\n                    maxLength: 64,\n                },\n            },\n        };\n        this._minRemainingBalance = minRemainingBalance;\n    }\n    async apply({ asset, transaction, stateStore }) {\n        const sender = await stateStore.account.get(transaction.senderAddress);\n        if (!sender) {\n            throw new Error(`Account does not exist for senderAddress: ${transaction.senderAddress.toString('hex')}`);\n        }\n        sender.token.balance -= asset.amount;\n        await stateStore.account.set(sender.address, sender);\n        const recipient = await stateStore.account.getOrDefault(asset.recipientAddress);\n        recipient.token.balance += asset.amount;\n        if (recipient.token.balance > BigInt(constants_1.MAX_TRANSACTION_AMOUNT)) {\n            throw new Error(`Invalid transfer amount: ${asset.amount.toString()}. Maximum allowed balance for recipient is: ${constants_1.MAX_TRANSACTION_AMOUNT}`);\n        }\n        if (recipient.token.balance < this._minRemainingBalance) {\n            throw new Error(`Recipient account ${recipient.address.toString('hex')} does not meet the minimum remaining balance requirement: ${this._minRemainingBalance}.`);\n        }\n        await stateStore.account.set(recipient.address, recipient);\n    }\n}\nexports.TransferAsset = TransferAsset;\n//# sourceMappingURL=transfer_asset.js.map"]},"metadata":{},"sourceType":"script"}