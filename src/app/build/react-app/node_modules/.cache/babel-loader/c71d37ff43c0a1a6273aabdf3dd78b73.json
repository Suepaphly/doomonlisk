{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ForgerPlugin = void 0;\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar lisk_framework_1 = require(\"lisk-framework\");\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nvar db_1 = require(\"./db\");\n\nvar config = require(\"./defaults\");\n\nvar controllers = require(\"./controllers\");\n\nvar BLOCKS_BATCH_TO_SYNC = 1000;\n\nvar packageJSON = require('../package.json');\n\nvar getBinaryAddress = function getBinaryAddress(hexAddressStr) {\n  return Buffer.from(hexAddressStr, 'hex').toString('binary');\n};\n\nvar getAddressBuffer = function getAddressBuffer(hexAddressStr) {\n  return Buffer.from(hexAddressStr, 'hex');\n};\n\nvar ForgerPlugin = /*#__PURE__*/function (_lisk_framework_1$Bas) {\n  _inherits(ForgerPlugin, _lisk_framework_1$Bas);\n\n  var _super = _createSuper(ForgerPlugin);\n\n  function ForgerPlugin() {\n    _classCallCheck(this, ForgerPlugin);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ForgerPlugin, [{\n    key: \"defaults\",\n    get: function get() {\n      return config.defaultConfig;\n    }\n  }, {\n    key: \"events\",\n    get: function get() {\n      return ['block:created', 'block:missed'];\n    }\n  }, {\n    key: \"actions\",\n    get: function get() {\n      var _this = this;\n\n      return {\n        getVoters: function () {\n          var _getVoters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    return _context.abrupt(\"return\", controllers.voters.getVoters(_this._channel, _this.codec, _this._forgerPluginDB));\n\n                  case 1:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          function getVoters() {\n            return _getVoters.apply(this, arguments);\n          }\n\n          return getVoters;\n        }(),\n        getForgingInfo: function () {\n          var _getForgingInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n            return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    return _context2.abrupt(\"return\", controllers.forgingInfo.getForgingInfo(_this._channel, _this.codec, _this._forgerPluginDB));\n\n                  case 1:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, _callee2);\n          }));\n\n          function getForgingInfo() {\n            return _getForgingInfo.apply(this, arguments);\n          }\n\n          return getForgingInfo;\n        }()\n      };\n    }\n  }, {\n    key: \"load\",\n    value: function () {\n      var _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(channel) {\n        var _this2 = this;\n\n        var options;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                options = lisk_utils_1.objects.mergeDeep({}, config.defaultConfig.default, this.options);\n                this._channel = channel;\n                _context4.next = 4;\n                return db_1.getDBInstance(options.dataPath);\n\n              case 4:\n                this._forgerPluginDB = _context4.sent;\n\n                this._channel.once('app:ready', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return _this2._setForgersList();\n\n                        case 2:\n                          _context3.next = 4;\n                          return _this2._setTransactionFees();\n\n                        case 4:\n                          _this2._syncingWithNode = true;\n                          _context3.next = 7;\n                          return _this2._syncForgerInfo();\n\n                        case 7:\n                          _this2._syncingWithNode = false;\n\n                          _this2._subscribeToChannel();\n\n                        case 9:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3);\n                })));\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function load(_x) {\n        return _load.apply(this, arguments);\n      }\n\n      return load;\n    }()\n  }, {\n    key: \"unload\",\n    value: function () {\n      var _unload = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._forgerPluginDB.close();\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function unload() {\n        return _unload.apply(this, arguments);\n      }\n\n      return unload;\n    }()\n  }, {\n    key: \"_setForgersList\",\n    value: function () {\n      var _setForgersList2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var forgersList, _iterator, _step, _step$value, address, forging;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this._forgersList = new lisk_utils_1.dataStructures.BufferMap();\n                _context6.next = 3;\n                return this._channel.invoke('app:getForgingStatus');\n\n              case 3:\n                forgersList = _context6.sent;\n                _iterator = _createForOfIteratorHelper(forgersList);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _step$value = _step.value, address = _step$value.address, forging = _step$value.forging;\n\n                    this._forgersList.set(Buffer.from(address, 'hex'), forging);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _setForgersList() {\n        return _setForgersList2.apply(this, arguments);\n      }\n\n      return _setForgersList;\n    }()\n  }, {\n    key: \"_setTransactionFees\",\n    value: function () {\n      var _setTransactionFees2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _yield$this$_channel$, genesisConfig;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._channel.invoke('app:getNodeInfo');\n\n              case 2:\n                _yield$this$_channel$ = _context7.sent;\n                genesisConfig = _yield$this$_channel$.genesisConfig;\n                this._transactionFees = {\n                  minFeePerByte: genesisConfig.minFeePerByte,\n                  baseFees: genesisConfig.baseFees\n                };\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _setTransactionFees() {\n        return _setTransactionFees2.apply(this, arguments);\n      }\n\n      return _setTransactionFees;\n    }()\n  }, {\n    key: \"_getForgerHeaderAndPayloadInfo\",\n    value: function _getForgerHeaderAndPayloadInfo(block) {\n      var _this$codec$decodeBlo = this.codec.decodeBlock(block),\n          header = _this$codec$decodeBlo.header,\n          payload = _this$codec$decodeBlo.payload;\n\n      var forgerAddress = lisk_cryptography_1.getAddressFromPublicKey(Buffer.from(header.generatorPublicKey, 'hex')).toString('hex');\n      var forgerAddressBuffer = getAddressBuffer(forgerAddress);\n      var forgerAddressBinary = getBinaryAddress(forgerAddress);\n      return {\n        forgerAddress: forgerAddress,\n        forgerAddressBuffer: forgerAddressBuffer,\n        forgerAddressBinary: forgerAddressBinary,\n        header: header,\n        payload: payload\n      };\n    }\n  }, {\n    key: \"_syncForgerInfo\",\n    value: function () {\n      var _syncForgerInfo2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var _this$codec$decodeBlo2, lastBlockHeight, _yield$db_1$getForger, syncUptoHeight, _yield$this$_channel$2, genesisHeight, forgerPluginSyncedHeight, needleHeight, toHeight, blocks, _iterator2, _step2, block, forgerPayloadInfo;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.t0 = this.codec;\n                _context8.next = 3;\n                return this._channel.invoke('app:getLastBlock');\n\n              case 3:\n                _context8.t1 = _context8.sent;\n                _this$codec$decodeBlo2 = _context8.t0.decodeBlock.call(_context8.t0, _context8.t1);\n                lastBlockHeight = _this$codec$decodeBlo2.header.height;\n                _context8.next = 8;\n                return db_1.getForgerSyncInfo(this._forgerPluginDB);\n\n              case 8:\n                _yield$db_1$getForger = _context8.sent;\n                syncUptoHeight = _yield$db_1$getForger.syncUptoHeight;\n                _context8.next = 12;\n                return this._channel.invoke('app:getNodeInfo');\n\n              case 12:\n                _yield$this$_channel$2 = _context8.sent;\n                genesisHeight = _yield$this$_channel$2.genesisHeight;\n                forgerPluginSyncedHeight = syncUptoHeight === 0 ? genesisHeight : syncUptoHeight;\n\n                if (!(forgerPluginSyncedHeight === lastBlockHeight)) {\n                  _context8.next = 17;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\");\n\n              case 17:\n                if (!(forgerPluginSyncedHeight > lastBlockHeight)) {\n                  _context8.next = 23;\n                  break;\n                }\n\n                _context8.next = 20;\n                return this._forgerPluginDB.clear();\n\n              case 20:\n                needleHeight = genesisHeight + 1;\n                _context8.next = 24;\n                break;\n\n              case 23:\n                needleHeight = forgerPluginSyncedHeight + 1;\n\n              case 24:\n                if (!(needleHeight <= lastBlockHeight)) {\n                  _context8.next = 50;\n                  break;\n                }\n\n                toHeight = needleHeight + (needleHeight + BLOCKS_BATCH_TO_SYNC <= lastBlockHeight ? BLOCKS_BATCH_TO_SYNC : lastBlockHeight - needleHeight);\n                _context8.next = 28;\n                return this._channel.invoke('app:getBlocksByHeightBetween', {\n                  from: needleHeight,\n                  to: toHeight\n                });\n\n              case 28:\n                blocks = _context8.sent;\n                _iterator2 = _createForOfIteratorHelper(blocks.reverse());\n                _context8.prev = 30;\n\n                _iterator2.s();\n\n              case 32:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context8.next = 39;\n                  break;\n                }\n\n                block = _step2.value;\n                forgerPayloadInfo = this._getForgerHeaderAndPayloadInfo(block);\n                _context8.next = 37;\n                return this._addForgerInfo(block, forgerPayloadInfo);\n\n              case 37:\n                _context8.next = 32;\n                break;\n\n              case 39:\n                _context8.next = 44;\n                break;\n\n              case 41:\n                _context8.prev = 41;\n                _context8.t2 = _context8[\"catch\"](30);\n\n                _iterator2.e(_context8.t2);\n\n              case 44:\n                _context8.prev = 44;\n\n                _iterator2.f();\n\n                return _context8.finish(44);\n\n              case 47:\n                needleHeight = toHeight + 1;\n                _context8.next = 24;\n                break;\n\n              case 50:\n                _context8.next = 52;\n                return db_1.setForgerSyncInfo(this._forgerPluginDB, lastBlockHeight);\n\n              case 52:\n                _context8.next = 54;\n                return this._syncForgerInfo();\n\n              case 54:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[30, 41, 44, 47]]);\n      }));\n\n      function _syncForgerInfo() {\n        return _syncForgerInfo2.apply(this, arguments);\n      }\n\n      return _syncForgerInfo;\n    }()\n  }, {\n    key: \"_subscribeToChannel\",\n    value: function _subscribeToChannel() {\n      var _this3 = this;\n\n      this._channel.subscribe('app:block:new', /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(data) {\n          var block, forgerPayloadInfo, height;\n          return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  block = data.block;\n                  forgerPayloadInfo = _this3._getForgerHeaderAndPayloadInfo(block);\n                  height = forgerPayloadInfo.header.height;\n                  _context9.next = 5;\n                  return _this3._addForgerInfo(block, forgerPayloadInfo);\n\n                case 5:\n                  _context9.next = 7;\n                  return db_1.setForgerSyncInfo(_this3._forgerPluginDB, height);\n\n                case 7:\n                case \"end\":\n                  return _context9.stop();\n              }\n            }\n          }, _callee9);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n\n      this._channel.subscribe('app:block:delete', /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(data) {\n          var block, forgerPayloadInfo, height;\n          return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  block = data.block;\n                  forgerPayloadInfo = _this3._getForgerHeaderAndPayloadInfo(block);\n                  height = forgerPayloadInfo.header.height;\n                  _context10.next = 5;\n                  return _this3._revertForgerInfo(block, forgerPayloadInfo);\n\n                case 5:\n                  _context10.next = 7;\n                  return db_1.setForgerSyncInfo(_this3._forgerPluginDB, height);\n\n                case 7:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee10);\n        }));\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"_addForgerInfo\",\n    value: function () {\n      var _addForgerInfo2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(encodedBlock, forgerPayloadInfo) {\n        var forgerAddress, forgerAddressBuffer, forgerAddressBinary, _forgerPayloadInfo$he, reward, height, payload, forgerInfo;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                forgerAddress = forgerPayloadInfo.forgerAddress, forgerAddressBuffer = forgerPayloadInfo.forgerAddressBuffer, forgerAddressBinary = forgerPayloadInfo.forgerAddressBinary, _forgerPayloadInfo$he = forgerPayloadInfo.header, reward = _forgerPayloadInfo$he.reward, height = _forgerPayloadInfo$he.height, payload = forgerPayloadInfo.payload;\n                _context11.next = 3;\n                return db_1.getForgerInfo(this._forgerPluginDB, forgerAddressBinary);\n\n              case 3:\n                forgerInfo = _context11.sent;\n\n                if (!this._forgersList.has(forgerAddressBuffer)) {\n                  _context11.next = 11;\n                  break;\n                }\n\n                forgerInfo.totalProducedBlocks += 1;\n                forgerInfo.totalReceivedRewards += BigInt(reward);\n                forgerInfo.totalReceivedFees += this._getFee(payload, encodedBlock);\n\n                this._channel.publish('forger:block:created', {\n                  reward: reward,\n                  forgerAddress: forgerAddress,\n                  height: height,\n                  timestamp: Date.now()\n                });\n\n                _context11.next = 11;\n                return db_1.setForgerInfo(this._forgerPluginDB, forgerAddressBinary, _objectSpread({}, forgerInfo));\n\n              case 11:\n                _context11.next = 13;\n                return this._addVotesReceived(payload);\n\n              case 13:\n                _context11.next = 15;\n                return this._updateMissedBlock(encodedBlock);\n\n              case 15:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function _addForgerInfo(_x4, _x5) {\n        return _addForgerInfo2.apply(this, arguments);\n      }\n\n      return _addForgerInfo;\n    }()\n  }, {\n    key: \"_revertForgerInfo\",\n    value: function () {\n      var _revertForgerInfo2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(encodedBlock, forgerPayloadInfo) {\n        var forgerAddressBuffer, forgerAddressBinary, reward, payload, forgerInfo;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                forgerAddressBuffer = forgerPayloadInfo.forgerAddressBuffer, forgerAddressBinary = forgerPayloadInfo.forgerAddressBinary, reward = forgerPayloadInfo.header.reward, payload = forgerPayloadInfo.payload;\n                _context12.next = 3;\n                return db_1.getForgerInfo(this._forgerPluginDB, forgerAddressBinary);\n\n              case 3:\n                forgerInfo = _context12.sent;\n\n                if (!this._forgersList.has(forgerAddressBuffer)) {\n                  _context12.next = 10;\n                  break;\n                }\n\n                forgerInfo.totalProducedBlocks -= 1;\n                forgerInfo.totalReceivedRewards -= BigInt(reward);\n                forgerInfo.totalReceivedFees -= this._getFee(payload, encodedBlock);\n                _context12.next = 10;\n                return db_1.setForgerInfo(this._forgerPluginDB, forgerAddressBinary, _objectSpread({}, forgerInfo));\n\n              case 10:\n                _context12.next = 12;\n                return this._revertVotesReceived(payload);\n\n              case 12:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function _revertForgerInfo(_x6, _x7) {\n        return _revertForgerInfo2.apply(this, arguments);\n      }\n\n      return _revertForgerInfo;\n    }()\n  }, {\n    key: \"_getForgerReceivedVotes\",\n    value: function _getForgerReceivedVotes(payload) {\n      var _this4 = this;\n\n      var forgerReceivedVotes = {};\n\n      var _iterator3 = _createForOfIteratorHelper(payload),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var trx = _step3.value;\n\n          if (trx.moduleID === 5 && trx.assetID === 1) {\n            (function () {\n              var senderAddress = lisk_cryptography_1.getAddressFromPublicKey(Buffer.from(trx.senderPublicKey, 'hex'));\n              trx.asset.votes.reduce(function (acc, curr) {\n                if (_this4._forgersList.has(getAddressBuffer(curr.delegateAddress)) && acc[curr.delegateAddress]) {\n                  acc[curr.delegateAddress].amount += BigInt(curr.amount);\n                } else {\n                  acc[curr.delegateAddress] = {\n                    address: senderAddress,\n                    amount: BigInt(curr.amount)\n                  };\n                }\n\n                return acc;\n              }, forgerReceivedVotes);\n            })();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return forgerReceivedVotes;\n    }\n  }, {\n    key: \"_addVotesReceived\",\n    value: function () {\n      var _addVotesReceived2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(payload) {\n        var _this5 = this;\n\n        var forgerReceivedVotes, _loop, _i, _Object$entries;\n\n        return _regeneratorRuntime.wrap(function _callee13$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                forgerReceivedVotes = this._getForgerReceivedVotes(payload);\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var _Object$entries$_i, delegateAddress, votesReceived, forgerInfo, voterIndex;\n\n                  return _regeneratorRuntime.wrap(function _loop$(_context13) {\n                    while (1) {\n                      switch (_context13.prev = _context13.next) {\n                        case 0:\n                          _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), delegateAddress = _Object$entries$_i[0], votesReceived = _Object$entries$_i[1];\n                          _context13.next = 3;\n                          return db_1.getForgerInfo(_this5._forgerPluginDB, getBinaryAddress(delegateAddress));\n\n                        case 3:\n                          forgerInfo = _context13.sent;\n                          voterIndex = forgerInfo.votesReceived.findIndex(function (aVote) {\n                            return aVote.address.equals(votesReceived.address);\n                          });\n\n                          if (voterIndex === -1) {\n                            forgerInfo.votesReceived.push(votesReceived);\n                          } else {\n                            forgerInfo.votesReceived[voterIndex].amount += votesReceived.amount;\n\n                            if (forgerInfo.votesReceived[voterIndex].amount === BigInt(0)) {\n                              forgerInfo.votesReceived.splice(voterIndex, 1);\n                            }\n                          }\n\n                          _context13.next = 8;\n                          return db_1.setForgerInfo(_this5._forgerPluginDB, getBinaryAddress(delegateAddress), forgerInfo);\n\n                        case 8:\n                        case \"end\":\n                          return _context13.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n                _i = 0, _Object$entries = Object.entries(forgerReceivedVotes);\n\n              case 3:\n                if (!(_i < _Object$entries.length)) {\n                  _context14.next = 8;\n                  break;\n                }\n\n                return _context14.delegateYield(_loop(), \"t0\", 5);\n\n              case 5:\n                _i++;\n                _context14.next = 3;\n                break;\n\n              case 8:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function _addVotesReceived(_x8) {\n        return _addVotesReceived2.apply(this, arguments);\n      }\n\n      return _addVotesReceived;\n    }()\n  }, {\n    key: \"_revertVotesReceived\",\n    value: function () {\n      var _revertVotesReceived2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(payload) {\n        var _this6 = this;\n\n        var forgerReceivedVotes, _loop2, _i2, _Object$entries2;\n\n        return _regeneratorRuntime.wrap(function _callee14$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                forgerReceivedVotes = this._getForgerReceivedVotes(payload);\n                _loop2 = /*#__PURE__*/_regeneratorRuntime.mark(function _loop2() {\n                  var _Object$entries2$_i, delegateAddress, votesReceived, forgerInfo, voterIndex;\n\n                  return _regeneratorRuntime.wrap(function _loop2$(_context15) {\n                    while (1) {\n                      switch (_context15.prev = _context15.next) {\n                        case 0:\n                          _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2), delegateAddress = _Object$entries2$_i[0], votesReceived = _Object$entries2$_i[1];\n                          _context15.next = 3;\n                          return db_1.getForgerInfo(_this6._forgerPluginDB, getBinaryAddress(delegateAddress));\n\n                        case 3:\n                          forgerInfo = _context15.sent;\n                          voterIndex = forgerInfo.votesReceived.findIndex(function (aVote) {\n                            return aVote.address.equals(votesReceived.address);\n                          });\n\n                          if (!(voterIndex !== -1)) {\n                            _context15.next = 10;\n                            break;\n                          }\n\n                          forgerInfo.votesReceived[voterIndex].amount -= BigInt(votesReceived.amount);\n\n                          if (forgerInfo.votesReceived[voterIndex].amount === BigInt(0)) {\n                            forgerInfo.votesReceived.splice(voterIndex, 1);\n                          }\n\n                          _context15.next = 10;\n                          return db_1.setForgerInfo(_this6._forgerPluginDB, getBinaryAddress(delegateAddress), forgerInfo);\n\n                        case 10:\n                        case \"end\":\n                          return _context15.stop();\n                      }\n                    }\n                  }, _loop2);\n                });\n                _i2 = 0, _Object$entries2 = Object.entries(forgerReceivedVotes);\n\n              case 3:\n                if (!(_i2 < _Object$entries2.length)) {\n                  _context16.next = 8;\n                  break;\n                }\n\n                return _context16.delegateYield(_loop2(), \"t0\", 5);\n\n              case 5:\n                _i2++;\n                _context16.next = 3;\n                break;\n\n              case 8:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function _revertVotesReceived(_x9) {\n        return _revertVotesReceived2.apply(this, arguments);\n      }\n\n      return _revertVotesReceived;\n    }()\n  }, {\n    key: \"_getFee\",\n    value: function _getFee(payload, block) {\n      var _this7 = this;\n\n      var _a, _b;\n\n      var _this$codec$decodeRaw = this.codec.decodeRawBlock(block),\n          payloadBuffer = _this$codec$decodeRaw.payload;\n\n      var fee = BigInt(0);\n\n      var _loop3 = function _loop3(index) {\n        var trx = payload[index];\n        var baseFee = (_b = (_a = _this7._transactionFees.baseFees.find(function (bf) {\n          return bf.moduleID === trx.moduleID && bf.assetID === trx.assetID;\n        })) === null || _a === void 0 ? void 0 : _a.baseFee) !== null && _b !== void 0 ? _b : '0';\n        var minFeeRequired = BigInt(baseFee) + BigInt(_this7._transactionFees.minFeePerByte) * BigInt(payloadBuffer[index].length);\n        fee += BigInt(trx.fee) - minFeeRequired;\n      };\n\n      for (var index = 0; index < payload.length; index += 1) {\n        _loop3(index);\n      }\n\n      return fee;\n    }\n  }, {\n    key: \"_updateMissedBlock\",\n    value: function () {\n      var _updateMissedBlock2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(block) {\n        var _this$_getForgerHeade, _this$_getForgerHeade2, height, timestamp, forgerAddress, previousBlockStr, _yield$this$_channel$3, blockTime, _this$codec$decodeBlo3, previousBlock, missedBlocks, forgersInfo, forgersRoundLength, forgerIndex, missedBlocksByAddress, index, rawIndex, forgerRoundIndex, missedForgerInfo;\n\n        return _regeneratorRuntime.wrap(function _callee15$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _this$_getForgerHeade = this._getForgerHeaderAndPayloadInfo(block), _this$_getForgerHeade2 = _this$_getForgerHeade.header, height = _this$_getForgerHeade2.height, timestamp = _this$_getForgerHeade2.timestamp, forgerAddress = _this$_getForgerHeade.forgerAddress;\n                _context17.next = 3;\n                return this._channel.invoke('app:getBlockByHeight', {\n                  height: height - 1\n                });\n\n              case 3:\n                previousBlockStr = _context17.sent;\n                _context17.next = 6;\n                return this._channel.invoke('app:getNodeInfo');\n\n              case 6:\n                _yield$this$_channel$3 = _context17.sent;\n                blockTime = _yield$this$_channel$3.genesisConfig.blockTime;\n                _this$codec$decodeBlo3 = this.codec.decodeBlock(previousBlockStr), previousBlock = _this$codec$decodeBlo3.header;\n                missedBlocks = Math.ceil((timestamp - previousBlock.timestamp) / blockTime) - 1;\n\n                if (!(missedBlocks > 0)) {\n                  _context17.next = 19;\n                  break;\n                }\n\n                _context17.next = 13;\n                return this._channel.invoke('app:getForgers');\n\n              case 13:\n                forgersInfo = _context17.sent;\n                forgersRoundLength = forgersInfo.length;\n                forgerIndex = forgersInfo.findIndex(function (f) {\n                  return f.address === forgerAddress;\n                });\n                missedBlocksByAddress = {};\n\n                for (index = 0; index < missedBlocks; index += 1) {\n                  rawIndex = (forgerIndex - 1 - index) % forgersRoundLength;\n                  forgerRoundIndex = rawIndex >= 0 ? rawIndex : rawIndex + forgersRoundLength;\n                  missedForgerInfo = forgersInfo[forgerRoundIndex];\n                  missedBlocksByAddress[missedForgerInfo.address] = missedBlocksByAddress[missedForgerInfo.address] === undefined ? 1 : missedBlocksByAddress[missedForgerInfo.address] += 1;\n                }\n\n                if (!this._syncingWithNode) {\n                  this._channel.publish('forger:block:missed', {\n                    missedBlocksByAddress: missedBlocksByAddress,\n                    height: height,\n                    timestamp: Date.now()\n                  });\n                }\n\n              case 19:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function _updateMissedBlock(_x10) {\n        return _updateMissedBlock2.apply(this, arguments);\n      }\n\n      return _updateMissedBlock;\n    }()\n  }], [{\n    key: \"alias\",\n    get: function get() {\n      return 'forger';\n    }\n  }, {\n    key: \"info\",\n    get: function get() {\n      return {\n        author: packageJSON.author,\n        version: packageJSON.version,\n        name: packageJSON.name\n      };\n    }\n  }]);\n\n  return ForgerPlugin;\n}(lisk_framework_1.BasePlugin);\n\nexports.ForgerPlugin = ForgerPlugin;","map":{"version":3,"sources":["../src/forger_plugin.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ForgerPlugin = void 0;\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_framework_1 = require(\"lisk-framework\");\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nconst db_1 = require(\"./db\");\nconst config = require(\"./defaults\");\nconst controllers = require(\"./controllers\");\nconst BLOCKS_BATCH_TO_SYNC = 1000;\nconst packageJSON = require('../package.json');\nconst getBinaryAddress = (hexAddressStr) => Buffer.from(hexAddressStr, 'hex').toString('binary');\nconst getAddressBuffer = (hexAddressStr) => Buffer.from(hexAddressStr, 'hex');\nclass ForgerPlugin extends lisk_framework_1.BasePlugin {\n    static get alias() {\n        return 'forger';\n    }\n    static get info() {\n        return {\n            author: packageJSON.author,\n            version: packageJSON.version,\n            name: packageJSON.name,\n        };\n    }\n    get defaults() {\n        return config.defaultConfig;\n    }\n    get events() {\n        return ['block:created', 'block:missed'];\n    }\n    get actions() {\n        return {\n            getVoters: async () => controllers.voters.getVoters(this._channel, this.codec, this._forgerPluginDB),\n            getForgingInfo: async () => controllers.forgingInfo.getForgingInfo(this._channel, this.codec, this._forgerPluginDB),\n        };\n    }\n    async load(channel) {\n        const options = lisk_utils_1.objects.mergeDeep({}, config.defaultConfig.default, this.options);\n        this._channel = channel;\n        this._forgerPluginDB = await db_1.getDBInstance(options.dataPath);\n        this._channel.once('app:ready', async () => {\n            await this._setForgersList();\n            await this._setTransactionFees();\n            this._syncingWithNode = true;\n            await this._syncForgerInfo();\n            this._syncingWithNode = false;\n            this._subscribeToChannel();\n        });\n    }\n    async unload() {\n        await this._forgerPluginDB.close();\n    }\n    async _setForgersList() {\n        this._forgersList = new lisk_utils_1.dataStructures.BufferMap();\n        const forgersList = await this._channel.invoke('app:getForgingStatus');\n        for (const { address, forging } of forgersList) {\n            this._forgersList.set(Buffer.from(address, 'hex'), forging);\n        }\n    }\n    async _setTransactionFees() {\n        const { genesisConfig } = await this._channel.invoke('app:getNodeInfo');\n        this._transactionFees = {\n            minFeePerByte: genesisConfig.minFeePerByte,\n            baseFees: genesisConfig.baseFees,\n        };\n    }\n    _getForgerHeaderAndPayloadInfo(block) {\n        const { header, payload } = this.codec.decodeBlock(block);\n        const forgerAddress = lisk_cryptography_1.getAddressFromPublicKey(Buffer.from(header.generatorPublicKey, 'hex')).toString('hex');\n        const forgerAddressBuffer = getAddressBuffer(forgerAddress);\n        const forgerAddressBinary = getBinaryAddress(forgerAddress);\n        return {\n            forgerAddress,\n            forgerAddressBuffer,\n            forgerAddressBinary,\n            header,\n            payload,\n        };\n    }\n    async _syncForgerInfo() {\n        const { header: { height: lastBlockHeight }, } = this.codec.decodeBlock(await this._channel.invoke('app:getLastBlock'));\n        const { syncUptoHeight } = await db_1.getForgerSyncInfo(this._forgerPluginDB);\n        const { genesisHeight } = await this._channel.invoke('app:getNodeInfo');\n        const forgerPluginSyncedHeight = syncUptoHeight === 0 ? genesisHeight : syncUptoHeight;\n        if (forgerPluginSyncedHeight === lastBlockHeight) {\n            return;\n        }\n        let needleHeight;\n        if (forgerPluginSyncedHeight > lastBlockHeight) {\n            await this._forgerPluginDB.clear();\n            needleHeight = genesisHeight + 1;\n        }\n        else {\n            needleHeight = forgerPluginSyncedHeight + 1;\n        }\n        while (needleHeight <= lastBlockHeight) {\n            const toHeight = needleHeight +\n                (needleHeight + BLOCKS_BATCH_TO_SYNC <= lastBlockHeight\n                    ? BLOCKS_BATCH_TO_SYNC\n                    : lastBlockHeight - needleHeight);\n            const blocks = await this._channel.invoke('app:getBlocksByHeightBetween', {\n                from: needleHeight,\n                to: toHeight,\n            });\n            for (const block of blocks.reverse()) {\n                const forgerPayloadInfo = this._getForgerHeaderAndPayloadInfo(block);\n                await this._addForgerInfo(block, forgerPayloadInfo);\n            }\n            needleHeight = toHeight + 1;\n        }\n        await db_1.setForgerSyncInfo(this._forgerPluginDB, lastBlockHeight);\n        await this._syncForgerInfo();\n    }\n    _subscribeToChannel() {\n        this._channel.subscribe('app:block:new', async (data) => {\n            const { block } = data;\n            const forgerPayloadInfo = this._getForgerHeaderAndPayloadInfo(block);\n            const { header: { height }, } = forgerPayloadInfo;\n            await this._addForgerInfo(block, forgerPayloadInfo);\n            await db_1.setForgerSyncInfo(this._forgerPluginDB, height);\n        });\n        this._channel.subscribe('app:block:delete', async (data) => {\n            const { block } = data;\n            const forgerPayloadInfo = this._getForgerHeaderAndPayloadInfo(block);\n            const { header: { height }, } = forgerPayloadInfo;\n            await this._revertForgerInfo(block, forgerPayloadInfo);\n            await db_1.setForgerSyncInfo(this._forgerPluginDB, height);\n        });\n    }\n    async _addForgerInfo(encodedBlock, forgerPayloadInfo) {\n        const { forgerAddress, forgerAddressBuffer, forgerAddressBinary, header: { reward, height }, payload, } = forgerPayloadInfo;\n        const forgerInfo = await db_1.getForgerInfo(this._forgerPluginDB, forgerAddressBinary);\n        if (this._forgersList.has(forgerAddressBuffer)) {\n            forgerInfo.totalProducedBlocks += 1;\n            forgerInfo.totalReceivedRewards += BigInt(reward);\n            forgerInfo.totalReceivedFees += this._getFee(payload, encodedBlock);\n            this._channel.publish('forger:block:created', {\n                reward,\n                forgerAddress,\n                height,\n                timestamp: Date.now(),\n            });\n            await db_1.setForgerInfo(this._forgerPluginDB, forgerAddressBinary, { ...forgerInfo });\n        }\n        await this._addVotesReceived(payload);\n        await this._updateMissedBlock(encodedBlock);\n    }\n    async _revertForgerInfo(encodedBlock, forgerPayloadInfo) {\n        const { forgerAddressBuffer, forgerAddressBinary, header: { reward }, payload, } = forgerPayloadInfo;\n        const forgerInfo = await db_1.getForgerInfo(this._forgerPluginDB, forgerAddressBinary);\n        if (this._forgersList.has(forgerAddressBuffer)) {\n            forgerInfo.totalProducedBlocks -= 1;\n            forgerInfo.totalReceivedRewards -= BigInt(reward);\n            forgerInfo.totalReceivedFees -= this._getFee(payload, encodedBlock);\n            await db_1.setForgerInfo(this._forgerPluginDB, forgerAddressBinary, { ...forgerInfo });\n        }\n        await this._revertVotesReceived(payload);\n    }\n    _getForgerReceivedVotes(payload) {\n        const forgerReceivedVotes = {};\n        for (const trx of payload) {\n            if (trx.moduleID === 5 && trx.assetID === 1) {\n                const senderAddress = lisk_cryptography_1.getAddressFromPublicKey(Buffer.from(trx.senderPublicKey, 'hex'));\n                trx.asset.votes.reduce((acc, curr) => {\n                    if (this._forgersList.has(getAddressBuffer(curr.delegateAddress)) &&\n                        acc[curr.delegateAddress]) {\n                        acc[curr.delegateAddress].amount += BigInt(curr.amount);\n                    }\n                    else {\n                        acc[curr.delegateAddress] = {\n                            address: senderAddress,\n                            amount: BigInt(curr.amount),\n                        };\n                    }\n                    return acc;\n                }, forgerReceivedVotes);\n            }\n        }\n        return forgerReceivedVotes;\n    }\n    async _addVotesReceived(payload) {\n        const forgerReceivedVotes = this._getForgerReceivedVotes(payload);\n        for (const [delegateAddress, votesReceived] of Object.entries(forgerReceivedVotes)) {\n            const forgerInfo = await db_1.getForgerInfo(this._forgerPluginDB, getBinaryAddress(delegateAddress));\n            const voterIndex = forgerInfo.votesReceived.findIndex(aVote => aVote.address.equals(votesReceived.address));\n            if (voterIndex === -1) {\n                forgerInfo.votesReceived.push(votesReceived);\n            }\n            else {\n                forgerInfo.votesReceived[voterIndex].amount += votesReceived.amount;\n                if (forgerInfo.votesReceived[voterIndex].amount === BigInt(0)) {\n                    forgerInfo.votesReceived.splice(voterIndex, 1);\n                }\n            }\n            await db_1.setForgerInfo(this._forgerPluginDB, getBinaryAddress(delegateAddress), forgerInfo);\n        }\n    }\n    async _revertVotesReceived(payload) {\n        const forgerReceivedVotes = this._getForgerReceivedVotes(payload);\n        for (const [delegateAddress, votesReceived] of Object.entries(forgerReceivedVotes)) {\n            const forgerInfo = await db_1.getForgerInfo(this._forgerPluginDB, getBinaryAddress(delegateAddress));\n            const voterIndex = forgerInfo.votesReceived.findIndex(aVote => aVote.address.equals(votesReceived.address));\n            if (voterIndex !== -1) {\n                forgerInfo.votesReceived[voterIndex].amount -= BigInt(votesReceived.amount);\n                if (forgerInfo.votesReceived[voterIndex].amount === BigInt(0)) {\n                    forgerInfo.votesReceived.splice(voterIndex, 1);\n                }\n                await db_1.setForgerInfo(this._forgerPluginDB, getBinaryAddress(delegateAddress), forgerInfo);\n            }\n        }\n    }\n    _getFee(payload, block) {\n        var _a, _b;\n        const { payload: payloadBuffer } = this.codec.decodeRawBlock(block);\n        let fee = BigInt(0);\n        for (let index = 0; index < payload.length; index += 1) {\n            const trx = payload[index];\n            const baseFee = (_b = (_a = this._transactionFees.baseFees.find(bf => bf.moduleID === trx.moduleID && bf.assetID === trx.assetID)) === null || _a === void 0 ? void 0 : _a.baseFee) !== null && _b !== void 0 ? _b : '0';\n            const minFeeRequired = BigInt(baseFee) +\n                BigInt(this._transactionFees.minFeePerByte) * BigInt(payloadBuffer[index].length);\n            fee += BigInt(trx.fee) - minFeeRequired;\n        }\n        return fee;\n    }\n    async _updateMissedBlock(block) {\n        const { header: { height, timestamp }, forgerAddress, } = this._getForgerHeaderAndPayloadInfo(block);\n        const previousBlockStr = await this._channel.invoke('app:getBlockByHeight', {\n            height: height - 1,\n        });\n        const { genesisConfig: { blockTime }, } = await this._channel.invoke('app:getNodeInfo');\n        const { header: previousBlock } = this.codec.decodeBlock(previousBlockStr);\n        const missedBlocks = Math.ceil((timestamp - previousBlock.timestamp) / blockTime) - 1;\n        if (missedBlocks > 0) {\n            const forgersInfo = await this._channel.invoke('app:getForgers');\n            const forgersRoundLength = forgersInfo.length;\n            const forgerIndex = forgersInfo.findIndex(f => f.address === forgerAddress);\n            const missedBlocksByAddress = {};\n            for (let index = 0; index < missedBlocks; index += 1) {\n                const rawIndex = (forgerIndex - 1 - index) % forgersRoundLength;\n                const forgerRoundIndex = rawIndex >= 0 ? rawIndex : rawIndex + forgersRoundLength;\n                const missedForgerInfo = forgersInfo[forgerRoundIndex];\n                missedBlocksByAddress[missedForgerInfo.address] =\n                    missedBlocksByAddress[missedForgerInfo.address] === undefined\n                        ? 1\n                        : (missedBlocksByAddress[missedForgerInfo.address] += 1);\n            }\n            if (!this._syncingWithNode) {\n                this._channel.publish('forger:block:missed', {\n                    missedBlocksByAddress,\n                    height,\n                    timestamp: Date.now(),\n                });\n            }\n        }\n    }\n}\nexports.ForgerPlugin = ForgerPlugin;\n//# sourceMappingURL=forger_plugin.js.map"]},"metadata":{},"sourceType":"script"}