{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar util_1 = require(\"../../compile/util\");\n\nvar error = {\n  message: \"property name must be valid\",\n  params: function params(_ref) {\n    var _params = _ref.params;\n    return codegen_1._(_templateObject || (_templateObject = _taggedTemplateLiteral([\"{propertyName: \", \"}\"])), _params.propertyName);\n  }\n};\nvar def = {\n  keyword: \"propertyNames\",\n  type: \"object\",\n  schemaType: [\"object\", \"boolean\"],\n  error: error,\n  code: function code(cxt) {\n    var gen = cxt.gen,\n        schema = cxt.schema,\n        data = cxt.data,\n        it = cxt.it;\n    if (util_1.alwaysValidSchema(it, schema)) return;\n    var valid = gen.name(\"valid\");\n    gen.forIn(\"key\", data, function (key) {\n      cxt.setParams({\n        propertyName: key\n      });\n      cxt.subschema({\n        keyword: \"propertyNames\",\n        data: key,\n        dataTypes: [\"string\"],\n        propertyName: key,\n        compositeRule: true\n      }, valid);\n      gen.if(codegen_1.not(valid), function () {\n        cxt.error(true);\n        if (!it.allErrors) gen.break();\n      });\n    });\n    cxt.ok(valid);\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/applicator/propertyNames.ts"],"names":[],"mappings":";;;;;;;;;;AAOA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAIA,IAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,EAAE,6BAD2B;AAEpC,EAAA,MAAM,EAAE;AAAA,QAAE,OAAF,QAAE,MAAF;AAAA,WAAc,SAAA,CAAA,CAAd,0FAAiC,OAAM,CAAC,YAAxC;AAAA;AAF4B,CAAtC;AAKA,IAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,eADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,CAAC,QAAD,EAAW,SAAX,CAHqB;AAIjC,EAAA,KAAK,EAAL,KAJiC;AAKjC,EAAA,IALiC,gBAK5B,GAL4B,EAKb;AAClB,QAAO,GAAP,GAAgC,GAAhC,CAAO,GAAP;AAAA,QAAY,MAAZ,GAAgC,GAAhC,CAAY,MAAZ;AAAA,QAAoB,IAApB,GAAgC,GAAhC,CAAoB,IAApB;AAAA,QAA0B,EAA1B,GAAgC,GAAhC,CAA0B,EAA1B;AACA,QAAI,MAAA,CAAA,iBAAA,CAAkB,EAAlB,EAAsB,MAAtB,CAAJ,EAAmC;AACnC,QAAM,KAAK,GAAG,GAAG,CAAC,IAAJ,CAAS,OAAT,CAAd;AAEA,IAAA,GAAG,CAAC,KAAJ,CAAU,KAAV,EAAiB,IAAjB,EAAuB,UAAC,GAAD,EAAQ;AAC7B,MAAA,GAAG,CAAC,SAAJ,CAAc;AAAC,QAAA,YAAY,EAAE;AAAf,OAAd;AACA,MAAA,GAAG,CAAC,SAAJ,CACE;AACE,QAAA,OAAO,EAAE,eADX;AAEE,QAAA,IAAI,EAAE,GAFR;AAGE,QAAA,SAAS,EAAE,CAAC,QAAD,CAHb;AAIE,QAAA,YAAY,EAAE,GAJhB;AAKE,QAAA,aAAa,EAAE;AALjB,OADF,EAQE,KARF;AAUA,MAAA,GAAG,CAAC,EAAJ,CAAO,SAAA,CAAA,GAAA,CAAI,KAAJ,CAAP,EAAmB,YAAK;AACtB,QAAA,GAAG,CAAC,KAAJ,CAAU,IAAV;AACA,YAAI,CAAC,EAAE,CAAC,SAAR,EAAmB,GAAG,CAAC,KAAJ;AACpB,OAHD;AAID,KAhBD;AAkBA,IAAA,GAAG,CAAC,EAAJ,CAAO,KAAP;AACD;AA7BgC,CAAnC;AAgCA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst codegen_1 = require(\"../../compile/codegen\");\nconst util_1 = require(\"../../compile/util\");\nconst error = {\n    message: \"property name must be valid\",\n    params: ({ params }) => codegen_1._ `{propertyName: ${params.propertyName}}`,\n};\nconst def = {\n    keyword: \"propertyNames\",\n    type: \"object\",\n    schemaType: [\"object\", \"boolean\"],\n    error,\n    code(cxt) {\n        const { gen, schema, data, it } = cxt;\n        if (util_1.alwaysValidSchema(it, schema))\n            return;\n        const valid = gen.name(\"valid\");\n        gen.forIn(\"key\", data, (key) => {\n            cxt.setParams({ propertyName: key });\n            cxt.subschema({\n                keyword: \"propertyNames\",\n                data: key,\n                dataTypes: [\"string\"],\n                propertyName: key,\n                compositeRule: true,\n            }, valid);\n            gen.if(codegen_1.not(valid), () => {\n                cxt.error(true);\n                if (!it.allErrors)\n                    gen.break();\n            });\n        });\n        cxt.ok(valid);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=propertyNames.js.map"]},"metadata":{},"sourceType":"script"}