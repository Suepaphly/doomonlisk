{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDelegates = void 0;\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nvar utils_1 = require(\"../utils\");\n\nvar getDelegatesQuerySchema = {\n  type: 'object',\n  properties: {\n    limit: {\n      type: 'string',\n      format: 'uint32',\n      description: 'Number of delegates to be returned'\n    },\n    offset: {\n      type: 'string',\n      format: 'uint32',\n      description: 'Offset to get delegates after a specific length in a delegates list'\n    }\n  }\n};\n\nvar getDelegates = function getDelegates(channel, codec) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res, next) {\n      var errors, _req$query, _req$query$limit, limit, _req$query$offset, offset, registeredDelegates, encodedDelegateAccounts, decodedDelegateAccounts;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              errors = lisk_validator_1.validator.validate(getDelegatesQuerySchema, req.query);\n\n              if (!errors.length) {\n                _context.next = 4;\n                break;\n              }\n\n              res.status(400).send({\n                errors: [{\n                  message: new lisk_validator_1.LiskValidationError(_toConsumableArray(errors)).message\n                }]\n              });\n              return _context.abrupt(\"return\");\n\n            case 4:\n              _req$query = req.query, _req$query$limit = _req$query.limit, limit = _req$query$limit === void 0 ? 100 : _req$query$limit, _req$query$offset = _req$query.offset, offset = _req$query$offset === void 0 ? 0 : _req$query$offset;\n              _context.prev = 5;\n              _context.next = 8;\n              return channel.invoke('dpos:getAllDelegates');\n\n            case 8:\n              registeredDelegates = _context.sent;\n              _context.next = 11;\n              return channel.invoke('app:getAccounts', {\n                address: registeredDelegates.map(function (d) {\n                  return d.address;\n                })\n              });\n\n            case 11:\n              encodedDelegateAccounts = _context.sent;\n              decodedDelegateAccounts = encodedDelegateAccounts.map(function (d) {\n                return codec.decodeAccount(Buffer.from(d, 'hex'));\n              });\n              res.status(200).json({\n                meta: {\n                  count: decodedDelegateAccounts.length,\n                  limit: +limit,\n                  offset: +offset\n                },\n                data: utils_1.paginateList(decodedDelegateAccounts, +limit, +offset)\n              });\n              _context.next = 19;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](5);\n              next(_context.t0);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[5, 16]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexports.getDelegates = getDelegates;","map":{"version":3,"sources":["../../src/controllers/delegates.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAcA,IAAA,gBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAEA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,IAAM,uBAAuB,GAAG;AAC/B,EAAA,IAAI,EAAE,QADyB;AAE/B,EAAA,UAAU,EAAE;AACX,IAAA,KAAK,EAAE;AACN,MAAA,IAAI,EAAE,QADA;AAEN,MAAA,MAAM,EAAE,QAFF;AAGN,MAAA,WAAW,EAAE;AAHP,KADI;AAMX,IAAA,MAAM,EAAE;AACP,MAAA,IAAI,EAAE,QADC;AAEP,MAAA,MAAM,EAAE,QAFD;AAGP,MAAA,WAAW,EAAE;AAHN;AANG;AAFmB,CAAhC;;AAgBO,IAAM,YAAY,GAAG,SAAf,YAAe,CAAC,OAAD,EAAuB,KAAvB;AAAA;AAAA,wEAA8C,iBACzE,GADyE,EAEzE,GAFyE,EAGzE,IAHyE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKnE,cAAA,MALmE,GAK1D,gBAAA,CAAA,SAAA,CAAU,QAAV,CAAmB,uBAAnB,EAA4C,GAAG,CAAC,KAAhD,CAL0D;;AAAA,mBAOrE,MAAM,CAAC,MAP8D;AAAA;AAAA;AAAA;;AAQxE,cAAA,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB;AACpB,gBAAA,MAAM,EAAE,CAAC;AAAE,kBAAA,OAAO,EAAE,IAAI,gBAAA,CAAA,mBAAJ,oBAA4B,MAA5B,GAAqC;AAAhD,iBAAD;AADY,eAArB;AARwE;;AAAA;AAAA,2BAcrC,GAAG,CAAC,KAdiC,gCAcjE,KAdiE,EAcjE,KAdiE,iCAczD,GAdyD,oDAcpD,MAdoD,EAcpD,MAdoD,kCAc3C,CAd2C;AAAA;AAAA;AAAA,qBAgBG,OAAO,CAAC,MAAR,CAC1E,sBAD0E,CAhBH;;AAAA;AAgBlE,cAAA,mBAhBkE;AAAA;AAAA,qBAmBxB,OAAO,CAAC,MAAR,CAAe,iBAAf,EAAkC;AACjF,gBAAA,OAAO,EAAE,mBAAmB,CAAC,GAApB,CAAwB,UAAA,CAAC;AAAA,yBAAI,CAAC,CAAC,OAAN;AAAA,iBAAzB;AADwE,eAAlC,CAnBwB;;AAAA;AAmBlE,cAAA,uBAnBkE;AAsBlE,cAAA,uBAtBkE,GAsBxC,uBAAuB,CAAC,GAAxB,CAA4B,UAAC,CAAD;AAAA,uBAC3D,KAAK,CAAC,aAAN,CAAoB,MAAM,CAAC,IAAP,CAAY,CAAZ,EAAe,KAAf,CAApB,CAD2D;AAAA,eAA5B,CAtBwC;AA0BxE,cAAA,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB;AACpB,gBAAA,IAAI,EAAE;AAAE,kBAAA,KAAK,EAAE,uBAAuB,CAAC,MAAjC;AAAyC,kBAAA,KAAK,EAAE,CAAC,KAAjD;AAAwD,kBAAA,MAAM,EAAE,CAAC;AAAjE,iBADc;AAEpB,gBAAA,IAAI,EAAE,OAAA,CAAA,YAAA,CAAa,uBAAb,EAAsC,CAAC,KAAvC,EAA8C,CAAC,MAA/C;AAFc,eAArB;AA1BwE;AAAA;;AAAA;AAAA;AAAA;AA+BxE,cAAA,IAAI,aAAJ;;AA/BwE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9C;;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAAM,OAAA,CAAA,YAAA,GAAY,YAAZ","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDelegates = void 0;\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst utils_1 = require(\"../utils\");\nconst getDelegatesQuerySchema = {\n    type: 'object',\n    properties: {\n        limit: {\n            type: 'string',\n            format: 'uint32',\n            description: 'Number of delegates to be returned',\n        },\n        offset: {\n            type: 'string',\n            format: 'uint32',\n            description: 'Offset to get delegates after a specific length in a delegates list',\n        },\n    },\n};\nconst getDelegates = (channel, codec) => async (req, res, next) => {\n    const errors = lisk_validator_1.validator.validate(getDelegatesQuerySchema, req.query);\n    if (errors.length) {\n        res.status(400).send({\n            errors: [{ message: new lisk_validator_1.LiskValidationError([...errors]).message }],\n        });\n        return;\n    }\n    const { limit = 100, offset = 0 } = req.query;\n    try {\n        const registeredDelegates = await channel.invoke('dpos:getAllDelegates');\n        const encodedDelegateAccounts = await channel.invoke('app:getAccounts', {\n            address: registeredDelegates.map(d => d.address),\n        });\n        const decodedDelegateAccounts = encodedDelegateAccounts.map((d) => codec.decodeAccount(Buffer.from(d, 'hex')));\n        res.status(200).json({\n            meta: { count: decodedDelegateAccounts.length, limit: +limit, offset: +offset },\n            data: utils_1.paginateList(decodedDelegateAccounts, +limit, +offset),\n        });\n    }\n    catch (err) {\n        next(err);\n    }\n};\nexports.getDelegates = getDelegates;\n//# sourceMappingURL=delegates.js.map"]},"metadata":{},"sourceType":"script"}