{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _excluded = [\"ipAddress\", \"port\"],\n    _excluded2 = [\"dateAdded\", \"numOfConnectionFailures\", \"sourceAddress\", \"bucketId\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sanitizePeerLists = exports.sanitizeEnhancedPeerInfo = exports.sanitizeInitialPeerInfo = exports.sanitizeIncomingPeerInfo = exports.assignInternalInfo = void 0;\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nvar constants_1 = require(\"../constants\");\n\nvar network_1 = require(\"./network\");\n\nvar assignInternalInfo = function assignInternalInfo(peerInfo, secret) {\n  return peerInfo.internalState ? peerInfo.internalState : {\n    reputation: constants_1.DEFAULT_REPUTATION_SCORE,\n    netgroup: network_1.getNetgroup(peerInfo.ipAddress, secret),\n    latency: 0,\n    connectTime: Date.now(),\n    rpcCounter: new Map(),\n    rpcRates: new Map(),\n    messageCounter: new Map(),\n    messageRates: new Map(),\n    wsMessageCount: 0,\n    wsMessageRate: 0,\n    productivity: _objectSpread({}, constants_1.DEFAULT_PRODUCTIVITY),\n    advertiseAddress: true,\n    connectionKind: constants_1.ConnectionKind.NONE,\n    peerKind: constants_1.PeerKind.NONE\n  };\n};\n\nexports.assignInternalInfo = assignInternalInfo;\n\nvar sanitizeIncomingPeerInfo = function sanitizeIncomingPeerInfo(peerInfo) {\n  var ipAddress = peerInfo.ipAddress,\n      port = peerInfo.port,\n      restOfPeerInfo = _objectWithoutProperties(peerInfo, _excluded);\n\n  return {\n    peerId: network_1.constructPeerId(ipAddress, port),\n    ipAddress: ipAddress,\n    port: port,\n    sharedState: _objectSpread({}, restOfPeerInfo)\n  };\n};\n\nexports.sanitizeIncomingPeerInfo = sanitizeIncomingPeerInfo;\n\nvar sanitizeInitialPeerInfo = function sanitizeInitialPeerInfo(peerInfo) {\n  return {\n    peerId: network_1.constructPeerId(peerInfo.ipAddress, peerInfo.port),\n    ipAddress: peerInfo.ipAddress,\n    port: peerInfo.port\n  };\n};\n\nexports.sanitizeInitialPeerInfo = sanitizeInitialPeerInfo;\n\nvar sanitizeEnhancedPeerInfo = function sanitizeEnhancedPeerInfo(peerInfo) {\n  var dateAdded = peerInfo.dateAdded,\n      numOfConnectionFailures = peerInfo.numOfConnectionFailures,\n      sourceAddress = peerInfo.sourceAddress,\n      bucketId = peerInfo.bucketId,\n      sharedPeerInfo = _objectWithoutProperties(peerInfo, _excluded2);\n\n  return sharedPeerInfo;\n};\n\nexports.sanitizeEnhancedPeerInfo = sanitizeEnhancedPeerInfo;\n\nvar sanitizePeerLists = function sanitizePeerLists(lists, nodeInfo, secret) {\n  var blacklistedIPs = lists.blacklistedIPs.filter(function (blacklistedIP) {\n    if (blacklistedIP === nodeInfo.ipAddress) {\n      return false;\n    }\n\n    return true;\n  });\n  var fixedPeers = lists.fixedPeers.filter(function (peerInfo) {\n    if (!lisk_validator_1.isIPV4(peerInfo.ipAddress)) {\n      return false;\n    }\n\n    if (peerInfo.ipAddress === nodeInfo.ipAddress) {\n      return false;\n    }\n\n    if (blacklistedIPs.includes(peerInfo.ipAddress)) {\n      return false;\n    }\n\n    return true;\n  }).map(function (peer) {\n    var peerInternalInfo = exports.assignInternalInfo(peer, secret);\n    return _objectSpread(_objectSpread({}, peer), {}, {\n      internalState: _objectSpread(_objectSpread({}, peerInternalInfo), {}, {\n        peerKind: constants_1.PeerKind.FIXED_PEER\n      })\n    });\n  });\n  var seedPeers = lists.seedPeers.filter(function (peerInfo) {\n    if (!lisk_validator_1.isIPV4(peerInfo.ipAddress)) {\n      return false;\n    }\n\n    if (peerInfo.ipAddress === nodeInfo.ipAddress) {\n      return false;\n    }\n\n    if (blacklistedIPs.includes(peerInfo.ipAddress)) {\n      return false;\n    }\n\n    if (fixedPeers.map(function (peer) {\n      return peer.peerId;\n    }).includes(peerInfo.peerId)) {\n      return false;\n    }\n\n    return true;\n  }).map(function (peer) {\n    var peerInternalInfo = exports.assignInternalInfo(peer, secret);\n    return _objectSpread(_objectSpread({}, peer), {}, {\n      internalState: _objectSpread(_objectSpread({}, peerInternalInfo), {}, {\n        peerKind: constants_1.PeerKind.SEED_PEER\n      })\n    });\n  });\n  var whitelisted = lists.whitelisted.filter(function (peerInfo) {\n    if (!lisk_validator_1.isIPV4(peerInfo.ipAddress)) {\n      return false;\n    }\n\n    if (peerInfo.ipAddress === nodeInfo.ipAddress) {\n      return false;\n    }\n\n    if (blacklistedIPs.includes(peerInfo.ipAddress)) {\n      return false;\n    }\n\n    if (fixedPeers.map(function (peer) {\n      return peer.peerId;\n    }).includes(peerInfo.peerId)) {\n      return false;\n    }\n\n    if (seedPeers.map(function (peer) {\n      return peer.peerId;\n    }).includes(peerInfo.peerId)) {\n      return false;\n    }\n\n    return true;\n  }).map(function (peer) {\n    var peerInternalInfo = exports.assignInternalInfo(peer, secret);\n    return _objectSpread(_objectSpread({}, peer), {}, {\n      internalState: _objectSpread(_objectSpread({}, peerInternalInfo), {}, {\n        peerKind: constants_1.PeerKind.WHITELISTED_PEER\n      })\n    });\n  });\n  var previousPeers = lists.previousPeers.filter(function (peerInfo) {\n    if (!lisk_validator_1.isIPV4(peerInfo.ipAddress)) {\n      return false;\n    }\n\n    if (peerInfo.ipAddress === nodeInfo.ipAddress) {\n      return false;\n    }\n\n    if (blacklistedIPs.includes(peerInfo.ipAddress)) {\n      return false;\n    }\n\n    if (fixedPeers.map(function (peer) {\n      return peer.peerId;\n    }).includes(peerInfo.peerId)) {\n      return false;\n    }\n\n    if (seedPeers.map(function (peer) {\n      return peer.peerId;\n    }).includes(peerInfo.peerId)) {\n      return false;\n    }\n\n    if (whitelisted.map(function (peer) {\n      return peer.peerId;\n    }).includes(peerInfo.peerId)) {\n      return false;\n    }\n\n    return true;\n  });\n  return {\n    blacklistedIPs: blacklistedIPs,\n    seedPeers: seedPeers,\n    fixedPeers: fixedPeers,\n    whitelisted: whitelisted,\n    previousPeers: previousPeers\n  };\n};\n\nexports.sanitizePeerLists = sanitizePeerLists;","map":{"version":3,"sources":["../../src/utils/sanitize.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sanitizePeerLists = exports.sanitizeEnhancedPeerInfo = exports.sanitizeInitialPeerInfo = exports.sanitizeIncomingPeerInfo = exports.assignInternalInfo = void 0;\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst constants_1 = require(\"../constants\");\nconst network_1 = require(\"./network\");\nconst assignInternalInfo = (peerInfo, secret) => peerInfo.internalState\n    ? peerInfo.internalState\n    : {\n        reputation: constants_1.DEFAULT_REPUTATION_SCORE,\n        netgroup: network_1.getNetgroup(peerInfo.ipAddress, secret),\n        latency: 0,\n        connectTime: Date.now(),\n        rpcCounter: new Map(),\n        rpcRates: new Map(),\n        messageCounter: new Map(),\n        messageRates: new Map(),\n        wsMessageCount: 0,\n        wsMessageRate: 0,\n        productivity: { ...constants_1.DEFAULT_PRODUCTIVITY },\n        advertiseAddress: true,\n        connectionKind: constants_1.ConnectionKind.NONE,\n        peerKind: constants_1.PeerKind.NONE,\n    };\nexports.assignInternalInfo = assignInternalInfo;\nconst sanitizeIncomingPeerInfo = (peerInfo) => {\n    const { ipAddress, port, ...restOfPeerInfo } = peerInfo;\n    return {\n        peerId: network_1.constructPeerId(ipAddress, port),\n        ipAddress,\n        port,\n        sharedState: {\n            ...restOfPeerInfo,\n        },\n    };\n};\nexports.sanitizeIncomingPeerInfo = sanitizeIncomingPeerInfo;\nconst sanitizeInitialPeerInfo = (peerInfo) => ({\n    peerId: network_1.constructPeerId(peerInfo.ipAddress, peerInfo.port),\n    ipAddress: peerInfo.ipAddress,\n    port: peerInfo.port,\n});\nexports.sanitizeInitialPeerInfo = sanitizeInitialPeerInfo;\nconst sanitizeEnhancedPeerInfo = (peerInfo) => {\n    const { dateAdded, numOfConnectionFailures, sourceAddress, bucketId, ...sharedPeerInfo } = peerInfo;\n    return sharedPeerInfo;\n};\nexports.sanitizeEnhancedPeerInfo = sanitizeEnhancedPeerInfo;\nconst sanitizePeerLists = (lists, nodeInfo, secret) => {\n    const blacklistedIPs = lists.blacklistedIPs.filter(blacklistedIP => {\n        if (blacklistedIP === nodeInfo.ipAddress) {\n            return false;\n        }\n        return true;\n    });\n    const fixedPeers = lists.fixedPeers\n        .filter(peerInfo => {\n        if (!lisk_validator_1.isIPV4(peerInfo.ipAddress)) {\n            return false;\n        }\n        if (peerInfo.ipAddress === nodeInfo.ipAddress) {\n            return false;\n        }\n        if (blacklistedIPs.includes(peerInfo.ipAddress)) {\n            return false;\n        }\n        return true;\n    })\n        .map(peer => {\n        const peerInternalInfo = exports.assignInternalInfo(peer, secret);\n        return {\n            ...peer,\n            internalState: { ...peerInternalInfo, peerKind: constants_1.PeerKind.FIXED_PEER },\n        };\n    });\n    const seedPeers = lists.seedPeers\n        .filter(peerInfo => {\n        if (!lisk_validator_1.isIPV4(peerInfo.ipAddress)) {\n            return false;\n        }\n        if (peerInfo.ipAddress === nodeInfo.ipAddress) {\n            return false;\n        }\n        if (blacklistedIPs.includes(peerInfo.ipAddress)) {\n            return false;\n        }\n        if (fixedPeers.map(peer => peer.peerId).includes(peerInfo.peerId)) {\n            return false;\n        }\n        return true;\n    })\n        .map(peer => {\n        const peerInternalInfo = exports.assignInternalInfo(peer, secret);\n        return {\n            ...peer,\n            internalState: { ...peerInternalInfo, peerKind: constants_1.PeerKind.SEED_PEER },\n        };\n    });\n    const whitelisted = lists.whitelisted\n        .filter(peerInfo => {\n        if (!lisk_validator_1.isIPV4(peerInfo.ipAddress)) {\n            return false;\n        }\n        if (peerInfo.ipAddress === nodeInfo.ipAddress) {\n            return false;\n        }\n        if (blacklistedIPs.includes(peerInfo.ipAddress)) {\n            return false;\n        }\n        if (fixedPeers.map(peer => peer.peerId).includes(peerInfo.peerId)) {\n            return false;\n        }\n        if (seedPeers.map(peer => peer.peerId).includes(peerInfo.peerId)) {\n            return false;\n        }\n        return true;\n    })\n        .map(peer => {\n        const peerInternalInfo = exports.assignInternalInfo(peer, secret);\n        return {\n            ...peer,\n            internalState: {\n                ...peerInternalInfo,\n                peerKind: constants_1.PeerKind.WHITELISTED_PEER,\n            },\n        };\n    });\n    const previousPeers = lists.previousPeers.filter(peerInfo => {\n        if (!lisk_validator_1.isIPV4(peerInfo.ipAddress)) {\n            return false;\n        }\n        if (peerInfo.ipAddress === nodeInfo.ipAddress) {\n            return false;\n        }\n        if (blacklistedIPs.includes(peerInfo.ipAddress)) {\n            return false;\n        }\n        if (fixedPeers.map(peer => peer.peerId).includes(peerInfo.peerId)) {\n            return false;\n        }\n        if (seedPeers.map(peer => peer.peerId).includes(peerInfo.peerId)) {\n            return false;\n        }\n        if (whitelisted.map(peer => peer.peerId).includes(peerInfo.peerId)) {\n            return false;\n        }\n        return true;\n    });\n    return {\n        blacklistedIPs,\n        seedPeers,\n        fixedPeers,\n        whitelisted,\n        previousPeers,\n    };\n};\nexports.sanitizePeerLists = sanitizePeerLists;\n//# sourceMappingURL=sanitize.js.map"]},"metadata":{},"sourceType":"script"}