{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DataAccess = void 0;\n\nvar lisk_db_1 = require(\"@liskhq/lisk-db\");\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar transaction_1 = require(\"../transaction\");\n\nvar cache_1 = require(\"./cache\");\n\nvar storage_1 = require(\"./storage\");\n\nvar block_header_interface_adapter_1 = require(\"./block_header_interface_adapter\");\n\nvar schema_1 = require(\"../schema\");\n\nvar constants_1 = require(\"./constants\");\n\nvar DataAccess = /*#__PURE__*/function () {\n  function DataAccess(_ref) {\n    var db = _ref.db,\n        registeredBlockHeaders = _ref.registeredBlockHeaders,\n        accountSchema = _ref.accountSchema,\n        minBlockHeaderCache = _ref.minBlockHeaderCache,\n        maxBlockHeaderCache = _ref.maxBlockHeaderCache;\n\n    _classCallCheck(this, DataAccess);\n\n    this._storage = new storage_1.Storage(db);\n    this._blocksCache = new cache_1.BlockCache(minBlockHeaderCache, maxBlockHeaderCache);\n    this._accountSchema = accountSchema;\n    this._blockHeaderAdapter = new block_header_interface_adapter_1.BlockHeaderInterfaceAdapter(registeredBlockHeaders);\n  }\n\n  _createClass(DataAccess, [{\n    key: \"addBlockHeader\",\n    value: function addBlockHeader(blockHeader) {\n      return this._blocksCache.add(blockHeader);\n    }\n  }, {\n    key: \"removeBlockHeader\",\n    value: function () {\n      var _removeBlockHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(id) {\n        var _a, cachedItems, upperHeightToFetch, lowerHeightToFetch, blockHeaders;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                cachedItems = this._blocksCache.remove(id);\n\n                if (this._blocksCache.needsRefill) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", cachedItems);\n\n              case 3:\n                upperHeightToFetch = ((_a = this._blocksCache.items[0]) === null || _a === void 0 ? void 0 : _a.height) - 1 || 0;\n                lowerHeightToFetch = Math.max(upperHeightToFetch - (this._blocksCache.maxCachedItems - this._blocksCache.minCachedItems), 1);\n\n                if (!(upperHeightToFetch - lowerHeightToFetch > 0)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 8;\n                return this.getBlockHeadersByHeightBetween(lowerHeightToFetch, upperHeightToFetch);\n\n              case 8:\n                blockHeaders = _context.sent;\n\n                this._blocksCache.refill(blockHeaders.reverse());\n\n              case 10:\n                return _context.abrupt(\"return\", cachedItems);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function removeBlockHeader(_x) {\n        return _removeBlockHeader.apply(this, arguments);\n      }\n\n      return removeBlockHeader;\n    }()\n  }, {\n    key: \"resetBlockHeaderCache\",\n    value: function resetBlockHeaderCache() {\n      this._blocksCache.empty();\n    }\n  }, {\n    key: \"getBlockHeaderAssetSchema\",\n    value: function getBlockHeaderAssetSchema(version) {\n      return this._blockHeaderAdapter.getSchema(version);\n    }\n  }, {\n    key: \"getBlockHeaderByID\",\n    value: function () {\n      var _getBlockHeaderByID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n        var cachedBlock, blockHeaderBuffer;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cachedBlock = this._blocksCache.getByID(id);\n\n                if (!cachedBlock) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", cachedBlock);\n\n              case 3:\n                _context2.next = 5;\n                return this._storage.getBlockHeaderByID(id);\n\n              case 5:\n                blockHeaderBuffer = _context2.sent;\n                return _context2.abrupt(\"return\", this._blockHeaderAdapter.decode(blockHeaderBuffer));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getBlockHeaderByID(_x2) {\n        return _getBlockHeaderByID.apply(this, arguments);\n      }\n\n      return getBlockHeaderByID;\n    }()\n  }, {\n    key: \"getRawBlockHeaderByID\",\n    value: function () {\n      var _getRawBlockHeaderByID2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this._getRawBlockHeaderByID(id));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getRawBlockHeaderByID(_x3) {\n        return _getRawBlockHeaderByID2.apply(this, arguments);\n      }\n\n      return getRawBlockHeaderByID;\n    }()\n  }, {\n    key: \"blockHeaderExists\",\n    value: function () {\n      var _blockHeaderExists = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id) {\n        var cachedBlock;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                cachedBlock = this._blocksCache.getByID(id);\n\n                if (!cachedBlock) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", true);\n\n              case 3:\n                _context4.prev = 3;\n                _context4.next = 6;\n                return this._storage.getBlockHeaderByID(id);\n\n              case 6:\n                return _context4.abrupt(\"return\", true);\n\n              case 9:\n                _context4.prev = 9;\n                _context4.t0 = _context4[\"catch\"](3);\n                return _context4.abrupt(\"return\", false);\n\n              case 12:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 9]]);\n      }));\n\n      function blockHeaderExists(_x4) {\n        return _blockHeaderExists.apply(this, arguments);\n      }\n\n      return blockHeaderExists;\n    }()\n  }, {\n    key: \"getBlockHeadersByIDs\",\n    value: function () {\n      var _getBlockHeadersByIDs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(arrayOfBlockIds) {\n        var _this = this;\n\n        var cachedBlocks, blocks;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                cachedBlocks = this._blocksCache.getByIDs(arrayOfBlockIds);\n\n                if (!cachedBlocks.length) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", cachedBlocks);\n\n              case 3:\n                _context5.next = 5;\n                return this._storage.getBlockHeadersByIDs(arrayOfBlockIds);\n\n              case 5:\n                blocks = _context5.sent;\n                return _context5.abrupt(\"return\", blocks.map(function (block) {\n                  return _this._blockHeaderAdapter.decode(block);\n                }));\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getBlockHeadersByIDs(_x5) {\n        return _getBlockHeadersByIDs.apply(this, arguments);\n      }\n\n      return getBlockHeadersByIDs;\n    }()\n  }, {\n    key: \"getBlockHeaderByHeight\",\n    value: function () {\n      var _getBlockHeaderByHeight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(height) {\n        var cachedBlock, header;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                cachedBlock = this._blocksCache.getByHeight(height);\n\n                if (!cachedBlock) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", cachedBlock);\n\n              case 3:\n                _context6.next = 5;\n                return this._storage.getBlockHeaderByHeight(height);\n\n              case 5:\n                header = _context6.sent;\n                return _context6.abrupt(\"return\", this._blockHeaderAdapter.decode(header));\n\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getBlockHeaderByHeight(_x6) {\n        return _getBlockHeaderByHeight.apply(this, arguments);\n      }\n\n      return getBlockHeaderByHeight;\n    }()\n  }, {\n    key: \"getBlockHeadersByHeightBetween\",\n    value: function () {\n      var _getBlockHeadersByHeightBetween = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(fromHeight, toHeight) {\n        var _this2 = this;\n\n        var cachedBlocks, blocks;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                cachedBlocks = this._blocksCache.getByHeightBetween(fromHeight, toHeight);\n\n                if (!cachedBlocks.length) {\n                  _context7.next = 3;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", cachedBlocks);\n\n              case 3:\n                _context7.next = 5;\n                return this._storage.getBlockHeadersByHeightBetween(fromHeight, toHeight);\n\n              case 5:\n                blocks = _context7.sent;\n                return _context7.abrupt(\"return\", blocks.map(function (block) {\n                  return _this2._blockHeaderAdapter.decode(block);\n                }));\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getBlockHeadersByHeightBetween(_x7, _x8) {\n        return _getBlockHeadersByHeightBetween.apply(this, arguments);\n      }\n\n      return getBlockHeadersByHeightBetween;\n    }()\n  }, {\n    key: \"getBlockHeadersWithHeights\",\n    value: function () {\n      var _getBlockHeadersWithHeights = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(heightList) {\n        var _this3 = this;\n\n        var cachedBlocks, blocks;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                cachedBlocks = this._blocksCache.getByHeights(heightList);\n\n                if (!cachedBlocks.length) {\n                  _context8.next = 3;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", cachedBlocks);\n\n              case 3:\n                _context8.next = 5;\n                return this._storage.getBlockHeadersWithHeights(heightList);\n\n              case 5:\n                blocks = _context8.sent;\n                return _context8.abrupt(\"return\", blocks.map(function (block) {\n                  return _this3._blockHeaderAdapter.decode(block);\n                }));\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getBlockHeadersWithHeights(_x9) {\n        return _getBlockHeadersWithHeights.apply(this, arguments);\n      }\n\n      return getBlockHeadersWithHeights;\n    }()\n  }, {\n    key: \"getLastBlockHeader\",\n    value: function () {\n      var _getLastBlockHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var cachedBlock, block;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                cachedBlock = this._blocksCache.last;\n\n                if (!cachedBlock) {\n                  _context9.next = 3;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", cachedBlock);\n\n              case 3:\n                _context9.next = 5;\n                return this._storage.getLastBlockHeader();\n\n              case 5:\n                block = _context9.sent;\n                return _context9.abrupt(\"return\", this._blockHeaderAdapter.decode(block));\n\n              case 7:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getLastBlockHeader() {\n        return _getLastBlockHeader.apply(this, arguments);\n      }\n\n      return getLastBlockHeader;\n    }()\n  }, {\n    key: \"getHighestCommonBlockID\",\n    value: function () {\n      var _getHighestCommonBlockID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(arrayOfBlockIds) {\n        var _a, headers, cachedBlockHeader, storageBlockHeaders, _iterator, _step, id, blockHeader;\n\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                headers = this._blocksCache.getByIDs(arrayOfBlockIds);\n                headers.sort(function (a, b) {\n                  return b.height - a.height;\n                });\n                cachedBlockHeader = headers[0];\n\n                if (!cachedBlockHeader) {\n                  _context10.next = 5;\n                  break;\n                }\n\n                return _context10.abrupt(\"return\", cachedBlockHeader.id);\n\n              case 5:\n                storageBlockHeaders = [];\n                _iterator = _createForOfIteratorHelper(arrayOfBlockIds);\n                _context10.prev = 7;\n\n                _iterator.s();\n\n              case 9:\n                if ((_step = _iterator.n()).done) {\n                  _context10.next = 24;\n                  break;\n                }\n\n                id = _step.value;\n                _context10.prev = 11;\n                _context10.next = 14;\n                return this._getRawBlockHeaderByID(id);\n\n              case 14:\n                blockHeader = _context10.sent;\n                storageBlockHeaders.push(blockHeader);\n                _context10.next = 22;\n                break;\n\n              case 18:\n                _context10.prev = 18;\n                _context10.t0 = _context10[\"catch\"](11);\n\n                if (_context10.t0 instanceof lisk_db_1.NotFoundError) {\n                  _context10.next = 22;\n                  break;\n                }\n\n                throw _context10.t0;\n\n              case 22:\n                _context10.next = 9;\n                break;\n\n              case 24:\n                _context10.next = 29;\n                break;\n\n              case 26:\n                _context10.prev = 26;\n                _context10.t1 = _context10[\"catch\"](7);\n\n                _iterator.e(_context10.t1);\n\n              case 29:\n                _context10.prev = 29;\n\n                _iterator.f();\n\n                return _context10.finish(29);\n\n              case 32:\n                storageBlockHeaders.sort(function (a, b) {\n                  return b.height - a.height;\n                });\n                return _context10.abrupt(\"return\", (_a = storageBlockHeaders[0]) === null || _a === void 0 ? void 0 : _a.id);\n\n              case 34:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[7, 26, 29, 32], [11, 18]]);\n      }));\n\n      function getHighestCommonBlockID(_x10) {\n        return _getHighestCommonBlockID.apply(this, arguments);\n      }\n\n      return getHighestCommonBlockID;\n    }()\n  }, {\n    key: \"getBlockByID\",\n    value: function () {\n      var _getBlockByID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(id) {\n        var block;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this._storage.getBlockByID(id);\n\n              case 2:\n                block = _context11.sent;\n                return _context11.abrupt(\"return\", this._decodeRawBlock(block));\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getBlockByID(_x11) {\n        return _getBlockByID.apply(this, arguments);\n      }\n\n      return getBlockByID;\n    }()\n  }, {\n    key: \"getBlocksByIDs\",\n    value: function () {\n      var _getBlocksByIDs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(arrayOfBlockIds) {\n        var _this4 = this;\n\n        var blocks;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.next = 2;\n                return this._storage.getBlocksByIDs(arrayOfBlockIds);\n\n              case 2:\n                blocks = _context12.sent;\n                return _context12.abrupt(\"return\", blocks.map(function (block) {\n                  return _this4._decodeRawBlock(block);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getBlocksByIDs(_x12) {\n        return _getBlocksByIDs.apply(this, arguments);\n      }\n\n      return getBlocksByIDs;\n    }()\n  }, {\n    key: \"getBlockByHeight\",\n    value: function () {\n      var _getBlockByHeight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(height) {\n        var block;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this._storage.getBlockByHeight(height);\n\n              case 2:\n                block = _context13.sent;\n                return _context13.abrupt(\"return\", this._decodeRawBlock(block));\n\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getBlockByHeight(_x13) {\n        return _getBlockByHeight.apply(this, arguments);\n      }\n\n      return getBlockByHeight;\n    }()\n  }, {\n    key: \"getBlocksByHeightBetween\",\n    value: function () {\n      var _getBlocksByHeightBetween = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(fromHeight, toHeight) {\n        var _this5 = this;\n\n        var blocks;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this._storage.getBlocksByHeightBetween(fromHeight, toHeight);\n\n              case 2:\n                blocks = _context14.sent;\n                return _context14.abrupt(\"return\", blocks.map(function (block) {\n                  return _this5._decodeRawBlock(block);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getBlocksByHeightBetween(_x14, _x15) {\n        return _getBlocksByHeightBetween.apply(this, arguments);\n      }\n\n      return getBlocksByHeightBetween;\n    }()\n  }, {\n    key: \"getLastBlock\",\n    value: function () {\n      var _getLastBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var block;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this._storage.getLastBlock();\n\n              case 2:\n                block = _context15.sent;\n                return _context15.abrupt(\"return\", this._decodeRawBlock(block));\n\n              case 4:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getLastBlock() {\n        return _getLastBlock.apply(this, arguments);\n      }\n\n      return getLastBlock;\n    }()\n  }, {\n    key: \"isBlockPersisted\",\n    value: function () {\n      var _isBlockPersisted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(blockId) {\n        var isPersisted;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this._storage.isBlockPersisted(blockId);\n\n              case 2:\n                isPersisted = _context16.sent;\n                return _context16.abrupt(\"return\", isPersisted);\n\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function isBlockPersisted(_x16) {\n        return _isBlockPersisted.apply(this, arguments);\n      }\n\n      return isBlockPersisted;\n    }()\n  }, {\n    key: \"getTempBlocks\",\n    value: function () {\n      var _getTempBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        var _this6 = this;\n\n        var blocks;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this._storage.getTempBlocks();\n\n              case 2:\n                blocks = _context17.sent;\n                return _context17.abrupt(\"return\", blocks.map(function (block) {\n                  return _this6.decode(block);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function getTempBlocks() {\n        return _getTempBlocks.apply(this, arguments);\n      }\n\n      return getTempBlocks;\n    }()\n  }, {\n    key: \"isTempBlockEmpty\",\n    value: function () {\n      var _isTempBlockEmpty = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        var isEmpty;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this._storage.isTempBlockEmpty();\n\n              case 2:\n                isEmpty = _context18.sent;\n                return _context18.abrupt(\"return\", isEmpty);\n\n              case 4:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function isTempBlockEmpty() {\n        return _isTempBlockEmpty.apply(this, arguments);\n      }\n\n      return isTempBlockEmpty;\n    }()\n  }, {\n    key: \"clearTempBlocks\",\n    value: function () {\n      var _clearTempBlocks = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this._storage.clearTempBlocks();\n\n              case 2:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function clearTempBlocks() {\n        return _clearTempBlocks.apply(this, arguments);\n      }\n\n      return clearTempBlocks;\n    }()\n  }, {\n    key: \"getChainState\",\n    value: function () {\n      var _getChainState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(key) {\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                return _context20.abrupt(\"return\", this._storage.getChainState(key));\n\n              case 1:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function getChainState(_x17) {\n        return _getChainState.apply(this, arguments);\n      }\n\n      return getChainState;\n    }()\n  }, {\n    key: \"getConsensusState\",\n    value: function () {\n      var _getConsensusState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(key) {\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                return _context21.abrupt(\"return\", this._storage.getConsensusState(key));\n\n              case 1:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function getConsensusState(_x18) {\n        return _getConsensusState.apply(this, arguments);\n      }\n\n      return getConsensusState;\n    }()\n  }, {\n    key: \"setConsensusState\",\n    value: function () {\n      var _setConsensusState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(key, val) {\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                return _context22.abrupt(\"return\", this._storage.setConsensusState(key, val));\n\n              case 1:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function setConsensusState(_x19, _x20) {\n        return _setConsensusState.apply(this, arguments);\n      }\n\n      return setConsensusState;\n    }()\n  }, {\n    key: \"getAccountsByPublicKey\",\n    value: function () {\n      var _getAccountsByPublicKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(arrayOfPublicKeys) {\n        var _this7 = this;\n\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return this._storage.getAccountsByPublicKey(arrayOfPublicKeys);\n\n              case 2:\n                accounts = _context23.sent;\n                return _context23.abrupt(\"return\", accounts.map(function (account) {\n                  return _this7.decodeAccount(account);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function getAccountsByPublicKey(_x21) {\n        return _getAccountsByPublicKey.apply(this, arguments);\n      }\n\n      return getAccountsByPublicKey;\n    }()\n  }, {\n    key: \"getAccountByAddress\",\n    value: function () {\n      var _getAccountByAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(address) {\n        var account;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this._storage.getAccountByAddress(address);\n\n              case 2:\n                account = _context24.sent;\n                return _context24.abrupt(\"return\", this.decodeAccount(account));\n\n              case 4:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function getAccountByAddress(_x22) {\n        return _getAccountByAddress.apply(this, arguments);\n      }\n\n      return getAccountByAddress;\n    }()\n  }, {\n    key: \"getEncodedAccountByAddress\",\n    value: function () {\n      var _getEncodedAccountByAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(address) {\n        var account;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.next = 2;\n                return this._storage.getAccountByAddress(address);\n\n              case 2:\n                account = _context25.sent;\n                return _context25.abrupt(\"return\", account);\n\n              case 4:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function getEncodedAccountByAddress(_x23) {\n        return _getEncodedAccountByAddress.apply(this, arguments);\n      }\n\n      return getEncodedAccountByAddress;\n    }()\n  }, {\n    key: \"getAccountsByAddress\",\n    value: function () {\n      var _getAccountsByAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(arrayOfAddresses) {\n        var _this8 = this;\n\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.next = 2;\n                return this._storage.getAccountsByAddress(arrayOfAddresses);\n\n              case 2:\n                accounts = _context26.sent;\n                return _context26.abrupt(\"return\", accounts.map(function (account) {\n                  return _this8.decodeAccount(account);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function getAccountsByAddress(_x24) {\n        return _getAccountsByAddress.apply(this, arguments);\n      }\n\n      return getAccountsByAddress;\n    }()\n  }, {\n    key: \"getTransactionByID\",\n    value: function () {\n      var _getTransactionByID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(id) {\n        var transaction;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.next = 2;\n                return this._storage.getTransactionByID(id);\n\n              case 2:\n                transaction = _context27.sent;\n                return _context27.abrupt(\"return\", transaction_1.Transaction.decode(transaction));\n\n              case 4:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function getTransactionByID(_x25) {\n        return _getTransactionByID.apply(this, arguments);\n      }\n\n      return getTransactionByID;\n    }()\n  }, {\n    key: \"getTransactionsByIDs\",\n    value: function () {\n      var _getTransactionsByIDs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(arrayOfTransactionIds) {\n        var transactions;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.next = 2;\n                return this._storage.getTransactionsByIDs(arrayOfTransactionIds);\n\n              case 2:\n                transactions = _context28.sent;\n                return _context28.abrupt(\"return\", transactions.map(function (transaction) {\n                  return transaction_1.Transaction.decode(transaction);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function getTransactionsByIDs(_x26) {\n        return _getTransactionsByIDs.apply(this, arguments);\n      }\n\n      return getTransactionsByIDs;\n    }()\n  }, {\n    key: \"isTransactionPersisted\",\n    value: function () {\n      var _isTransactionPersisted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(transactionId) {\n        var isPersisted;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                _context29.next = 2;\n                return this._storage.isTransactionPersisted(transactionId);\n\n              case 2:\n                isPersisted = _context29.sent;\n                return _context29.abrupt(\"return\", isPersisted);\n\n              case 4:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      function isTransactionPersisted(_x27) {\n        return _isTransactionPersisted.apply(this, arguments);\n      }\n\n      return isTransactionPersisted;\n    }()\n  }, {\n    key: \"decode\",\n    value: function decode(buffer) {\n      var block = lisk_codec_1.codec.decode(schema_1.blockSchema, buffer);\n\n      var header = this._blockHeaderAdapter.decode(block.header);\n\n      var payload = [];\n\n      var _iterator2 = _createForOfIteratorHelper(block.payload),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var rawTx = _step2.value;\n          var tx = transaction_1.Transaction.decode(rawTx);\n          payload.push(tx);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return {\n        header: header,\n        payload: payload\n      };\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(block) {\n      var header = this.encodeBlockHeader(block.header);\n      var payload = [];\n\n      var _iterator3 = _createForOfIteratorHelper(block.payload),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var rawTx = _step3.value;\n          var tx = rawTx.getBytes();\n          payload.push(tx);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return lisk_codec_1.codec.encode(schema_1.blockSchema, {\n        header: header,\n        payload: payload\n      });\n    }\n  }, {\n    key: \"decodeBlockHeader\",\n    value: function decodeBlockHeader(buffer) {\n      return this._blockHeaderAdapter.decode(buffer);\n    }\n  }, {\n    key: \"encodeBlockHeader\",\n    value: function encodeBlockHeader(blockHeader) {\n      var skipSignature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return this._blockHeaderAdapter.encode(blockHeader, skipSignature);\n    }\n  }, {\n    key: \"decodeAccount\",\n    value: function decodeAccount(buffer) {\n      return lisk_codec_1.codec.decode(this._accountSchema, buffer);\n    }\n  }, {\n    key: \"encodeAccount\",\n    value: function encodeAccount(account) {\n      return lisk_codec_1.codec.encode(this._accountSchema, account);\n    }\n  }, {\n    key: \"decodeTransaction\",\n    value: function decodeTransaction(buffer) {\n      return transaction_1.Transaction.decode(buffer);\n    }\n  }, {\n    key: \"encodeTransaction\",\n    value: function encodeTransaction(tx) {\n      return tx.getBytes();\n    }\n  }, {\n    key: \"saveBlock\",\n    value: function () {\n      var _saveBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(block, stateStore, finalizedHeight) {\n        var removeFromTemp,\n            _block$header,\n            blockID,\n            height,\n            encodedHeader,\n            encodedPayload,\n            _iterator4,\n            _step4,\n            tx,\n            txID,\n            encodedTx,\n            _args30 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                removeFromTemp = _args30.length > 3 && _args30[3] !== undefined ? _args30[3] : false;\n                _block$header = block.header, blockID = _block$header.id, height = _block$header.height;\n                encodedHeader = this._blockHeaderAdapter.encode(block.header);\n                encodedPayload = [];\n                _iterator4 = _createForOfIteratorHelper(block.payload);\n\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    tx = _step4.value;\n                    txID = tx.id;\n                    encodedTx = tx.getBytes();\n                    encodedPayload.push({\n                      id: txID,\n                      value: encodedTx\n                    });\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n\n                _context30.next = 8;\n                return this._storage.saveBlock(blockID, height, finalizedHeight, encodedHeader, encodedPayload, stateStore, removeFromTemp);\n\n              case 8:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n\n      function saveBlock(_x28, _x29, _x30) {\n        return _saveBlock.apply(this, arguments);\n      }\n\n      return saveBlock;\n    }()\n  }, {\n    key: \"deleteBlock\",\n    value: function () {\n      var _deleteBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(block, stateStore) {\n        var saveToTemp,\n            _block$header2,\n            blockID,\n            height,\n            txIDs,\n            encodedBlock,\n            diff,\n            updatedAccounts,\n            _iterator5,\n            _step5,\n            created,\n            _iterator6,\n            _step6,\n            updated,\n            _args31 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                saveToTemp = _args31.length > 2 && _args31[2] !== undefined ? _args31[2] : false;\n                _block$header2 = block.header, blockID = _block$header2.id, height = _block$header2.height;\n                txIDs = block.payload.map(function (tx) {\n                  return tx.id;\n                });\n                encodedBlock = this.encode(block);\n                _context31.next = 6;\n                return this._storage.deleteBlock(blockID, height, txIDs, encodedBlock, stateStore, saveToTemp);\n\n              case 6:\n                diff = _context31.sent;\n                updatedAccounts = [];\n                _iterator5 = _createForOfIteratorHelper(diff.deleted);\n\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    created = _step5.value;\n\n                    if (created.key.includes(constants_1.DB_KEY_ACCOUNTS_ADDRESS)) {\n                      updatedAccounts.push(this.decodeAccount(created.value));\n                    }\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n\n                _iterator6 = _createForOfIteratorHelper(diff.updated);\n\n                try {\n                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                    updated = _step6.value;\n\n                    if (updated.key.includes(constants_1.DB_KEY_ACCOUNTS_ADDRESS)) {\n                      updatedAccounts.push(this.decodeAccount(updated.value));\n                    }\n                  }\n                } catch (err) {\n                  _iterator6.e(err);\n                } finally {\n                  _iterator6.f();\n                }\n\n                return _context31.abrupt(\"return\", updatedAccounts);\n\n              case 13:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function deleteBlock(_x31, _x32) {\n        return _deleteBlock.apply(this, arguments);\n      }\n\n      return deleteBlock;\n    }()\n  }, {\n    key: \"_decodeRawBlock\",\n    value: function _decodeRawBlock(block) {\n      var header = this._blockHeaderAdapter.decode(block.header);\n\n      var payload = [];\n\n      var _iterator7 = _createForOfIteratorHelper(block.payload),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var rawTx = _step7.value;\n          var tx = transaction_1.Transaction.decode(rawTx);\n          payload.push(tx);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      return {\n        header: header,\n        payload: payload\n      };\n    }\n  }, {\n    key: \"_getRawBlockHeaderByID\",\n    value: function () {\n      var _getRawBlockHeaderByID3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(id) {\n        var cachedBlock, blockHeaderBuffer;\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                cachedBlock = this._blocksCache.getByID(id);\n\n                if (!cachedBlock) {\n                  _context32.next = 3;\n                  break;\n                }\n\n                return _context32.abrupt(\"return\", cachedBlock);\n\n              case 3:\n                _context32.next = 5;\n                return this._storage.getBlockHeaderByID(id);\n\n              case 5:\n                blockHeaderBuffer = _context32.sent;\n                return _context32.abrupt(\"return\", _objectSpread(_objectSpread({}, lisk_codec_1.codec.decode(schema_1.blockHeaderSchema, blockHeaderBuffer)), {}, {\n                  id: id\n                }));\n\n              case 7:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n\n      function _getRawBlockHeaderByID(_x33) {\n        return _getRawBlockHeaderByID3.apply(this, arguments);\n      }\n\n      return _getRawBlockHeaderByID;\n    }()\n  }]);\n\n  return DataAccess;\n}();\n\nexports.DataAccess = DataAccess;","map":{"version":3,"sources":["../../src/data_access/data_access.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataAccess = void 0;\nconst lisk_db_1 = require(\"@liskhq/lisk-db\");\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst transaction_1 = require(\"../transaction\");\nconst cache_1 = require(\"./cache\");\nconst storage_1 = require(\"./storage\");\nconst block_header_interface_adapter_1 = require(\"./block_header_interface_adapter\");\nconst schema_1 = require(\"../schema\");\nconst constants_1 = require(\"./constants\");\nclass DataAccess {\n    constructor({ db, registeredBlockHeaders, accountSchema, minBlockHeaderCache, maxBlockHeaderCache, }) {\n        this._storage = new storage_1.Storage(db);\n        this._blocksCache = new cache_1.BlockCache(minBlockHeaderCache, maxBlockHeaderCache);\n        this._accountSchema = accountSchema;\n        this._blockHeaderAdapter = new block_header_interface_adapter_1.BlockHeaderInterfaceAdapter(registeredBlockHeaders);\n    }\n    addBlockHeader(blockHeader) {\n        return this._blocksCache.add(blockHeader);\n    }\n    async removeBlockHeader(id) {\n        var _a;\n        const cachedItems = this._blocksCache.remove(id);\n        if (!this._blocksCache.needsRefill) {\n            return cachedItems;\n        }\n        const upperHeightToFetch = ((_a = this._blocksCache.items[0]) === null || _a === void 0 ? void 0 : _a.height) - 1 || 0;\n        const lowerHeightToFetch = Math.max(upperHeightToFetch - (this._blocksCache.maxCachedItems - this._blocksCache.minCachedItems), 1);\n        if (upperHeightToFetch - lowerHeightToFetch > 0) {\n            const blockHeaders = await this.getBlockHeadersByHeightBetween(lowerHeightToFetch, upperHeightToFetch);\n            this._blocksCache.refill(blockHeaders.reverse());\n        }\n        return cachedItems;\n    }\n    resetBlockHeaderCache() {\n        this._blocksCache.empty();\n    }\n    getBlockHeaderAssetSchema(version) {\n        return this._blockHeaderAdapter.getSchema(version);\n    }\n    async getBlockHeaderByID(id) {\n        const cachedBlock = this._blocksCache.getByID(id);\n        if (cachedBlock) {\n            return cachedBlock;\n        }\n        const blockHeaderBuffer = await this._storage.getBlockHeaderByID(id);\n        return this._blockHeaderAdapter.decode(blockHeaderBuffer);\n    }\n    async getRawBlockHeaderByID(id) {\n        return this._getRawBlockHeaderByID(id);\n    }\n    async blockHeaderExists(id) {\n        const cachedBlock = this._blocksCache.getByID(id);\n        if (cachedBlock) {\n            return true;\n        }\n        try {\n            await this._storage.getBlockHeaderByID(id);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    }\n    async getBlockHeadersByIDs(arrayOfBlockIds) {\n        const cachedBlocks = this._blocksCache.getByIDs(arrayOfBlockIds);\n        if (cachedBlocks.length) {\n            return cachedBlocks;\n        }\n        const blocks = await this._storage.getBlockHeadersByIDs(arrayOfBlockIds);\n        return blocks.map(block => this._blockHeaderAdapter.decode(block));\n    }\n    async getBlockHeaderByHeight(height) {\n        const cachedBlock = this._blocksCache.getByHeight(height);\n        if (cachedBlock) {\n            return cachedBlock;\n        }\n        const header = await this._storage.getBlockHeaderByHeight(height);\n        return this._blockHeaderAdapter.decode(header);\n    }\n    async getBlockHeadersByHeightBetween(fromHeight, toHeight) {\n        const cachedBlocks = this._blocksCache.getByHeightBetween(fromHeight, toHeight);\n        if (cachedBlocks.length) {\n            return cachedBlocks;\n        }\n        const blocks = await this._storage.getBlockHeadersByHeightBetween(fromHeight, toHeight);\n        return blocks.map(block => this._blockHeaderAdapter.decode(block));\n    }\n    async getBlockHeadersWithHeights(heightList) {\n        const cachedBlocks = this._blocksCache.getByHeights(heightList);\n        if (cachedBlocks.length) {\n            return cachedBlocks;\n        }\n        const blocks = await this._storage.getBlockHeadersWithHeights(heightList);\n        return blocks.map(block => this._blockHeaderAdapter.decode(block));\n    }\n    async getLastBlockHeader() {\n        const cachedBlock = this._blocksCache.last;\n        if (cachedBlock) {\n            return cachedBlock;\n        }\n        const block = await this._storage.getLastBlockHeader();\n        return this._blockHeaderAdapter.decode(block);\n    }\n    async getHighestCommonBlockID(arrayOfBlockIds) {\n        var _a;\n        const headers = this._blocksCache.getByIDs(arrayOfBlockIds);\n        headers.sort((a, b) => b.height - a.height);\n        const cachedBlockHeader = headers[0];\n        if (cachedBlockHeader) {\n            return cachedBlockHeader.id;\n        }\n        const storageBlockHeaders = [];\n        for (const id of arrayOfBlockIds) {\n            try {\n                const blockHeader = await this._getRawBlockHeaderByID(id);\n                storageBlockHeaders.push(blockHeader);\n            }\n            catch (error) {\n                if (!(error instanceof lisk_db_1.NotFoundError)) {\n                    throw error;\n                }\n            }\n        }\n        storageBlockHeaders.sort((a, b) => b.height - a.height);\n        return (_a = storageBlockHeaders[0]) === null || _a === void 0 ? void 0 : _a.id;\n    }\n    async getBlockByID(id) {\n        const block = await this._storage.getBlockByID(id);\n        return this._decodeRawBlock(block);\n    }\n    async getBlocksByIDs(arrayOfBlockIds) {\n        const blocks = await this._storage.getBlocksByIDs(arrayOfBlockIds);\n        return blocks.map(block => this._decodeRawBlock(block));\n    }\n    async getBlockByHeight(height) {\n        const block = await this._storage.getBlockByHeight(height);\n        return this._decodeRawBlock(block);\n    }\n    async getBlocksByHeightBetween(fromHeight, toHeight) {\n        const blocks = await this._storage.getBlocksByHeightBetween(fromHeight, toHeight);\n        return blocks.map(block => this._decodeRawBlock(block));\n    }\n    async getLastBlock() {\n        const block = await this._storage.getLastBlock();\n        return this._decodeRawBlock(block);\n    }\n    async isBlockPersisted(blockId) {\n        const isPersisted = await this._storage.isBlockPersisted(blockId);\n        return isPersisted;\n    }\n    async getTempBlocks() {\n        const blocks = await this._storage.getTempBlocks();\n        return blocks.map(block => this.decode(block));\n    }\n    async isTempBlockEmpty() {\n        const isEmpty = await this._storage.isTempBlockEmpty();\n        return isEmpty;\n    }\n    async clearTempBlocks() {\n        await this._storage.clearTempBlocks();\n    }\n    async getChainState(key) {\n        return this._storage.getChainState(key);\n    }\n    async getConsensusState(key) {\n        return this._storage.getConsensusState(key);\n    }\n    async setConsensusState(key, val) {\n        return this._storage.setConsensusState(key, val);\n    }\n    async getAccountsByPublicKey(arrayOfPublicKeys) {\n        const accounts = await this._storage.getAccountsByPublicKey(arrayOfPublicKeys);\n        return accounts.map(account => this.decodeAccount(account));\n    }\n    async getAccountByAddress(address) {\n        const account = await this._storage.getAccountByAddress(address);\n        return this.decodeAccount(account);\n    }\n    async getEncodedAccountByAddress(address) {\n        const account = await this._storage.getAccountByAddress(address);\n        return account;\n    }\n    async getAccountsByAddress(arrayOfAddresses) {\n        const accounts = await this._storage.getAccountsByAddress(arrayOfAddresses);\n        return accounts.map(account => this.decodeAccount(account));\n    }\n    async getTransactionByID(id) {\n        const transaction = await this._storage.getTransactionByID(id);\n        return transaction_1.Transaction.decode(transaction);\n    }\n    async getTransactionsByIDs(arrayOfTransactionIds) {\n        const transactions = await this._storage.getTransactionsByIDs(arrayOfTransactionIds);\n        return transactions.map(transaction => transaction_1.Transaction.decode(transaction));\n    }\n    async isTransactionPersisted(transactionId) {\n        const isPersisted = await this._storage.isTransactionPersisted(transactionId);\n        return isPersisted;\n    }\n    decode(buffer) {\n        const block = lisk_codec_1.codec.decode(schema_1.blockSchema, buffer);\n        const header = this._blockHeaderAdapter.decode(block.header);\n        const payload = [];\n        for (const rawTx of block.payload) {\n            const tx = transaction_1.Transaction.decode(rawTx);\n            payload.push(tx);\n        }\n        return {\n            header,\n            payload,\n        };\n    }\n    encode(block) {\n        const header = this.encodeBlockHeader(block.header);\n        const payload = [];\n        for (const rawTx of block.payload) {\n            const tx = rawTx.getBytes();\n            payload.push(tx);\n        }\n        return lisk_codec_1.codec.encode(schema_1.blockSchema, { header, payload });\n    }\n    decodeBlockHeader(buffer) {\n        return this._blockHeaderAdapter.decode(buffer);\n    }\n    encodeBlockHeader(blockHeader, skipSignature = false) {\n        return this._blockHeaderAdapter.encode(blockHeader, skipSignature);\n    }\n    decodeAccount(buffer) {\n        return lisk_codec_1.codec.decode(this._accountSchema, buffer);\n    }\n    encodeAccount(account) {\n        return lisk_codec_1.codec.encode(this._accountSchema, account);\n    }\n    decodeTransaction(buffer) {\n        return transaction_1.Transaction.decode(buffer);\n    }\n    encodeTransaction(tx) {\n        return tx.getBytes();\n    }\n    async saveBlock(block, stateStore, finalizedHeight, removeFromTemp = false) {\n        const { id: blockID, height } = block.header;\n        const encodedHeader = this._blockHeaderAdapter.encode(block.header);\n        const encodedPayload = [];\n        for (const tx of block.payload) {\n            const txID = tx.id;\n            const encodedTx = tx.getBytes();\n            encodedPayload.push({ id: txID, value: encodedTx });\n        }\n        await this._storage.saveBlock(blockID, height, finalizedHeight, encodedHeader, encodedPayload, stateStore, removeFromTemp);\n    }\n    async deleteBlock(block, stateStore, saveToTemp = false) {\n        const { id: blockID, height } = block.header;\n        const txIDs = block.payload.map(tx => tx.id);\n        const encodedBlock = this.encode(block);\n        const diff = await this._storage.deleteBlock(blockID, height, txIDs, encodedBlock, stateStore, saveToTemp);\n        const updatedAccounts = [];\n        for (const created of diff.deleted) {\n            if (created.key.includes(constants_1.DB_KEY_ACCOUNTS_ADDRESS)) {\n                updatedAccounts.push(this.decodeAccount(created.value));\n            }\n        }\n        for (const updated of diff.updated) {\n            if (updated.key.includes(constants_1.DB_KEY_ACCOUNTS_ADDRESS)) {\n                updatedAccounts.push(this.decodeAccount(updated.value));\n            }\n        }\n        return updatedAccounts;\n    }\n    _decodeRawBlock(block) {\n        const header = this._blockHeaderAdapter.decode(block.header);\n        const payload = [];\n        for (const rawTx of block.payload) {\n            const tx = transaction_1.Transaction.decode(rawTx);\n            payload.push(tx);\n        }\n        return {\n            header,\n            payload,\n        };\n    }\n    async _getRawBlockHeaderByID(id) {\n        const cachedBlock = this._blocksCache.getByID(id);\n        if (cachedBlock) {\n            return cachedBlock;\n        }\n        const blockHeaderBuffer = await this._storage.getBlockHeaderByID(id);\n        return {\n            ...lisk_codec_1.codec.decode(schema_1.blockHeaderSchema, blockHeaderBuffer),\n            id,\n        };\n    }\n}\nexports.DataAccess = DataAccess;\n//# sourceMappingURL=data_access.js.map"]},"metadata":{},"sourceType":"script"}