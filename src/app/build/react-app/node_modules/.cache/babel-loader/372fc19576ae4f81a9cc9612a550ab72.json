{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNetworkStats = void 0;\n\nvar getMajorityHeight = function getMajorityHeight(peers) {\n  var heightHistogram = {};\n  var majority = {\n    height: 0,\n    count: 0\n  };\n\n  var _iterator = _createForOfIteratorHelper(peers),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var options = _step.value.options;\n      var height = options.height;\n      heightHistogram[height] = heightHistogram[height] + 1 || 1;\n\n      if (heightHistogram[height] > majority.count) {\n        majority.count = heightHistogram[height];\n        majority.height = height;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return majority;\n};\n\nvar getNetworkStats = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(channel) {\n    var networkStats, connectedPeers, disconnectedPeers, majorityHeight, totalPeers;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return channel.invoke('app:getNetworkStats');\n\n          case 2:\n            networkStats = _context.sent;\n            _context.next = 5;\n            return channel.invoke('app:getConnectedPeers');\n\n          case 5:\n            connectedPeers = _context.sent;\n            _context.next = 8;\n            return channel.invoke('app:getDisconnectedPeers');\n\n          case 8:\n            disconnectedPeers = _context.sent;\n            majorityHeight = getMajorityHeight(connectedPeers);\n            totalPeers = {\n              connected: connectedPeers.length,\n              disconnected: disconnectedPeers.length\n            };\n            return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, networkStats), {}, {\n              majorityHeight: majorityHeight,\n              totalPeers: totalPeers\n            }));\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getNetworkStats(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.getNetworkStats = getNetworkStats;","map":{"version":3,"sources":["../../src/controllers/network.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAoBA,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAC,KAAD,EAAyD;AAClF,MAAM,eAAe,GAAG,EAAxB;AACA,MAAM,QAAQ,GAAG;AAChB,IAAA,MAAM,EAAE,CADQ;AAEhB,IAAA,KAAK,EAAE;AAFS,GAAjB;;AAFkF,6CAMxD,KANwD;AAAA;;AAAA;AAMlF,wDAAiC;AAAA,UAApB,OAAoB,eAApB,OAAoB;AAChC,UAAM,MAAM,GAAG,OAAO,CAAC,MAAvB;AACA,MAAA,eAAe,CAAC,MAAD,CAAf,GAA0B,eAAe,CAAC,MAAD,CAAf,GAA0B,CAA1B,IAA+B,CAAzD;;AACA,UAAI,eAAe,CAAC,MAAD,CAAf,GAA0B,QAAQ,CAAC,KAAvC,EAA8C;AAC7C,QAAA,QAAQ,CAAC,KAAT,GAAiB,eAAe,CAAC,MAAD,CAAhC;AACA,QAAA,QAAQ,CAAC,MAAT,GAAkB,MAAlB;AACA;AACD;AAbiF;AAAA;AAAA;AAAA;AAAA;;AAelF,SAAO,QAAP;AACA,CAhBD;;AAkBO,IAAM,eAAe;AAAA,sEAAG,iBAAO,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACH,OAAO,CAAC,MAAR,CAAwC,qBAAxC,CADG;;AAAA;AACxB,YAAA,YADwB;AAAA;AAAA,mBAED,OAAO,CAAC,MAAR,CAA2B,uBAA3B,CAFC;;AAAA;AAExB,YAAA,cAFwB;AAAA;AAAA,mBAGE,OAAO,CAAC,MAAR,CAA2B,0BAA3B,CAHF;;AAAA;AAGxB,YAAA,iBAHwB;AAIxB,YAAA,cAJwB,GAIP,iBAAiB,CAAC,cAAD,CAJV;AAKxB,YAAA,UALwB,GAKX;AAClB,cAAA,SAAS,EAAE,cAAc,CAAC,MADR;AAElB,cAAA,YAAY,EAAE,iBAAiB,CAAC;AAFd,aALW;AAAA,6EAUlB,YAVkB;AAUJ,cAAA,cAAc,EAAd,cAVI;AAUY,cAAA,UAAU,EAAV;AAVZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAf,eAAe;AAAA;AAAA;AAAA,GAArB;;AAAM,OAAA,CAAA,eAAA,GAAe,eAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getNetworkStats = void 0;\nconst getMajorityHeight = (peers) => {\n    const heightHistogram = {};\n    const majority = {\n        height: 0,\n        count: 0,\n    };\n    for (const { options } of peers) {\n        const height = options.height;\n        heightHistogram[height] = heightHistogram[height] + 1 || 1;\n        if (heightHistogram[height] > majority.count) {\n            majority.count = heightHistogram[height];\n            majority.height = height;\n        }\n    }\n    return majority;\n};\nconst getNetworkStats = async (channel) => {\n    const networkStats = await channel.invoke('app:getNetworkStats');\n    const connectedPeers = await channel.invoke('app:getConnectedPeers');\n    const disconnectedPeers = await channel.invoke('app:getDisconnectedPeers');\n    const majorityHeight = getMajorityHeight(connectedPeers);\n    const totalPeers = {\n        connected: connectedPeers.length,\n        disconnected: disconnectedPeers.length,\n    };\n    return { ...networkStats, majorityHeight, totalPeers };\n};\nexports.getNetworkStats = getNetworkStats;\n//# sourceMappingURL=network.js.map"]},"metadata":{},"sourceType":"script"}