{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRegisteredBlockAssetSchema = exports.getGenesisBlockHeaderAssetSchema = exports.genesisInfoSchema = exports.validatorsSchema = exports.stateDiffSchema = exports.blockHeaderAssetSchema = exports.baseAccountSchema = exports.baseGenesisBlockHeaderAssetSchema = exports.blockHeaderSchema = exports.signingBlockHeaderSchema = exports.blockSchema = void 0;\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nexports.blockSchema = {\n  $id: '/block',\n  type: 'object',\n  properties: {\n    header: {\n      dataType: 'bytes',\n      fieldNumber: 1\n    },\n    payload: {\n      type: 'array',\n      items: {\n        dataType: 'bytes'\n      },\n      fieldNumber: 2\n    }\n  },\n  required: ['header', 'payload']\n};\nexports.signingBlockHeaderSchema = {\n  $id: '/block/header/signing',\n  type: 'object',\n  properties: {\n    version: {\n      dataType: 'uint32',\n      fieldNumber: 1\n    },\n    timestamp: {\n      dataType: 'uint32',\n      fieldNumber: 2\n    },\n    height: {\n      dataType: 'uint32',\n      fieldNumber: 3\n    },\n    previousBlockID: {\n      dataType: 'bytes',\n      fieldNumber: 4\n    },\n    transactionRoot: {\n      dataType: 'bytes',\n      fieldNumber: 5\n    },\n    generatorPublicKey: {\n      dataType: 'bytes',\n      fieldNumber: 6\n    },\n    reward: {\n      dataType: 'uint64',\n      fieldNumber: 7\n    },\n    asset: {\n      dataType: 'bytes',\n      fieldNumber: 8\n    }\n  },\n  required: ['version', 'timestamp', 'height', 'previousBlockID', 'transactionRoot', 'generatorPublicKey', 'reward', 'asset']\n};\nexports.blockHeaderSchema = _objectSpread(_objectSpread({}, exports.signingBlockHeaderSchema), {}, {\n  $id: '/block/header',\n  properties: _objectSpread(_objectSpread({}, exports.signingBlockHeaderSchema.properties), {}, {\n    signature: {\n      dataType: 'bytes',\n      fieldNumber: 9\n    }\n  })\n});\nexports.baseGenesisBlockHeaderAssetSchema = {\n  $id: '/genesisBlock/header/asset',\n  type: 'object',\n  required: ['accounts', 'initDelegates', 'initRounds'],\n  properties: {\n    accounts: {\n      type: 'array',\n      fieldNumber: 1\n    },\n    initDelegates: {\n      type: 'array',\n      items: {\n        dataType: 'bytes'\n      },\n      fieldNumber: 2,\n      minItems: 1\n    },\n    initRounds: {\n      dataType: 'uint32',\n      fieldNumber: 3,\n      minimum: 3\n    }\n  }\n};\nexports.baseAccountSchema = {\n  $id: '/account/base',\n  type: 'object',\n  properties: {\n    address: {\n      dataType: 'bytes',\n      fieldNumber: 1\n    }\n  },\n  required: ['address']\n};\nexports.blockHeaderAssetSchema = {\n  $id: '/blockHeader/asset/v2',\n  type: 'object',\n  properties: {\n    maxHeightPreviouslyForged: {\n      dataType: 'uint32',\n      fieldNumber: 1\n    },\n    maxHeightPrevoted: {\n      dataType: 'uint32',\n      fieldNumber: 2\n    },\n    seedReveal: {\n      dataType: 'bytes',\n      minLength: 16,\n      maxLength: 16,\n      fieldNumber: 3\n    }\n  },\n  required: ['maxHeightPreviouslyForged', 'maxHeightPrevoted', 'seedReveal']\n};\nexports.stateDiffSchema = {\n  $id: '/state/diff',\n  type: 'object',\n  required: ['updated', 'created'],\n  properties: {\n    updated: {\n      type: 'array',\n      fieldNumber: 1,\n      items: {\n        type: 'object',\n        properties: {\n          key: {\n            dataType: 'string',\n            fieldNumber: 1\n          },\n          value: {\n            dataType: 'bytes',\n            fieldNumber: 2\n          }\n        }\n      }\n    },\n    created: {\n      type: 'array',\n      fieldNumber: 2,\n      items: {\n        dataType: 'string'\n      }\n    },\n    deleted: {\n      type: 'array',\n      fieldNumber: 3,\n      items: {\n        type: 'object',\n        properties: {\n          key: {\n            dataType: 'string',\n            fieldNumber: 1\n          },\n          value: {\n            dataType: 'bytes',\n            fieldNumber: 2\n          }\n        }\n      }\n    }\n  }\n};\nexports.validatorsSchema = {\n  $id: '/state/validators',\n  type: 'object',\n  required: ['validators'],\n  properties: {\n    validators: {\n      type: 'array',\n      fieldNumber: 1,\n      items: {\n        type: 'object',\n        properties: {\n          address: {\n            dataType: 'bytes',\n            fieldNumber: 1\n          },\n          minActiveHeight: {\n            dataType: 'uint32',\n            fieldNumber: 2\n          },\n          isConsensusParticipant: {\n            dataType: 'boolean',\n            fieldNumber: 3\n          }\n        },\n        required: ['address', 'minActiveHeight', 'isConsensusParticipant']\n      }\n    }\n  }\n};\nexports.genesisInfoSchema = {\n  $id: '/state/genesisInfo',\n  type: 'object',\n  properties: {\n    height: {\n      dataType: 'uint32',\n      fieldNumber: 1\n    },\n    initRounds: {\n      dataType: 'uint32',\n      fieldNumber: 2\n    }\n  },\n  required: ['height', 'initRounds']\n};\n\nvar getGenesisBlockHeaderAssetSchema = function getGenesisBlockHeaderAssetSchema(accountSchema) {\n  return lisk_utils_1.objects.mergeDeep({}, exports.baseGenesisBlockHeaderAssetSchema, {\n    properties: {\n      accounts: {\n        items: _objectSpread({}, accountSchema)\n      }\n    }\n  });\n};\n\nexports.getGenesisBlockHeaderAssetSchema = getGenesisBlockHeaderAssetSchema;\n\nvar getRegisteredBlockAssetSchema = function getRegisteredBlockAssetSchema(accountSchema) {\n  return {\n    0: exports.getGenesisBlockHeaderAssetSchema(accountSchema),\n    2: exports.blockHeaderAssetSchema\n  };\n};\n\nexports.getRegisteredBlockAssetSchema = getRegisteredBlockAssetSchema;","map":{"version":3,"sources":["../src/schema.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRegisteredBlockAssetSchema = exports.getGenesisBlockHeaderAssetSchema = exports.genesisInfoSchema = exports.validatorsSchema = exports.stateDiffSchema = exports.blockHeaderAssetSchema = exports.baseAccountSchema = exports.baseGenesisBlockHeaderAssetSchema = exports.blockHeaderSchema = exports.signingBlockHeaderSchema = exports.blockSchema = void 0;\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nexports.blockSchema = {\n    $id: '/block',\n    type: 'object',\n    properties: {\n        header: {\n            dataType: 'bytes',\n            fieldNumber: 1,\n        },\n        payload: {\n            type: 'array',\n            items: {\n                dataType: 'bytes',\n            },\n            fieldNumber: 2,\n        },\n    },\n    required: ['header', 'payload'],\n};\nexports.signingBlockHeaderSchema = {\n    $id: '/block/header/signing',\n    type: 'object',\n    properties: {\n        version: { dataType: 'uint32', fieldNumber: 1 },\n        timestamp: { dataType: 'uint32', fieldNumber: 2 },\n        height: { dataType: 'uint32', fieldNumber: 3 },\n        previousBlockID: { dataType: 'bytes', fieldNumber: 4 },\n        transactionRoot: { dataType: 'bytes', fieldNumber: 5 },\n        generatorPublicKey: { dataType: 'bytes', fieldNumber: 6 },\n        reward: { dataType: 'uint64', fieldNumber: 7 },\n        asset: { dataType: 'bytes', fieldNumber: 8 },\n    },\n    required: [\n        'version',\n        'timestamp',\n        'height',\n        'previousBlockID',\n        'transactionRoot',\n        'generatorPublicKey',\n        'reward',\n        'asset',\n    ],\n};\nexports.blockHeaderSchema = {\n    ...exports.signingBlockHeaderSchema,\n    $id: '/block/header',\n    properties: {\n        ...exports.signingBlockHeaderSchema.properties,\n        signature: { dataType: 'bytes', fieldNumber: 9 },\n    },\n};\nexports.baseGenesisBlockHeaderAssetSchema = {\n    $id: '/genesisBlock/header/asset',\n    type: 'object',\n    required: ['accounts', 'initDelegates', 'initRounds'],\n    properties: {\n        accounts: {\n            type: 'array',\n            fieldNumber: 1,\n        },\n        initDelegates: {\n            type: 'array',\n            items: {\n                dataType: 'bytes',\n            },\n            fieldNumber: 2,\n            minItems: 1,\n        },\n        initRounds: {\n            dataType: 'uint32',\n            fieldNumber: 3,\n            minimum: 3,\n        },\n    },\n};\nexports.baseAccountSchema = {\n    $id: '/account/base',\n    type: 'object',\n    properties: {\n        address: { dataType: 'bytes', fieldNumber: 1 },\n    },\n    required: ['address'],\n};\nexports.blockHeaderAssetSchema = {\n    $id: '/blockHeader/asset/v2',\n    type: 'object',\n    properties: {\n        maxHeightPreviouslyForged: {\n            dataType: 'uint32',\n            fieldNumber: 1,\n        },\n        maxHeightPrevoted: {\n            dataType: 'uint32',\n            fieldNumber: 2,\n        },\n        seedReveal: {\n            dataType: 'bytes',\n            minLength: 16,\n            maxLength: 16,\n            fieldNumber: 3,\n        },\n    },\n    required: ['maxHeightPreviouslyForged', 'maxHeightPrevoted', 'seedReveal'],\n};\nexports.stateDiffSchema = {\n    $id: '/state/diff',\n    type: 'object',\n    required: ['updated', 'created'],\n    properties: {\n        updated: {\n            type: 'array',\n            fieldNumber: 1,\n            items: {\n                type: 'object',\n                properties: {\n                    key: {\n                        dataType: 'string',\n                        fieldNumber: 1,\n                    },\n                    value: {\n                        dataType: 'bytes',\n                        fieldNumber: 2,\n                    },\n                },\n            },\n        },\n        created: {\n            type: 'array',\n            fieldNumber: 2,\n            items: {\n                dataType: 'string',\n            },\n        },\n        deleted: {\n            type: 'array',\n            fieldNumber: 3,\n            items: {\n                type: 'object',\n                properties: {\n                    key: {\n                        dataType: 'string',\n                        fieldNumber: 1,\n                    },\n                    value: {\n                        dataType: 'bytes',\n                        fieldNumber: 2,\n                    },\n                },\n            },\n        },\n    },\n};\nexports.validatorsSchema = {\n    $id: '/state/validators',\n    type: 'object',\n    required: ['validators'],\n    properties: {\n        validators: {\n            type: 'array',\n            fieldNumber: 1,\n            items: {\n                type: 'object',\n                properties: {\n                    address: {\n                        dataType: 'bytes',\n                        fieldNumber: 1,\n                    },\n                    minActiveHeight: {\n                        dataType: 'uint32',\n                        fieldNumber: 2,\n                    },\n                    isConsensusParticipant: {\n                        dataType: 'boolean',\n                        fieldNumber: 3,\n                    },\n                },\n                required: ['address', 'minActiveHeight', 'isConsensusParticipant'],\n            },\n        },\n    },\n};\nexports.genesisInfoSchema = {\n    $id: '/state/genesisInfo',\n    type: 'object',\n    properties: {\n        height: {\n            dataType: 'uint32',\n            fieldNumber: 1,\n        },\n        initRounds: {\n            dataType: 'uint32',\n            fieldNumber: 2,\n        },\n    },\n    required: ['height', 'initRounds'],\n};\nconst getGenesisBlockHeaderAssetSchema = (accountSchema) => lisk_utils_1.objects.mergeDeep({}, exports.baseGenesisBlockHeaderAssetSchema, {\n    properties: {\n        accounts: {\n            items: {\n                ...accountSchema,\n            },\n        },\n    },\n});\nexports.getGenesisBlockHeaderAssetSchema = getGenesisBlockHeaderAssetSchema;\nconst getRegisteredBlockAssetSchema = (accountSchema) => ({\n    0: exports.getGenesisBlockHeaderAssetSchema(accountSchema),\n    2: exports.blockHeaderAssetSchema,\n});\nexports.getRegisteredBlockAssetSchema = getRegisteredBlockAssetSchema;\n//# sourceMappingURL=schema.js.map"]},"metadata":{},"sourceType":"script"}