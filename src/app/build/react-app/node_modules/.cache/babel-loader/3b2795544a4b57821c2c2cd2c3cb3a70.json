{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeNodeInfo = exports.encodePeerInfo = exports.decodeNodeInfo = exports.decodePeerInfo = void 0;\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar errors_1 = require(\"../errors\");\n\nvar decodePeerInfo = function decodePeerInfo(peerInfoSchema, data) {\n  try {\n    if (!Buffer.isBuffer(data)) {\n      throw new Error('Invalid encoded data');\n    }\n\n    return lisk_codec_1.codec.decode(peerInfoSchema, data);\n  } catch (error) {\n    throw new errors_1.InvalidPeerInfoError(error.message);\n  }\n};\n\nexports.decodePeerInfo = decodePeerInfo;\n\nvar decodeNodeInfo = function decodeNodeInfo(nodeInfoSchema, data) {\n  try {\n    if (!Buffer.isBuffer(data)) {\n      throw new Error('Invalid encoded data');\n    }\n\n    return lisk_codec_1.codec.decode(nodeInfoSchema, data);\n  } catch (error) {\n    throw new errors_1.InvalidNodeInfoError(error.message);\n  }\n};\n\nexports.decodeNodeInfo = decodeNodeInfo;\n\nvar encodePeerInfo = function encodePeerInfo(peerInfoSchema, data) {\n  return lisk_codec_1.codec.encode(peerInfoSchema, data);\n};\n\nexports.encodePeerInfo = encodePeerInfo;\n\nvar encodeNodeInfo = function encodeNodeInfo(nodeInfoSchema, data) {\n  return lisk_codec_1.codec.encode(nodeInfoSchema, data);\n};\n\nexports.encodeNodeInfo = encodeNodeInfo;","map":{"version":3,"sources":["../../src/utils/codec.ts"],"names":[],"mappings":";;;;;;;AAeA,IAAA,YAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAGA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEO,IAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,cAAD,EAAyB,IAAzB,EAAwD;AACrF,MAAI;AACH,QAAI,CAAC,MAAM,CAAC,QAAP,CAAgB,IAAhB,CAAL,EAA4B;AAC3B,YAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACA;;AACD,WAAO,YAAA,CAAA,KAAA,CAAM,MAAN,CAA0B,cAA1B,EAA0C,IAA1C,CAAP;AACA,GALD,CAKE,OAAO,KAAP,EAAc;AACf,UAAM,IAAI,QAAA,CAAA,oBAAJ,CAA0B,KAAe,CAAC,OAA1C,CAAN;AACA;AACD,CATM;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd;;AAWN,IAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,cAAD,EAAyB,IAAzB,EAAwD;AACrF,MAAI;AACH,QAAI,CAAC,MAAM,CAAC,QAAP,CAAgB,IAAhB,CAAL,EAA4B;AAC3B,YAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACA;;AACD,WAAO,YAAA,CAAA,KAAA,CAAM,MAAN,CAA0B,cAA1B,EAA0C,IAA1C,CAAP;AACA,GALD,CAKE,OAAO,KAAP,EAAc;AACf,UAAM,IAAI,QAAA,CAAA,oBAAJ,CAA0B,KAAe,CAAC,OAA1C,CAAN;AACA;AACD,CATM;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd;;AAWN,IAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,cAAD,EAAyB,IAAzB;AAAA,SAC7B,YAAA,CAAA,KAAA,CAAM,MAAN,CAAa,cAAb,EAA6B,IAA7B,CAD6B;AAAA,CAAvB;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd;;AAGN,IAAM,cAAc,GAAG,SAAjB,cAAiB,CAAC,cAAD,EAAyB,IAAzB;AAAA,SAC7B,YAAA,CAAA,KAAA,CAAM,MAAN,CAAa,cAAb,EAA6B,IAA7B,CAD6B;AAAA,CAAvB;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encodeNodeInfo = exports.encodePeerInfo = exports.decodeNodeInfo = exports.decodePeerInfo = void 0;\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst errors_1 = require(\"../errors\");\nconst decodePeerInfo = (peerInfoSchema, data) => {\n    try {\n        if (!Buffer.isBuffer(data)) {\n            throw new Error('Invalid encoded data');\n        }\n        return lisk_codec_1.codec.decode(peerInfoSchema, data);\n    }\n    catch (error) {\n        throw new errors_1.InvalidPeerInfoError(error.message);\n    }\n};\nexports.decodePeerInfo = decodePeerInfo;\nconst decodeNodeInfo = (nodeInfoSchema, data) => {\n    try {\n        if (!Buffer.isBuffer(data)) {\n            throw new Error('Invalid encoded data');\n        }\n        return lisk_codec_1.codec.decode(nodeInfoSchema, data);\n    }\n    catch (error) {\n        throw new errors_1.InvalidNodeInfoError(error.message);\n    }\n};\nexports.decodeNodeInfo = decodeNodeInfo;\nconst encodePeerInfo = (peerInfoSchema, data) => lisk_codec_1.codec.encode(peerInfoSchema, data);\nexports.encodePeerInfo = encodePeerInfo;\nconst encodeNodeInfo = (nodeInfoSchema, data) => lisk_codec_1.codec.encode(nodeInfoSchema, data);\nexports.encodeNodeInfo = encodeNodeInfo;\n//# sourceMappingURL=codec.js.map"]},"metadata":{},"sourceType":"script"}