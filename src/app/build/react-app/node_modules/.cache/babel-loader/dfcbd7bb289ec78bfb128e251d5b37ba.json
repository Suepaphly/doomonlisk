{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.codec = exports.Codec = exports.validateSchema = void 0;\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nvar utils_1 = require(\"./utils\");\n\nvar collection_1 = require(\"./collection\");\n\nvar json_wrapper_1 = require(\"./json_wrapper\");\n\nvar validateSchema = function validateSchema(schema) {\n  var _a;\n\n  lisk_validator_1.validator.removeSchema(schema.$id);\n\n  var schemaToValidate = _objectSpread(_objectSpread({}, schema), {}, {\n    $schema: (_a = schema.$schema) !== null && _a !== void 0 ? _a : lisk_validator_1.liskSchemaIdentifier\n  });\n\n  var errors = lisk_validator_1.validator.validateSchema(schemaToValidate);\n\n  if (errors.length) {\n    throw new lisk_validator_1.LiskValidationError(_toConsumableArray(errors));\n  }\n\n  try {\n    lisk_validator_1.validator.compile(schemaToValidate);\n  } finally {\n    lisk_validator_1.validator.removeSchema(schema.$id);\n  }\n\n  return true;\n};\n\nexports.validateSchema = validateSchema;\n\nvar Codec = /*#__PURE__*/function () {\n  function Codec() {\n    _classCallCheck(this, Codec);\n\n    this._compileSchemas = {};\n  }\n\n  _createClass(Codec, [{\n    key: \"addSchema\",\n    value: function addSchema(schema) {\n      exports.validateSchema(schema);\n      var schemaName = schema.$id;\n      this._compileSchemas[schemaName] = this._compileSchema(schema, [], []);\n      return true;\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(schema, message) {\n      if (this._compileSchemas[schema.$id] === undefined) {\n        this.addSchema(schema);\n      }\n\n      var compiledSchema = this._compileSchemas[schema.$id];\n      var res = collection_1.writeObject(compiledSchema, message, []);\n      return Buffer.concat(res[0]);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(schema, message) {\n      if (this._compileSchemas[schema.$id] === undefined) {\n        this.addSchema(schema);\n      }\n\n      var compiledSchema = this._compileSchemas[schema.$id];\n\n      var _collection_1$readObj = collection_1.readObject(message, 0, compiledSchema, message.length),\n          _collection_1$readObj2 = _slicedToArray(_collection_1$readObj, 1),\n          res = _collection_1$readObj2[0];\n\n      return res;\n    }\n  }, {\n    key: \"decodeJSON\",\n    value: function decodeJSON(schema, message) {\n      var decodedMessage = this.decode(schema, message);\n      var jsonMessageAsObject = this.toJSON(schema, decodedMessage);\n      return jsonMessageAsObject;\n    }\n  }, {\n    key: \"encodeJSON\",\n    value: function encodeJSON(schema, message) {\n      var objectFromJson = this.fromJSON(schema, message);\n      return this.encode(schema, objectFromJson);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(schema, message) {\n      var messageCopy = lisk_utils_1.objects.cloneDeep(message);\n      messageCopy[Symbol.iterator] = json_wrapper_1.iterator;\n      json_wrapper_1.recursiveTypeCast('toJSON', messageCopy, schema, []);\n      return messageCopy;\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(schema, message) {\n      var messageCopy = lisk_utils_1.objects.cloneDeep(message);\n      messageCopy[Symbol.iterator] = json_wrapper_1.iterator;\n      json_wrapper_1.recursiveTypeCast('fromJSON', messageCopy, schema, []);\n      return messageCopy;\n    }\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this._compileSchemas = {};\n    }\n  }, {\n    key: \"_compileSchema\",\n    value: function _compileSchema(schema, compiledSchema, dataPath) {\n      if (schema.type === 'object') {\n        var properties = schema.properties;\n\n        if (properties === undefined) {\n          throw new Error('Invalid schema. Missing \"properties\" property');\n        }\n\n        for (var _i = 0, _Object$values = Object.values(properties); _i < _Object$values.length; _i++) {\n          var property = _Object$values[_i];\n\n          if (!('fieldNumber' in property)) {\n            throw new Error('Invalid schema. Missing \"fieldNumber\" in properties');\n          }\n        }\n\n        var currentDepthSchema = Object.entries(properties).sort(function (a, b) {\n          return a[1].fieldNumber - b[1].fieldNumber;\n        });\n\n        for (var i = 0; i < currentDepthSchema.length; i += 1) {\n          var _currentDepthSchema$i = _slicedToArray(currentDepthSchema[i], 2),\n              schemaPropertyName = _currentDepthSchema$i[0],\n              schemaPropertyValue = _currentDepthSchema$i[1];\n\n          if (schemaPropertyValue.type === 'object') {\n            if (!('fieldNumber' in schemaPropertyValue)) {\n              throw new Error('Invalid schema. Missing \"fieldNumber\" in properties');\n            }\n\n            dataPath.push(schemaPropertyName);\n            var nestedSchema = [{\n              propertyName: schemaPropertyName,\n              schemaProp: {\n                type: schemaPropertyValue.type,\n                fieldNumber: schemaPropertyValue.fieldNumber\n              },\n              dataPath: _toConsumableArray(dataPath),\n              binaryKey: utils_1.generateKey(schemaPropertyValue)\n            }];\n\n            var res = this._compileSchema(schemaPropertyValue, nestedSchema, dataPath);\n\n            compiledSchema.push(res);\n            dataPath.pop();\n          } else if (schemaPropertyValue.type === 'array') {\n            if (schemaPropertyValue.items === undefined) {\n              throw new Error('Invalid schema. Missing \"items\" property for Array schema');\n            }\n\n            if (!('fieldNumber' in schemaPropertyValue)) {\n              throw new Error('Invalid schema. Missing \"fieldNumber\" in properties');\n            }\n\n            dataPath.push(schemaPropertyName);\n\n            if (schemaPropertyValue.items.type === 'object') {\n              var _nestedSchema = [{\n                propertyName: schemaPropertyName,\n                schemaProp: {\n                  type: 'object',\n                  fieldNumber: schemaPropertyValue.fieldNumber\n                },\n                dataPath: _toConsumableArray(dataPath),\n                binaryKey: utils_1.generateKey(schemaPropertyValue)\n              }];\n\n              var _res = this._compileSchema(schemaPropertyValue.items, _nestedSchema, dataPath);\n\n              compiledSchema.push([{\n                propertyName: schemaPropertyName,\n                schemaProp: {\n                  type: schemaPropertyValue.type,\n                  fieldNumber: schemaPropertyValue.fieldNumber\n                },\n                dataPath: _toConsumableArray(dataPath),\n                binaryKey: utils_1.generateKey(schemaPropertyValue)\n              }, _res]);\n              dataPath.pop();\n            } else {\n              compiledSchema.push([{\n                propertyName: schemaPropertyName,\n                schemaProp: {\n                  type: schemaPropertyValue.type,\n                  fieldNumber: schemaPropertyValue.fieldNumber\n                },\n                dataPath: _toConsumableArray(dataPath),\n                binaryKey: utils_1.generateKey(schemaPropertyValue)\n              }, {\n                propertyName: schemaPropertyName,\n                schemaProp: {\n                  dataType: schemaPropertyValue.items.dataType,\n                  fieldNumber: schemaPropertyValue.fieldNumber\n                },\n                dataPath: _toConsumableArray(dataPath),\n                binaryKey: utils_1.generateKey(schemaPropertyValue)\n              }]);\n              dataPath.pop();\n            }\n          } else {\n            compiledSchema.push({\n              propertyName: schemaPropertyName,\n              schemaProp: schemaPropertyValue,\n              dataPath: _toConsumableArray(dataPath),\n              binaryKey: utils_1.generateKey(schemaPropertyValue)\n            });\n          }\n        }\n      }\n\n      return compiledSchema;\n    }\n  }]);\n\n  return Codec;\n}();\n\nexports.Codec = Codec;\nexports.codec = new Codec();","map":{"version":3,"sources":["../src/codec.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.codec = exports.Codec = exports.validateSchema = void 0;\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nconst utils_1 = require(\"./utils\");\nconst collection_1 = require(\"./collection\");\nconst json_wrapper_1 = require(\"./json_wrapper\");\nconst validateSchema = (schema) => {\n    var _a;\n    lisk_validator_1.validator.removeSchema(schema.$id);\n    const schemaToValidate = {\n        ...schema,\n        $schema: (_a = schema.$schema) !== null && _a !== void 0 ? _a : lisk_validator_1.liskSchemaIdentifier,\n    };\n    const errors = lisk_validator_1.validator.validateSchema(schemaToValidate);\n    if (errors.length) {\n        throw new lisk_validator_1.LiskValidationError([...errors]);\n    }\n    try {\n        lisk_validator_1.validator.compile(schemaToValidate);\n    }\n    finally {\n        lisk_validator_1.validator.removeSchema(schema.$id);\n    }\n    return true;\n};\nexports.validateSchema = validateSchema;\nclass Codec {\n    constructor() {\n        this._compileSchemas = {};\n    }\n    addSchema(schema) {\n        exports.validateSchema(schema);\n        const schemaName = schema.$id;\n        this._compileSchemas[schemaName] = this._compileSchema(schema, [], []);\n        return true;\n    }\n    encode(schema, message) {\n        if (this._compileSchemas[schema.$id] === undefined) {\n            this.addSchema(schema);\n        }\n        const compiledSchema = this._compileSchemas[schema.$id];\n        const res = collection_1.writeObject(compiledSchema, message, []);\n        return Buffer.concat(res[0]);\n    }\n    decode(schema, message) {\n        if (this._compileSchemas[schema.$id] === undefined) {\n            this.addSchema(schema);\n        }\n        const compiledSchema = this._compileSchemas[schema.$id];\n        const [res] = collection_1.readObject(message, 0, compiledSchema, message.length);\n        return res;\n    }\n    decodeJSON(schema, message) {\n        const decodedMessage = this.decode(schema, message);\n        const jsonMessageAsObject = this.toJSON(schema, decodedMessage);\n        return jsonMessageAsObject;\n    }\n    encodeJSON(schema, message) {\n        const objectFromJson = this.fromJSON(schema, message);\n        return this.encode(schema, objectFromJson);\n    }\n    toJSON(schema, message) {\n        const messageCopy = lisk_utils_1.objects.cloneDeep(message);\n        messageCopy[Symbol.iterator] = json_wrapper_1.iterator;\n        json_wrapper_1.recursiveTypeCast('toJSON', messageCopy, schema, []);\n        return messageCopy;\n    }\n    fromJSON(schema, message) {\n        const messageCopy = lisk_utils_1.objects.cloneDeep(message);\n        messageCopy[Symbol.iterator] = json_wrapper_1.iterator;\n        json_wrapper_1.recursiveTypeCast('fromJSON', messageCopy, schema, []);\n        return messageCopy;\n    }\n    clearCache() {\n        this._compileSchemas = {};\n    }\n    _compileSchema(schema, compiledSchema, dataPath) {\n        if (schema.type === 'object') {\n            const { properties } = schema;\n            if (properties === undefined) {\n                throw new Error('Invalid schema. Missing \"properties\" property');\n            }\n            for (const property of Object.values(properties)) {\n                if (!('fieldNumber' in property)) {\n                    throw new Error('Invalid schema. Missing \"fieldNumber\" in properties');\n                }\n            }\n            const currentDepthSchema = Object.entries(properties).sort((a, b) => a[1].fieldNumber - b[1].fieldNumber);\n            for (let i = 0; i < currentDepthSchema.length; i += 1) {\n                const [schemaPropertyName, schemaPropertyValue] = currentDepthSchema[i];\n                if (schemaPropertyValue.type === 'object') {\n                    if (!('fieldNumber' in schemaPropertyValue)) {\n                        throw new Error('Invalid schema. Missing \"fieldNumber\" in properties');\n                    }\n                    dataPath.push(schemaPropertyName);\n                    const nestedSchema = [\n                        {\n                            propertyName: schemaPropertyName,\n                            schemaProp: {\n                                type: schemaPropertyValue.type,\n                                fieldNumber: schemaPropertyValue.fieldNumber,\n                            },\n                            dataPath: [...dataPath],\n                            binaryKey: utils_1.generateKey(schemaPropertyValue),\n                        },\n                    ];\n                    const res = this._compileSchema(schemaPropertyValue, nestedSchema, dataPath);\n                    compiledSchema.push(res);\n                    dataPath.pop();\n                }\n                else if (schemaPropertyValue.type === 'array') {\n                    if (schemaPropertyValue.items === undefined) {\n                        throw new Error('Invalid schema. Missing \"items\" property for Array schema');\n                    }\n                    if (!('fieldNumber' in schemaPropertyValue)) {\n                        throw new Error('Invalid schema. Missing \"fieldNumber\" in properties');\n                    }\n                    dataPath.push(schemaPropertyName);\n                    if (schemaPropertyValue.items.type === 'object') {\n                        const nestedSchema = [\n                            {\n                                propertyName: schemaPropertyName,\n                                schemaProp: {\n                                    type: 'object',\n                                    fieldNumber: schemaPropertyValue.fieldNumber,\n                                },\n                                dataPath: [...dataPath],\n                                binaryKey: utils_1.generateKey(schemaPropertyValue),\n                            },\n                        ];\n                        const res = this._compileSchema(schemaPropertyValue.items, nestedSchema, dataPath);\n                        compiledSchema.push([\n                            {\n                                propertyName: schemaPropertyName,\n                                schemaProp: {\n                                    type: schemaPropertyValue.type,\n                                    fieldNumber: schemaPropertyValue.fieldNumber,\n                                },\n                                dataPath: [...dataPath],\n                                binaryKey: utils_1.generateKey(schemaPropertyValue),\n                            },\n                            res,\n                        ]);\n                        dataPath.pop();\n                    }\n                    else {\n                        compiledSchema.push([\n                            {\n                                propertyName: schemaPropertyName,\n                                schemaProp: {\n                                    type: schemaPropertyValue.type,\n                                    fieldNumber: schemaPropertyValue.fieldNumber,\n                                },\n                                dataPath: [...dataPath],\n                                binaryKey: utils_1.generateKey(schemaPropertyValue),\n                            },\n                            {\n                                propertyName: schemaPropertyName,\n                                schemaProp: {\n                                    dataType: schemaPropertyValue.items.dataType,\n                                    fieldNumber: schemaPropertyValue.fieldNumber,\n                                },\n                                dataPath: [...dataPath],\n                                binaryKey: utils_1.generateKey(schemaPropertyValue),\n                            },\n                        ]);\n                        dataPath.pop();\n                    }\n                }\n                else {\n                    compiledSchema.push({\n                        propertyName: schemaPropertyName,\n                        schemaProp: schemaPropertyValue,\n                        dataPath: [...dataPath],\n                        binaryKey: utils_1.generateKey(schemaPropertyValue),\n                    });\n                }\n            }\n        }\n        return compiledSchema;\n    }\n}\nexports.Codec = Codec;\nexports.codec = new Codec();\n//# sourceMappingURL=codec.js.map"]},"metadata":{},"sourceType":"script"}