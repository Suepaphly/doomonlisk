{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PeerPool = exports.PROTECTION_CATEGORY = exports.filterPeersByCategory = exports.PROTECT_BY = void 0;\n\nvar events_1 = require(\"events\");\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar constants_1 = require(\"./constants\");\n\nvar errors_1 = require(\"./errors\");\n\nvar events_2 = require(\"./events\");\n\nvar peer_1 = require(\"./peer\");\n\nvar utils_1 = require(\"./utils\");\n\nvar codec_1 = require(\"./utils/codec\");\n\nvar shuffle = require(\"lodash.shuffle\");\n\nvar PROTECT_BY;\n\n(function (PROTECT_BY) {\n  PROTECT_BY[\"HIGHEST\"] = \"highest\";\n  PROTECT_BY[\"LOWEST\"] = \"lowest\";\n})(PROTECT_BY = exports.PROTECT_BY || (exports.PROTECT_BY = {}));\n\nvar filterPeersByCategory = function filterPeersByCategory(peers, options) {\n  if (options.percentage > 1 || options.percentage < 0) {\n    return peers;\n  }\n\n  var numberOfProtectedPeers = Math.ceil(peers.length * options.percentage);\n  var sign = options.protectBy === PROTECT_BY.HIGHEST ? -1 : 1;\n  return peers.sort(function (peerA, peerB) {\n    return peerA.internalState[options.category] > peerB.internalState[options.category] ? sign : sign * -1;\n  }).slice(0, numberOfProtectedPeers);\n};\n\nexports.filterPeersByCategory = filterPeersByCategory;\nvar PROTECTION_CATEGORY;\n\n(function (PROTECTION_CATEGORY) {\n  PROTECTION_CATEGORY[\"NET_GROUP\"] = \"netgroup\";\n  PROTECTION_CATEGORY[\"LATENCY\"] = \"latency\";\n  PROTECTION_CATEGORY[\"RESPONSE_RATE\"] = \"responseRate\";\n  PROTECTION_CATEGORY[\"CONNECT_TIME\"] = \"connectTime\";\n})(PROTECTION_CATEGORY = exports.PROTECTION_CATEGORY || (exports.PROTECTION_CATEGORY = {}));\n\nvar PeerPool = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(PeerPool, _events_1$EventEmitte);\n\n  var _super = _createSuper(PeerPool);\n\n  function PeerPool(peerPoolConfig) {\n    var _this;\n\n    _classCallCheck(this, PeerPool);\n\n    _this = _super.call(this);\n    _this._peerMap = new Map();\n    _this._peerPoolConfig = peerPoolConfig;\n    _this._rpcSchema = peerPoolConfig.rpcSchemas;\n    lisk_codec_1.codec.addSchema(_this._rpcSchema.nodeInfo);\n    _this._peerConfig = {\n      hostPort: _this._peerPoolConfig.hostPort,\n      connectTimeout: _this._peerPoolConfig.connectTimeout,\n      ackTimeout: _this._peerPoolConfig.ackTimeout,\n      wsMaxMessageRate: _this._peerPoolConfig.wsMaxMessageRate,\n      wsMaxMessageRatePenalty: _this._peerPoolConfig.wsMaxMessageRatePenalty,\n      maxPeerDiscoveryResponseLength: _this._peerPoolConfig.maxPeerDiscoveryResponseLength,\n      rateCalculationInterval: _this._peerPoolConfig.rateCalculationInterval,\n      peerStatusMessageRate: _this._peerPoolConfig.peerStatusMessageRate,\n      wsMaxPayload: _this._peerPoolConfig.wsMaxPayload,\n      maxPeerInfoSize: _this._peerPoolConfig.maxPeerInfoSize,\n      secret: _this._peerPoolConfig.secret,\n      rpcSchemas: _this._rpcSchema\n    };\n    _this._peerBook = peerPoolConfig.peerBook;\n    _this._peerSelectForSend = peerPoolConfig.peerSelectionForSend;\n    _this._peerSelectForRequest = peerPoolConfig.peerSelectionForRequest;\n    _this._peerSelectForConnection = peerPoolConfig.peerSelectionForConnection;\n    _this._maxOutboundConnections = peerPoolConfig.maxOutboundConnections;\n    _this._maxInboundConnections = peerPoolConfig.maxInboundConnections;\n    _this._sendPeerLimit = peerPoolConfig.sendPeerLimit;\n    _this._outboundShuffleIntervalId = setInterval(function () {\n      _this._evictPeer(peer_1.OutboundPeer);\n    }, peerPoolConfig.outboundShuffleInterval);\n\n    _this._handlePeerRPC = function (request) {\n      _this.emit(events_2.EVENT_REQUEST_RECEIVED, request);\n    };\n\n    _this._handlePeerMessage = function (message) {\n      _this.emit(events_2.EVENT_MESSAGE_RECEIVED, message);\n    };\n\n    _this._handleDiscoverPeer = function (peerInfo) {\n      _this.emit(events_2.EVENT_DISCOVERED_PEER, peerInfo);\n    };\n\n    _this._handleOutboundPeerConnect = function (peerInfo) {\n      _this.emit(events_2.EVENT_CONNECT_OUTBOUND, peerInfo);\n    };\n\n    _this._handleOutboundPeerConnectAbort = function (peerInfo) {\n      _this.emit(events_2.EVENT_CONNECT_ABORT_OUTBOUND, peerInfo);\n    };\n\n    _this._handlePeerCloseOutbound = function (closePacket) {\n      var _a;\n\n      var peerId = closePacket.peerInfo.peerId;\n\n      _this.removePeer(peerId, closePacket.code, \"Outbound peer \".concat(peerId, \" disconnected with reason: \").concat((_a = closePacket.reason) !== null && _a !== void 0 ? _a : 'Unknown reason'));\n\n      _this.emit(events_2.EVENT_CLOSE_OUTBOUND, closePacket);\n    };\n\n    _this._handlePeerCloseInbound = function (closePacket) {\n      var _a;\n\n      var peerId = closePacket.peerInfo.peerId;\n\n      _this.removePeer(peerId, closePacket.code, \"Inbound peer \".concat(peerId, \" disconnected with reason: \").concat((_a = closePacket.reason) !== null && _a !== void 0 ? _a : 'Unknown reason'));\n\n      _this.emit(events_2.EVENT_CLOSE_INBOUND, closePacket);\n    };\n\n    _this._handlePeerOutboundSocketError = function (error) {\n      _this.emit(events_2.EVENT_OUTBOUND_SOCKET_ERROR, error);\n    };\n\n    _this._handlePeerInboundSocketError = function (error) {\n      _this.emit(events_2.EVENT_INBOUND_SOCKET_ERROR, error);\n    };\n\n    _this._handlePeerInfoUpdate = function (peerInfo) {\n      _this.emit(events_2.EVENT_UPDATED_PEER_INFO, peerInfo);\n    };\n\n    _this._handleFailedPeerInfoUpdate = function (error) {\n      _this.emit(events_2.EVENT_FAILED_PEER_INFO_UPDATE, error);\n    };\n\n    _this._handleFailedToFetchPeerInfo = function (error) {\n      _this.emit(events_2.EVENT_FAILED_TO_FETCH_PEER_INFO, error);\n    };\n\n    _this._handleFailedToFetchPeers = function (error) {\n      _this.emit(events_2.EVENT_FAILED_TO_FETCH_PEERS, error);\n    };\n\n    _this._handleFailedToCollectPeerDetails = function (error) {\n      _this.emit(events_2.EVENT_FAILED_TO_COLLECT_PEER_DETAILS_ON_CONNECT, error);\n    };\n\n    _this._handleBanPeer = function (peerId) {\n      _this.emit(events_2.EVENT_BAN_PEER, peerId);\n    };\n\n    return _this;\n  }\n\n  _createClass(PeerPool, [{\n    key: \"applyNodeInfo\",\n    value: function applyNodeInfo(nodeInfo) {\n      var _this2 = this;\n\n      this._nodeInfo = nodeInfo;\n      var peerList = this.getPeers();\n      peerList.forEach(function (peer) {\n        _this2._applyNodeInfoOnPeer(peer);\n      });\n    }\n  }, {\n    key: \"nodeInfo\",\n    get: function get() {\n      return this._nodeInfo;\n    }\n  }, {\n    key: \"peerConfig\",\n    get: function get() {\n      return _objectSpread({}, this._peerConfig);\n    }\n  }, {\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(packet) {\n        var outboundPeerInfos, peerInfoForRequest, selectedPeers, selectedPeerId;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                outboundPeerInfos = this.getAllConnectedPeerInfos(peer_1.OutboundPeer);\n                peerInfoForRequest = outboundPeerInfos.length === 0 ? this.getAllConnectedPeerInfos() : outboundPeerInfos;\n                selectedPeers = this._peerSelectForRequest({\n                  peers: peerInfoForRequest,\n                  nodeInfo: this._nodeInfo,\n                  peerLimit: 1,\n                  requestPacket: packet\n                });\n\n                if (!(selectedPeers.length <= 0)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new errors_1.RequestFailError('Request failed due to no peers found in peer selection');\n\n              case 5:\n                selectedPeerId = selectedPeers[0].peerId;\n                return _context.abrupt(\"return\", this.requestFromPeer(packet, selectedPeerId));\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function request(_x) {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n  }, {\n    key: \"broadcast\",\n    value: function broadcast(message) {\n      var _this3 = this;\n\n      _toConsumableArray(this._peerMap.values()).forEach(function (peer) {\n        var selectedPeerId = peer.peerInfo.peerId;\n\n        try {\n          _this3.sendToPeer(message, selectedPeerId);\n        } catch (error) {\n          _this3.emit(events_2.EVENT_FAILED_TO_SEND_MESSAGE, error);\n        }\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(message) {\n      var _this4 = this;\n\n      var listOfPeerInfo = _toConsumableArray(this._peerMap.values()).map(function (peer) {\n        return _objectSpread(_objectSpread({}, peer.peerInfo), {}, {\n          internalState: _objectSpread(_objectSpread({}, peer.peerInfo.internalState), {}, {\n            advertiseAddress: peer.peerInfo.internalState ? peer.peerInfo.internalState.advertiseAddress : true,\n            connectionKind: peer instanceof peer_1.OutboundPeer ? constants_1.ConnectionKind.OUTBOUND : constants_1.ConnectionKind.INBOUND\n          })\n        });\n      });\n\n      var selectedPeers = this._peerSelectForSend({\n        peers: listOfPeerInfo,\n        nodeInfo: this._nodeInfo,\n        peerLimit: this._sendPeerLimit,\n        messagePacket: message\n      });\n\n      selectedPeers.forEach(function (peerInfo) {\n        var selectedPeerId = peerInfo.peerId;\n\n        try {\n          _this4.sendToPeer(message, selectedPeerId);\n        } catch (error) {\n          _this4.emit(events_2.EVENT_FAILED_TO_SEND_MESSAGE, error);\n        }\n      });\n    }\n  }, {\n    key: \"requestFromPeer\",\n    value: function () {\n      var _requestFromPeer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(packet, peerId) {\n        var peer;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                peer = this._peerMap.get(peerId);\n\n                if (peer) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw new errors_1.RequestFailError(\"Request failed because a peer with id \".concat(peerId, \" could not be found\"));\n\n              case 3:\n                return _context2.abrupt(\"return\", peer.request(packet));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function requestFromPeer(_x2, _x3) {\n        return _requestFromPeer.apply(this, arguments);\n      }\n\n      return requestFromPeer;\n    }()\n  }, {\n    key: \"sendToPeer\",\n    value: function sendToPeer(message, peerId) {\n      var peer = this._peerMap.get(peerId);\n\n      if (!peer) {\n        throw new errors_1.SendFailError(\"Send failed because a peer with id \".concat(peerId, \" could not be found\"));\n      }\n\n      peer.send(message);\n    }\n  }, {\n    key: \"discoverFromSeedPeers\",\n    value: function discoverFromSeedPeers() {\n      var _this5 = this;\n\n      var freeOutboundSlots = this.getFreeOutboundSlots();\n\n      if (freeOutboundSlots === 0 || this._peerBook.seedPeers.length === 0) {\n        return;\n      }\n\n      this._peerBook.seedPeers.forEach(function (peer) {\n        var isConnectedSeedPeer = _this5.getPeer(peer.peerId);\n\n        if (isConnectedSeedPeer) {\n          _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.prev = 0;\n                    _context3.next = 3;\n                    return isConnectedSeedPeer.discoverPeers();\n\n                  case 3:\n                    _context3.next = 7;\n                    break;\n\n                  case 5:\n                    _context3.prev = 5;\n                    _context3.t0 = _context3[\"catch\"](0);\n\n                  case 7:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, _callee3, null, [[0, 5]]);\n          }))();\n        }\n      });\n\n      var seedPeersForDiscovery = shuffle(this._peerBook.seedPeers.slice(0, freeOutboundSlots));\n      seedPeersForDiscovery.forEach(function (peer) {\n        _this5._addOutboundPeer(peer, _this5._nodeInfo);\n      });\n    }\n  }, {\n    key: \"triggerNewConnections\",\n    value: function triggerNewConnections(newPeers, triedPeers) {\n      var _this6 = this;\n\n      var disconnectedNewPeers = newPeers.filter(function (newPeer) {\n        return !_this6._peerMap.has(newPeer.peerId);\n      });\n      var disconnectedTriedPeers = triedPeers.filter(function (triedPeer) {\n        return !_this6._peerMap.has(triedPeer.peerId);\n      });\n\n      var disconnectedFixedPeers = this._peerBook.fixedPeers.filter(function (peer) {\n        return !_this6._peerMap.has(peer.peerId);\n      });\n\n      var peerLimit = this.getFreeOutboundSlots();\n\n      if (peerLimit === 0) {\n        this._disconnectFromSeedPeers();\n      }\n\n      var peersToConnect = this._peerSelectForConnection({\n        newPeers: disconnectedNewPeers,\n        triedPeers: disconnectedTriedPeers,\n        nodeInfo: this._nodeInfo,\n        peerLimit: peerLimit\n      });\n\n      [].concat(_toConsumableArray(peersToConnect), _toConsumableArray(disconnectedFixedPeers)).forEach(function (peerInfo) {\n        return _this6._addOutboundPeer(peerInfo, _this6._nodeInfo);\n      });\n    }\n  }, {\n    key: \"addInboundPeer\",\n    value: function addInboundPeer(peerInfo, socket) {\n      if (this._peerMap.has(peerInfo.peerId)) {\n        throw new errors_1.PeerInboundDuplicateConnectionError(\"Peer \".concat(peerInfo.peerId, \" was already in the peer pool\"), peerInfo.peerId);\n      }\n\n      var inboundPeers = this.getPeers(peer_1.InboundPeer);\n\n      if (inboundPeers.length >= this._maxInboundConnections) {\n        this._evictPeer(peer_1.InboundPeer);\n      }\n\n      var peer = new peer_1.InboundPeer(peerInfo, socket, _objectSpread(_objectSpread({}, this._peerConfig), {}, {\n        serverNodeInfo: this._nodeInfo\n      }));\n\n      this._peerMap.set(peer.id, peer);\n\n      this._bindHandlersToPeer(peer);\n\n      if (this._nodeInfo) {\n        this._applyNodeInfoOnPeer(peer);\n      }\n\n      peer.connect();\n      return peer;\n    }\n  }, {\n    key: \"getPeersCountPerKind\",\n    value: function getPeersCountPerKind() {\n      return _toConsumableArray(this._peerMap.values()).reduce(function (prev, peer) {\n        if (peer instanceof peer_1.OutboundPeer) {\n          return {\n            outboundCount: prev.outboundCount + 1,\n            inboundCount: prev.inboundCount\n          };\n        }\n\n        if (peer instanceof peer_1.InboundPeer) {\n          return {\n            outboundCount: prev.outboundCount,\n            inboundCount: prev.inboundCount + 1\n          };\n        }\n\n        throw new Error('A non-identified peer exists in the pool.');\n      }, {\n        outboundCount: 0,\n        inboundCount: 0\n      });\n    }\n  }, {\n    key: \"removeAllPeers\",\n    value: function removeAllPeers() {\n      var _this7 = this;\n\n      if (this._outboundShuffleIntervalId) {\n        clearInterval(this._outboundShuffleIntervalId);\n      }\n\n      this._peerMap.forEach(function (peer) {\n        _this7.removePeer(peer.id, constants_1.INTENTIONAL_DISCONNECT_CODE, \"Intentionally removed peer \".concat(peer.id));\n      });\n    }\n  }, {\n    key: \"getPeers\",\n    value: function getPeers(kind) {\n      var peers = _toConsumableArray(this._peerMap.values());\n\n      if (kind) {\n        return peers.filter(function (peer) {\n          return peer instanceof kind;\n        });\n      }\n\n      return peers;\n    }\n  }, {\n    key: \"getAllConnectedPeerInfos\",\n    value: function getAllConnectedPeerInfos(kind) {\n      return this.getConnectedPeers(kind).map(function (peer) {\n        return peer.peerInfo;\n      });\n    }\n  }, {\n    key: \"getConnectedPeers\",\n    value: function getConnectedPeers(kind) {\n      var peers = _toConsumableArray(this._peerMap.values());\n\n      if (kind) {\n        return peers.filter(function (peer) {\n          return peer instanceof kind && peer.state === peer_1.ConnectionState.OPEN;\n        });\n      }\n\n      return peers.filter(function (peer) {\n        return peer.state === peer_1.ConnectionState.OPEN;\n      });\n    }\n  }, {\n    key: \"getPeer\",\n    value: function getPeer(peerId) {\n      return this._peerMap.get(peerId);\n    }\n  }, {\n    key: \"hasPeer\",\n    value: function hasPeer(peerId) {\n      return this._peerMap.has(peerId);\n    }\n  }, {\n    key: \"removePeer\",\n    value: function removePeer(peerId, code, reason) {\n      var peer = this._peerMap.get(peerId);\n\n      if (peer) {\n        peer.disconnect(code, reason);\n\n        this._unbindHandlersFromPeer(peer);\n      }\n\n      this.emit(events_2.EVENT_REMOVE_PEER, peerId);\n      return this._peerMap.delete(peerId);\n    }\n  }, {\n    key: \"applyPenalty\",\n    value: function applyPenalty(peerPenalty) {\n      if (!this._peerBook.isTrustedPeer(peerPenalty.peerId)) {\n        var peer = this._peerMap.get(peerPenalty.peerId);\n\n        if (peer) {\n          peer.applyPenalty(peerPenalty.penalty);\n          return;\n        }\n\n        throw new Error(\"Peer not found: \".concat(peerPenalty.peerId));\n      }\n    }\n  }, {\n    key: \"getFreeOutboundSlots\",\n    value: function getFreeOutboundSlots() {\n      var _this8 = this;\n\n      var _this$getPeersCountPe = this.getPeersCountPerKind(),\n          outboundCount = _this$getPeersCountPe.outboundCount;\n\n      var disconnectedFixedPeers = this._peerBook.fixedPeers.filter(function (peer) {\n        return !_this8._peerMap.has(peer.peerId);\n      });\n\n      var openOutboundSlots = this._maxOutboundConnections - disconnectedFixedPeers.length - outboundCount;\n      return openOutboundSlots;\n    }\n  }, {\n    key: \"_applyNodeInfoOnPeer\",\n    value: function _applyNodeInfoOnPeer(peer) {\n      var encodedNodeInfo = codec_1.encodeNodeInfo(this._rpcSchema.nodeInfo, this._nodeInfo);\n      utils_1.validatePayloadSize(encodedNodeInfo, this._peerPoolConfig.maxPeerInfoSize);\n\n      try {\n        peer.send({\n          event: events_2.REMOTE_EVENT_POST_NODE_INFO,\n          data: encodedNodeInfo\n        });\n      } catch (error) {\n        this.emit(events_2.EVENT_FAILED_TO_PUSH_NODE_INFO, error);\n      }\n    }\n  }, {\n    key: \"_disconnectFromSeedPeers\",\n    value: function _disconnectFromSeedPeers() {\n      var _this9 = this;\n\n      var outboundPeers = this.getPeers(peer_1.OutboundPeer);\n      outboundPeers.forEach(function (outboundPeer) {\n        var isFixedPeer = _this9._peerBook.fixedPeers.find(function (peer) {\n          return peer.peerId === outboundPeer.id;\n        });\n\n        var isSeedPeer = _this9._peerBook.seedPeers.find(function (peer) {\n          return peer.peerId === outboundPeer.id;\n        });\n\n        if (isSeedPeer && !isFixedPeer) {\n          _this9.removePeer(outboundPeer.id, constants_1.INTENTIONAL_DISCONNECT_CODE, constants_1.SEED_PEER_DISCONNECTION_REASON);\n        }\n      });\n    }\n  }, {\n    key: \"_selectPeersForEviction\",\n    value: function _selectPeersForEviction() {\n      var peers = _toConsumableArray(this.getPeers(peer_1.InboundPeer)).filter(function (peer) {\n        return !(peer.internalState.peerKind === constants_1.PeerKind.WHITELISTED_PEER || peer.internalState.peerKind === constants_1.PeerKind.FIXED_PEER);\n      });\n\n      var protectedPeersByNetgroup = this._peerPoolConfig.netgroupProtectionRatio ? exports.filterPeersByCategory(peers, {\n        category: PROTECTION_CATEGORY.NET_GROUP,\n        percentage: this._peerPoolConfig.netgroupProtectionRatio,\n        protectBy: PROTECT_BY.HIGHEST\n      }).map(function (peer) {\n        return peer.id;\n      }) : [];\n      var protectedPeersByLatency = this._peerPoolConfig.latencyProtectionRatio ? exports.filterPeersByCategory(peers, {\n        category: PROTECTION_CATEGORY.LATENCY,\n        percentage: this._peerPoolConfig.latencyProtectionRatio,\n        protectBy: PROTECT_BY.LOWEST\n      }).map(function (peer) {\n        return peer.id;\n      }) : [];\n      var protectedPeersByResponseRate = this._peerPoolConfig.productivityProtectionRatio ? exports.filterPeersByCategory(peers, {\n        category: PROTECTION_CATEGORY.RESPONSE_RATE,\n        percentage: this._peerPoolConfig.productivityProtectionRatio,\n        protectBy: PROTECT_BY.HIGHEST\n      }).map(function (peer) {\n        return peer.id;\n      }) : [];\n      var uniqueProtectedPeers = new Set([].concat(_toConsumableArray(protectedPeersByNetgroup), _toConsumableArray(protectedPeersByLatency), _toConsumableArray(protectedPeersByResponseRate)));\n      var unprotectedPeers = peers.filter(function (peer) {\n        return !uniqueProtectedPeers.has(peer.id);\n      });\n      var protectedPeersByConnectTime = this._peerPoolConfig.longevityProtectionRatio ? new Set(_toConsumableArray(exports.filterPeersByCategory(unprotectedPeers, {\n        category: PROTECTION_CATEGORY.CONNECT_TIME,\n        percentage: this._peerPoolConfig.longevityProtectionRatio,\n        protectBy: PROTECT_BY.LOWEST\n      }).map(function (peer) {\n        return peer.id;\n      }))) : new Set();\n      return unprotectedPeers.filter(function (peer) {\n        return !protectedPeersByConnectTime.has(peer.id);\n      });\n    }\n  }, {\n    key: \"_evictPeer\",\n    value: function _evictPeer(kind) {\n      var peers = this.getPeers(kind);\n\n      if (peers.length < 1) {\n        return;\n      }\n\n      if (kind === peer_1.OutboundPeer) {\n        var selectedPeer = shuffle(peers.filter(function (peer) {\n          return peer.internalState.peerKind !== constants_1.PeerKind.FIXED_PEER;\n        }))[0];\n\n        if (selectedPeer) {\n          this.removePeer(selectedPeer.id, constants_1.EVICTED_PEER_CODE, \"Evicted outbound peer \".concat(selectedPeer.id));\n        }\n      }\n\n      if (kind === peer_1.InboundPeer) {\n        var evictionCandidates = this._selectPeersForEviction();\n\n        var peerToEvict = shuffle(evictionCandidates)[0];\n\n        if (peerToEvict) {\n          this.removePeer(peerToEvict.id, constants_1.EVICTED_PEER_CODE, \"Evicted inbound peer \".concat(peerToEvict.id));\n        }\n      }\n    }\n  }, {\n    key: \"_bindHandlersToPeer\",\n    value: function _bindHandlersToPeer(peer) {\n      peer.on(events_2.EVENT_REQUEST_RECEIVED, this._handlePeerRPC);\n      peer.on(events_2.EVENT_MESSAGE_RECEIVED, this._handlePeerMessage);\n      peer.on(events_2.EVENT_CONNECT_OUTBOUND, this._handleOutboundPeerConnect);\n      peer.on(events_2.EVENT_CONNECT_ABORT_OUTBOUND, this._handleOutboundPeerConnectAbort);\n      peer.on(events_2.EVENT_CLOSE_OUTBOUND, this._handlePeerCloseOutbound);\n      peer.on(events_2.EVENT_CLOSE_INBOUND, this._handlePeerCloseInbound);\n      peer.on(events_2.EVENT_OUTBOUND_SOCKET_ERROR, this._handlePeerOutboundSocketError);\n      peer.on(events_2.EVENT_INBOUND_SOCKET_ERROR, this._handlePeerInboundSocketError);\n      peer.on(events_2.EVENT_UPDATED_PEER_INFO, this._handlePeerInfoUpdate);\n      peer.on(events_2.EVENT_FAILED_PEER_INFO_UPDATE, this._handleFailedPeerInfoUpdate);\n      peer.on(events_2.EVENT_FAILED_TO_FETCH_PEER_INFO, this._handleFailedToFetchPeerInfo);\n      peer.on(events_2.EVENT_FAILED_TO_FETCH_PEERS, this._handleFailedToFetchPeers);\n      peer.on(events_2.EVENT_FAILED_TO_COLLECT_PEER_DETAILS_ON_CONNECT, this._handleFailedToCollectPeerDetails);\n      peer.on(events_2.EVENT_BAN_PEER, this._handleBanPeer);\n      peer.on(events_2.EVENT_DISCOVERED_PEER, this._handleDiscoverPeer);\n    }\n  }, {\n    key: \"_unbindHandlersFromPeer\",\n    value: function _unbindHandlersFromPeer(peer) {\n      peer.removeListener(events_2.EVENT_REQUEST_RECEIVED, this._handlePeerRPC);\n      peer.removeListener(events_2.EVENT_MESSAGE_RECEIVED, this._handlePeerMessage);\n      peer.removeListener(events_2.EVENT_CONNECT_OUTBOUND, this._handleOutboundPeerConnect);\n      peer.removeListener(events_2.EVENT_CONNECT_ABORT_OUTBOUND, this._handleOutboundPeerConnectAbort);\n      peer.removeListener(events_2.EVENT_CLOSE_OUTBOUND, this._handlePeerCloseOutbound);\n      peer.removeListener(events_2.EVENT_CLOSE_INBOUND, this._handlePeerCloseInbound);\n      peer.removeListener(events_2.EVENT_OUTBOUND_SOCKET_ERROR, this._handlePeerOutboundSocketError);\n      peer.removeListener(events_2.EVENT_INBOUND_SOCKET_ERROR, this._handlePeerInboundSocketError);\n      peer.removeListener(events_2.EVENT_UPDATED_PEER_INFO, this._handlePeerInfoUpdate);\n      peer.removeListener(events_2.EVENT_FAILED_PEER_INFO_UPDATE, this._handleFailedPeerInfoUpdate);\n      peer.removeListener(events_2.EVENT_FAILED_TO_FETCH_PEER_INFO, this._handleFailedToFetchPeerInfo);\n      peer.removeListener(events_2.EVENT_FAILED_TO_FETCH_PEERS, this._handleFailedToFetchPeers);\n      peer.removeListener(events_2.EVENT_FAILED_TO_COLLECT_PEER_DETAILS_ON_CONNECT, this._handleFailedToCollectPeerDetails);\n      peer.removeListener(events_2.EVENT_BAN_PEER, this._handleBanPeer);\n      peer.removeListener(events_2.EVENT_DISCOVERED_PEER, this._handleDiscoverPeer);\n    }\n  }, {\n    key: \"_addOutboundPeer\",\n    value: function _addOutboundPeer(peerInfo, nodeInfo) {\n      if (this.hasPeer(peerInfo.peerId) || this._peerBook.bannedIPs.has(peerInfo.ipAddress)) {\n        return false;\n      }\n\n      var outboundConnectedPeer = this.getPeers(peer_1.OutboundPeer).find(function (p) {\n        return p.ipAddress === peerInfo.ipAddress && p.ipAddress !== constants_1.DEFAULT_LOCALHOST_IP;\n      });\n\n      if (outboundConnectedPeer) {\n        return false;\n      }\n\n      var peer = new peer_1.OutboundPeer(peerInfo, _objectSpread(_objectSpread({}, this._peerConfig), {}, {\n        serverNodeInfo: nodeInfo\n      }));\n\n      this._peerMap.set(peer.id, peer);\n\n      this._bindHandlersToPeer(peer);\n\n      if (this._nodeInfo) {\n        this._applyNodeInfoOnPeer(peer);\n      }\n\n      return true;\n    }\n  }]);\n\n  return PeerPool;\n}(events_1.EventEmitter);\n\nexports.PeerPool = PeerPool;","map":{"version":3,"sources":["../src/peer_pool.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PeerPool = exports.PROTECTION_CATEGORY = exports.filterPeersByCategory = exports.PROTECT_BY = void 0;\nconst events_1 = require(\"events\");\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst constants_1 = require(\"./constants\");\nconst errors_1 = require(\"./errors\");\nconst events_2 = require(\"./events\");\nconst peer_1 = require(\"./peer\");\nconst utils_1 = require(\"./utils\");\nconst codec_1 = require(\"./utils/codec\");\nconst shuffle = require(\"lodash.shuffle\");\nvar PROTECT_BY;\n(function (PROTECT_BY) {\n    PROTECT_BY[\"HIGHEST\"] = \"highest\";\n    PROTECT_BY[\"LOWEST\"] = \"lowest\";\n})(PROTECT_BY = exports.PROTECT_BY || (exports.PROTECT_BY = {}));\nconst filterPeersByCategory = (peers, options) => {\n    if (options.percentage > 1 || options.percentage < 0) {\n        return peers;\n    }\n    const numberOfProtectedPeers = Math.ceil(peers.length * options.percentage);\n    const sign = options.protectBy === PROTECT_BY.HIGHEST ? -1 : 1;\n    return (peers\n        .sort((peerA, peerB) => peerA.internalState[options.category] >\n        peerB.internalState[options.category]\n        ? sign\n        : sign * -1)\n        .slice(0, numberOfProtectedPeers));\n};\nexports.filterPeersByCategory = filterPeersByCategory;\nvar PROTECTION_CATEGORY;\n(function (PROTECTION_CATEGORY) {\n    PROTECTION_CATEGORY[\"NET_GROUP\"] = \"netgroup\";\n    PROTECTION_CATEGORY[\"LATENCY\"] = \"latency\";\n    PROTECTION_CATEGORY[\"RESPONSE_RATE\"] = \"responseRate\";\n    PROTECTION_CATEGORY[\"CONNECT_TIME\"] = \"connectTime\";\n})(PROTECTION_CATEGORY = exports.PROTECTION_CATEGORY || (exports.PROTECTION_CATEGORY = {}));\nclass PeerPool extends events_1.EventEmitter {\n    constructor(peerPoolConfig) {\n        super();\n        this._peerMap = new Map();\n        this._peerPoolConfig = peerPoolConfig;\n        this._rpcSchema = peerPoolConfig.rpcSchemas;\n        lisk_codec_1.codec.addSchema(this._rpcSchema.nodeInfo);\n        this._peerConfig = {\n            hostPort: this._peerPoolConfig.hostPort,\n            connectTimeout: this._peerPoolConfig.connectTimeout,\n            ackTimeout: this._peerPoolConfig.ackTimeout,\n            wsMaxMessageRate: this._peerPoolConfig.wsMaxMessageRate,\n            wsMaxMessageRatePenalty: this._peerPoolConfig.wsMaxMessageRatePenalty,\n            maxPeerDiscoveryResponseLength: this._peerPoolConfig.maxPeerDiscoveryResponseLength,\n            rateCalculationInterval: this._peerPoolConfig.rateCalculationInterval,\n            peerStatusMessageRate: this._peerPoolConfig.peerStatusMessageRate,\n            wsMaxPayload: this._peerPoolConfig.wsMaxPayload,\n            maxPeerInfoSize: this._peerPoolConfig.maxPeerInfoSize,\n            secret: this._peerPoolConfig.secret,\n            rpcSchemas: this._rpcSchema,\n        };\n        this._peerBook = peerPoolConfig.peerBook;\n        this._peerSelectForSend = peerPoolConfig.peerSelectionForSend;\n        this._peerSelectForRequest = peerPoolConfig.peerSelectionForRequest;\n        this._peerSelectForConnection = peerPoolConfig.peerSelectionForConnection;\n        this._maxOutboundConnections = peerPoolConfig.maxOutboundConnections;\n        this._maxInboundConnections = peerPoolConfig.maxInboundConnections;\n        this._sendPeerLimit = peerPoolConfig.sendPeerLimit;\n        this._outboundShuffleIntervalId = setInterval(() => {\n            this._evictPeer(peer_1.OutboundPeer);\n        }, peerPoolConfig.outboundShuffleInterval);\n        this._handlePeerRPC = (request) => {\n            this.emit(events_2.EVENT_REQUEST_RECEIVED, request);\n        };\n        this._handlePeerMessage = (message) => {\n            this.emit(events_2.EVENT_MESSAGE_RECEIVED, message);\n        };\n        this._handleDiscoverPeer = (peerInfo) => {\n            this.emit(events_2.EVENT_DISCOVERED_PEER, peerInfo);\n        };\n        this._handleOutboundPeerConnect = (peerInfo) => {\n            this.emit(events_2.EVENT_CONNECT_OUTBOUND, peerInfo);\n        };\n        this._handleOutboundPeerConnectAbort = (peerInfo) => {\n            this.emit(events_2.EVENT_CONNECT_ABORT_OUTBOUND, peerInfo);\n        };\n        this._handlePeerCloseOutbound = (closePacket) => {\n            var _a;\n            const { peerId } = closePacket.peerInfo;\n            this.removePeer(peerId, closePacket.code, `Outbound peer ${peerId} disconnected with reason: ${(_a = closePacket.reason) !== null && _a !== void 0 ? _a : 'Unknown reason'}`);\n            this.emit(events_2.EVENT_CLOSE_OUTBOUND, closePacket);\n        };\n        this._handlePeerCloseInbound = (closePacket) => {\n            var _a;\n            const { peerId } = closePacket.peerInfo;\n            this.removePeer(peerId, closePacket.code, `Inbound peer ${peerId} disconnected with reason: ${(_a = closePacket.reason) !== null && _a !== void 0 ? _a : 'Unknown reason'}`);\n            this.emit(events_2.EVENT_CLOSE_INBOUND, closePacket);\n        };\n        this._handlePeerOutboundSocketError = (error) => {\n            this.emit(events_2.EVENT_OUTBOUND_SOCKET_ERROR, error);\n        };\n        this._handlePeerInboundSocketError = (error) => {\n            this.emit(events_2.EVENT_INBOUND_SOCKET_ERROR, error);\n        };\n        this._handlePeerInfoUpdate = (peerInfo) => {\n            this.emit(events_2.EVENT_UPDATED_PEER_INFO, peerInfo);\n        };\n        this._handleFailedPeerInfoUpdate = (error) => {\n            this.emit(events_2.EVENT_FAILED_PEER_INFO_UPDATE, error);\n        };\n        this._handleFailedToFetchPeerInfo = (error) => {\n            this.emit(events_2.EVENT_FAILED_TO_FETCH_PEER_INFO, error);\n        };\n        this._handleFailedToFetchPeers = (error) => {\n            this.emit(events_2.EVENT_FAILED_TO_FETCH_PEERS, error);\n        };\n        this._handleFailedToCollectPeerDetails = (error) => {\n            this.emit(events_2.EVENT_FAILED_TO_COLLECT_PEER_DETAILS_ON_CONNECT, error);\n        };\n        this._handleBanPeer = (peerId) => {\n            this.emit(events_2.EVENT_BAN_PEER, peerId);\n        };\n    }\n    applyNodeInfo(nodeInfo) {\n        this._nodeInfo = nodeInfo;\n        const peerList = this.getPeers();\n        peerList.forEach(peer => {\n            this._applyNodeInfoOnPeer(peer);\n        });\n    }\n    get nodeInfo() {\n        return this._nodeInfo;\n    }\n    get peerConfig() {\n        return { ...this._peerConfig };\n    }\n    async request(packet) {\n        const outboundPeerInfos = this.getAllConnectedPeerInfos(peer_1.OutboundPeer);\n        const peerInfoForRequest = outboundPeerInfos.length === 0 ? this.getAllConnectedPeerInfos() : outboundPeerInfos;\n        const selectedPeers = this._peerSelectForRequest({\n            peers: peerInfoForRequest,\n            nodeInfo: this._nodeInfo,\n            peerLimit: 1,\n            requestPacket: packet,\n        });\n        if (selectedPeers.length <= 0) {\n            throw new errors_1.RequestFailError('Request failed due to no peers found in peer selection');\n        }\n        const selectedPeerId = selectedPeers[0].peerId;\n        return this.requestFromPeer(packet, selectedPeerId);\n    }\n    broadcast(message) {\n        [...this._peerMap.values()].forEach(peer => {\n            const selectedPeerId = peer.peerInfo.peerId;\n            try {\n                this.sendToPeer(message, selectedPeerId);\n            }\n            catch (error) {\n                this.emit(events_2.EVENT_FAILED_TO_SEND_MESSAGE, error);\n            }\n        });\n    }\n    send(message) {\n        const listOfPeerInfo = [...this._peerMap.values()].map(peer => ({\n            ...peer.peerInfo,\n            internalState: {\n                ...peer.peerInfo.internalState,\n                advertiseAddress: peer.peerInfo.internalState\n                    ? peer.peerInfo.internalState.advertiseAddress\n                    : true,\n                connectionKind: peer instanceof peer_1.OutboundPeer ? constants_1.ConnectionKind.OUTBOUND : constants_1.ConnectionKind.INBOUND,\n            },\n        }));\n        const selectedPeers = this._peerSelectForSend({\n            peers: listOfPeerInfo,\n            nodeInfo: this._nodeInfo,\n            peerLimit: this._sendPeerLimit,\n            messagePacket: message,\n        });\n        selectedPeers.forEach((peerInfo) => {\n            const selectedPeerId = peerInfo.peerId;\n            try {\n                this.sendToPeer(message, selectedPeerId);\n            }\n            catch (error) {\n                this.emit(events_2.EVENT_FAILED_TO_SEND_MESSAGE, error);\n            }\n        });\n    }\n    async requestFromPeer(packet, peerId) {\n        const peer = this._peerMap.get(peerId);\n        if (!peer) {\n            throw new errors_1.RequestFailError(`Request failed because a peer with id ${peerId} could not be found`);\n        }\n        return peer.request(packet);\n    }\n    sendToPeer(message, peerId) {\n        const peer = this._peerMap.get(peerId);\n        if (!peer) {\n            throw new errors_1.SendFailError(`Send failed because a peer with id ${peerId} could not be found`);\n        }\n        peer.send(message);\n    }\n    discoverFromSeedPeers() {\n        const freeOutboundSlots = this.getFreeOutboundSlots();\n        if (freeOutboundSlots === 0 || this._peerBook.seedPeers.length === 0) {\n            return;\n        }\n        this._peerBook.seedPeers.forEach(peer => {\n            const isConnectedSeedPeer = this.getPeer(peer.peerId);\n            if (isConnectedSeedPeer) {\n                (async () => {\n                    try {\n                        await isConnectedSeedPeer.discoverPeers();\n                    }\n                    catch (error) { }\n                })();\n            }\n        });\n        const seedPeersForDiscovery = shuffle(this._peerBook.seedPeers.slice(0, freeOutboundSlots));\n        seedPeersForDiscovery.forEach(peer => {\n            this._addOutboundPeer(peer, this._nodeInfo);\n        });\n    }\n    triggerNewConnections(newPeers, triedPeers) {\n        const disconnectedNewPeers = newPeers.filter(newPeer => !this._peerMap.has(newPeer.peerId));\n        const disconnectedTriedPeers = triedPeers.filter(triedPeer => !this._peerMap.has(triedPeer.peerId));\n        const disconnectedFixedPeers = this._peerBook.fixedPeers.filter(peer => !this._peerMap.has(peer.peerId));\n        const peerLimit = this.getFreeOutboundSlots();\n        if (peerLimit === 0) {\n            this._disconnectFromSeedPeers();\n        }\n        const peersToConnect = this._peerSelectForConnection({\n            newPeers: disconnectedNewPeers,\n            triedPeers: disconnectedTriedPeers,\n            nodeInfo: this._nodeInfo,\n            peerLimit,\n        });\n        [...peersToConnect, ...disconnectedFixedPeers].forEach((peerInfo) => this._addOutboundPeer(peerInfo, this._nodeInfo));\n    }\n    addInboundPeer(peerInfo, socket) {\n        if (this._peerMap.has(peerInfo.peerId)) {\n            throw new errors_1.PeerInboundDuplicateConnectionError(`Peer ${peerInfo.peerId} was already in the peer pool`, peerInfo.peerId);\n        }\n        const inboundPeers = this.getPeers(peer_1.InboundPeer);\n        if (inboundPeers.length >= this._maxInboundConnections) {\n            this._evictPeer(peer_1.InboundPeer);\n        }\n        const peer = new peer_1.InboundPeer(peerInfo, socket, {\n            ...this._peerConfig,\n            serverNodeInfo: this._nodeInfo,\n        });\n        this._peerMap.set(peer.id, peer);\n        this._bindHandlersToPeer(peer);\n        if (this._nodeInfo) {\n            this._applyNodeInfoOnPeer(peer);\n        }\n        peer.connect();\n        return peer;\n    }\n    getPeersCountPerKind() {\n        return [...this._peerMap.values()].reduce((prev, peer) => {\n            if (peer instanceof peer_1.OutboundPeer) {\n                return {\n                    outboundCount: prev.outboundCount + 1,\n                    inboundCount: prev.inboundCount,\n                };\n            }\n            if (peer instanceof peer_1.InboundPeer) {\n                return {\n                    outboundCount: prev.outboundCount,\n                    inboundCount: prev.inboundCount + 1,\n                };\n            }\n            throw new Error('A non-identified peer exists in the pool.');\n        }, { outboundCount: 0, inboundCount: 0 });\n    }\n    removeAllPeers() {\n        if (this._outboundShuffleIntervalId) {\n            clearInterval(this._outboundShuffleIntervalId);\n        }\n        this._peerMap.forEach((peer) => {\n            this.removePeer(peer.id, constants_1.INTENTIONAL_DISCONNECT_CODE, `Intentionally removed peer ${peer.id}`);\n        });\n    }\n    getPeers(kind) {\n        const peers = [...this._peerMap.values()];\n        if (kind) {\n            return peers.filter(peer => peer instanceof kind);\n        }\n        return peers;\n    }\n    getAllConnectedPeerInfos(kind) {\n        return this.getConnectedPeers(kind).map(peer => peer.peerInfo);\n    }\n    getConnectedPeers(kind) {\n        const peers = [...this._peerMap.values()];\n        if (kind) {\n            return peers.filter(peer => peer instanceof kind && peer.state === peer_1.ConnectionState.OPEN);\n        }\n        return peers.filter(peer => peer.state === peer_1.ConnectionState.OPEN);\n    }\n    getPeer(peerId) {\n        return this._peerMap.get(peerId);\n    }\n    hasPeer(peerId) {\n        return this._peerMap.has(peerId);\n    }\n    removePeer(peerId, code, reason) {\n        const peer = this._peerMap.get(peerId);\n        if (peer) {\n            peer.disconnect(code, reason);\n            this._unbindHandlersFromPeer(peer);\n        }\n        this.emit(events_2.EVENT_REMOVE_PEER, peerId);\n        return this._peerMap.delete(peerId);\n    }\n    applyPenalty(peerPenalty) {\n        if (!this._peerBook.isTrustedPeer(peerPenalty.peerId)) {\n            const peer = this._peerMap.get(peerPenalty.peerId);\n            if (peer) {\n                peer.applyPenalty(peerPenalty.penalty);\n                return;\n            }\n            throw new Error(`Peer not found: ${peerPenalty.peerId}`);\n        }\n    }\n    getFreeOutboundSlots() {\n        const { outboundCount } = this.getPeersCountPerKind();\n        const disconnectedFixedPeers = this._peerBook.fixedPeers.filter(peer => !this._peerMap.has(peer.peerId));\n        const openOutboundSlots = this._maxOutboundConnections - disconnectedFixedPeers.length - outboundCount;\n        return openOutboundSlots;\n    }\n    _applyNodeInfoOnPeer(peer) {\n        const encodedNodeInfo = codec_1.encodeNodeInfo(this._rpcSchema.nodeInfo, this._nodeInfo);\n        utils_1.validatePayloadSize(encodedNodeInfo, this._peerPoolConfig.maxPeerInfoSize);\n        try {\n            peer.send({\n                event: events_2.REMOTE_EVENT_POST_NODE_INFO,\n                data: encodedNodeInfo,\n            });\n        }\n        catch (error) {\n            this.emit(events_2.EVENT_FAILED_TO_PUSH_NODE_INFO, error);\n        }\n    }\n    _disconnectFromSeedPeers() {\n        const outboundPeers = this.getPeers(peer_1.OutboundPeer);\n        outboundPeers.forEach((outboundPeer) => {\n            const isFixedPeer = this._peerBook.fixedPeers.find((peer) => peer.peerId === outboundPeer.id);\n            const isSeedPeer = this._peerBook.seedPeers.find((peer) => peer.peerId === outboundPeer.id);\n            if (isSeedPeer && !isFixedPeer) {\n                this.removePeer(outboundPeer.id, constants_1.INTENTIONAL_DISCONNECT_CODE, constants_1.SEED_PEER_DISCONNECTION_REASON);\n            }\n        });\n    }\n    _selectPeersForEviction() {\n        const peers = [...this.getPeers(peer_1.InboundPeer)].filter(peer => !(peer.internalState.peerKind === constants_1.PeerKind.WHITELISTED_PEER ||\n            peer.internalState.peerKind === constants_1.PeerKind.FIXED_PEER));\n        const protectedPeersByNetgroup = this._peerPoolConfig.netgroupProtectionRatio\n            ? exports.filterPeersByCategory(peers, {\n                category: PROTECTION_CATEGORY.NET_GROUP,\n                percentage: this._peerPoolConfig.netgroupProtectionRatio,\n                protectBy: PROTECT_BY.HIGHEST,\n            }).map(peer => peer.id)\n            : [];\n        const protectedPeersByLatency = this._peerPoolConfig.latencyProtectionRatio\n            ? exports.filterPeersByCategory(peers, {\n                category: PROTECTION_CATEGORY.LATENCY,\n                percentage: this._peerPoolConfig.latencyProtectionRatio,\n                protectBy: PROTECT_BY.LOWEST,\n            }).map(peer => peer.id)\n            : [];\n        const protectedPeersByResponseRate = this._peerPoolConfig.productivityProtectionRatio\n            ? exports.filterPeersByCategory(peers, {\n                category: PROTECTION_CATEGORY.RESPONSE_RATE,\n                percentage: this._peerPoolConfig.productivityProtectionRatio,\n                protectBy: PROTECT_BY.HIGHEST,\n            }).map(peer => peer.id)\n            : [];\n        const uniqueProtectedPeers = new Set([\n            ...protectedPeersByNetgroup,\n            ...protectedPeersByLatency,\n            ...protectedPeersByResponseRate,\n        ]);\n        const unprotectedPeers = peers.filter(peer => !uniqueProtectedPeers.has(peer.id));\n        const protectedPeersByConnectTime = this._peerPoolConfig.longevityProtectionRatio\n            ? new Set([\n                ...exports.filterPeersByCategory(unprotectedPeers, {\n                    category: PROTECTION_CATEGORY.CONNECT_TIME,\n                    percentage: this._peerPoolConfig.longevityProtectionRatio,\n                    protectBy: PROTECT_BY.LOWEST,\n                }).map(peer => peer.id),\n            ])\n            : new Set();\n        return unprotectedPeers.filter(peer => !protectedPeersByConnectTime.has(peer.id));\n    }\n    _evictPeer(kind) {\n        const peers = this.getPeers(kind);\n        if (peers.length < 1) {\n            return;\n        }\n        if (kind === peer_1.OutboundPeer) {\n            const selectedPeer = shuffle(peers.filter(peer => peer.internalState.peerKind !== constants_1.PeerKind.FIXED_PEER))[0];\n            if (selectedPeer) {\n                this.removePeer(selectedPeer.id, constants_1.EVICTED_PEER_CODE, `Evicted outbound peer ${selectedPeer.id}`);\n            }\n        }\n        if (kind === peer_1.InboundPeer) {\n            const evictionCandidates = this._selectPeersForEviction();\n            const peerToEvict = shuffle(evictionCandidates)[0];\n            if (peerToEvict) {\n                this.removePeer(peerToEvict.id, constants_1.EVICTED_PEER_CODE, `Evicted inbound peer ${peerToEvict.id}`);\n            }\n        }\n    }\n    _bindHandlersToPeer(peer) {\n        peer.on(events_2.EVENT_REQUEST_RECEIVED, this._handlePeerRPC);\n        peer.on(events_2.EVENT_MESSAGE_RECEIVED, this._handlePeerMessage);\n        peer.on(events_2.EVENT_CONNECT_OUTBOUND, this._handleOutboundPeerConnect);\n        peer.on(events_2.EVENT_CONNECT_ABORT_OUTBOUND, this._handleOutboundPeerConnectAbort);\n        peer.on(events_2.EVENT_CLOSE_OUTBOUND, this._handlePeerCloseOutbound);\n        peer.on(events_2.EVENT_CLOSE_INBOUND, this._handlePeerCloseInbound);\n        peer.on(events_2.EVENT_OUTBOUND_SOCKET_ERROR, this._handlePeerOutboundSocketError);\n        peer.on(events_2.EVENT_INBOUND_SOCKET_ERROR, this._handlePeerInboundSocketError);\n        peer.on(events_2.EVENT_UPDATED_PEER_INFO, this._handlePeerInfoUpdate);\n        peer.on(events_2.EVENT_FAILED_PEER_INFO_UPDATE, this._handleFailedPeerInfoUpdate);\n        peer.on(events_2.EVENT_FAILED_TO_FETCH_PEER_INFO, this._handleFailedToFetchPeerInfo);\n        peer.on(events_2.EVENT_FAILED_TO_FETCH_PEERS, this._handleFailedToFetchPeers);\n        peer.on(events_2.EVENT_FAILED_TO_COLLECT_PEER_DETAILS_ON_CONNECT, this._handleFailedToCollectPeerDetails);\n        peer.on(events_2.EVENT_BAN_PEER, this._handleBanPeer);\n        peer.on(events_2.EVENT_DISCOVERED_PEER, this._handleDiscoverPeer);\n    }\n    _unbindHandlersFromPeer(peer) {\n        peer.removeListener(events_2.EVENT_REQUEST_RECEIVED, this._handlePeerRPC);\n        peer.removeListener(events_2.EVENT_MESSAGE_RECEIVED, this._handlePeerMessage);\n        peer.removeListener(events_2.EVENT_CONNECT_OUTBOUND, this._handleOutboundPeerConnect);\n        peer.removeListener(events_2.EVENT_CONNECT_ABORT_OUTBOUND, this._handleOutboundPeerConnectAbort);\n        peer.removeListener(events_2.EVENT_CLOSE_OUTBOUND, this._handlePeerCloseOutbound);\n        peer.removeListener(events_2.EVENT_CLOSE_INBOUND, this._handlePeerCloseInbound);\n        peer.removeListener(events_2.EVENT_OUTBOUND_SOCKET_ERROR, this._handlePeerOutboundSocketError);\n        peer.removeListener(events_2.EVENT_INBOUND_SOCKET_ERROR, this._handlePeerInboundSocketError);\n        peer.removeListener(events_2.EVENT_UPDATED_PEER_INFO, this._handlePeerInfoUpdate);\n        peer.removeListener(events_2.EVENT_FAILED_PEER_INFO_UPDATE, this._handleFailedPeerInfoUpdate);\n        peer.removeListener(events_2.EVENT_FAILED_TO_FETCH_PEER_INFO, this._handleFailedToFetchPeerInfo);\n        peer.removeListener(events_2.EVENT_FAILED_TO_FETCH_PEERS, this._handleFailedToFetchPeers);\n        peer.removeListener(events_2.EVENT_FAILED_TO_COLLECT_PEER_DETAILS_ON_CONNECT, this._handleFailedToCollectPeerDetails);\n        peer.removeListener(events_2.EVENT_BAN_PEER, this._handleBanPeer);\n        peer.removeListener(events_2.EVENT_DISCOVERED_PEER, this._handleDiscoverPeer);\n    }\n    _addOutboundPeer(peerInfo, nodeInfo) {\n        if (this.hasPeer(peerInfo.peerId) || this._peerBook.bannedIPs.has(peerInfo.ipAddress)) {\n            return false;\n        }\n        const outboundConnectedPeer = this.getPeers(peer_1.OutboundPeer).find(p => p.ipAddress === peerInfo.ipAddress && p.ipAddress !== constants_1.DEFAULT_LOCALHOST_IP);\n        if (outboundConnectedPeer) {\n            return false;\n        }\n        const peer = new peer_1.OutboundPeer(peerInfo, {\n            ...this._peerConfig,\n            serverNodeInfo: nodeInfo,\n        });\n        this._peerMap.set(peer.id, peer);\n        this._bindHandlersToPeer(peer);\n        if (this._nodeInfo) {\n            this._applyNodeInfoOnPeer(peer);\n        }\n        return true;\n    }\n}\nexports.PeerPool = PeerPool;\n//# sourceMappingURL=peer_pool.js.map"]},"metadata":{},"sourceType":"script"}