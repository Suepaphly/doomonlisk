{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _objectWithoutProperties = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _excluded = [\"default\"],\n    _excluded2 = [\"address\"],\n    _excluded3 = [\"default\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Node = void 0;\n\nvar path = require(\"path\");\n\nvar fs = require(\"fs-extra\");\n\nvar lisk_chain_1 = require(\"@liskhq/lisk-chain\");\n\nvar lisk_bft_1 = require(\"@liskhq/lisk-bft\");\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar lisk_transaction_pool_1 = require(\"@liskhq/lisk-transaction-pool\");\n\nvar lisk_db_1 = require(\"@liskhq/lisk-db\");\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nvar lisk_codec_1 = require(\"@liskhq/lisk-codec\");\n\nvar constants_1 = require(\"../constants\");\n\nvar forger_1 = require(\"./forger\");\n\nvar transport_1 = require(\"./transport\");\n\nvar synchronizer_1 = require(\"./synchronizer\");\n\nvar processor_1 = require(\"./processor\");\n\nvar channels_1 = require(\"../controller/channels\");\n\nvar processor_2 = require(\"./processor/processor\");\n\nvar base_synchronizer_1 = require(\"./synchronizer/base_synchronizer\");\n\nvar network_1 = require(\"./network\");\n\nvar modules_1 = require(\"../modules\");\n\nvar forgeInterval = 1000;\nvar _lisk_chain_1$events = lisk_chain_1.events,\n    EVENT_NEW_BLOCK = _lisk_chain_1$events.EVENT_NEW_BLOCK,\n    EVENT_DELETE_BLOCK = _lisk_chain_1$events.EVENT_DELETE_BLOCK,\n    EVENT_VALIDATORS_CHANGED = _lisk_chain_1$events.EVENT_VALIDATORS_CHANGED;\nvar EVENT_TRANSACTION_REMOVED = lisk_transaction_pool_1.events.EVENT_TRANSACTION_REMOVED;\nvar MINIMUM_MODULE_ID = 2;\nvar compiledGenesisBlockFileName = 'genesis_block_compiled';\n\nvar Node = /*#__PURE__*/function () {\n  function Node(_ref) {\n    var options = _ref.options;\n\n    _classCallCheck(this, Node);\n\n    this._registeredModules = [];\n    this._registeredAccountSchemas = {};\n    this._options = options;\n\n    if (this._options.forging.waitThreshold >= this._options.genesisConfig.blockTime) {\n      throw Error(\"forging.waitThreshold=\".concat(this._options.forging.waitThreshold, \" is greater or equal to genesisConfig.blockTime=\").concat(this._options.genesisConfig.blockTime, \". It impacts the forging and propagation of blocks. Please use a smaller value for forging.waitThreshold\"));\n    }\n  }\n\n  _createClass(Node, [{\n    key: \"getSchema\",\n    value: function getSchema() {\n      var transactionsAssets = [];\n\n      var _iterator = _createForOfIteratorHelper(this._registeredModules),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var customModule = _step.value;\n\n          var _iterator2 = _createForOfIteratorHelper(customModule.transactionAssets),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var customAsset = _step2.value;\n              transactionsAssets.push({\n                moduleID: customModule.id,\n                moduleName: customModule.name,\n                assetID: customAsset.id,\n                assetName: customAsset.name,\n                schema: customAsset.schema\n              });\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _lisk_chain_1$getAcco = lisk_chain_1.getAccountSchemaWithDefault(this._registeredAccountSchemas),\n          defaultAccount = _lisk_chain_1$getAcco.default,\n          accountSchema = _objectWithoutProperties(_lisk_chain_1$getAcco, _excluded);\n\n      var blockHeadersAssets = lisk_chain_1.getRegisteredBlockAssetSchema(accountSchema);\n      return {\n        account: accountSchema,\n        block: lisk_chain_1.blockSchema,\n        blockHeader: lisk_chain_1.blockHeaderSchema,\n        blockHeadersAssets: blockHeadersAssets,\n        transaction: lisk_chain_1.transactionSchema,\n        transactionsAssets: transactionsAssets\n      };\n    }\n  }, {\n    key: \"getDefaultAccount\",\n    value: function getDefaultAccount() {\n      var _lisk_chain_1$getAcco2 = lisk_chain_1.getAccountSchemaWithDefault(this._registeredAccountSchemas),\n          defaultAccount = _lisk_chain_1$getAcco2.default;\n\n      return defaultAccount;\n    }\n  }, {\n    key: \"getRegisteredModules\",\n    value: function getRegisteredModules() {\n      return this._registeredModules.reduce(function (prev, current) {\n        var assets = current.transactionAssets.map(function (asset) {\n          return {\n            id: asset.id,\n            name: asset.name\n          };\n        });\n        prev.push({\n          id: current.id,\n          name: current.name,\n          actions: Object.keys(current.actions).map(function (key) {\n            return \"\".concat(current.name, \":\").concat(key);\n          }),\n          events: current.events.map(function (key) {\n            return \"\".concat(current.name, \":\").concat(key);\n          }),\n          reducers: Object.keys(current.reducers).map(function (key) {\n            return \"\".concat(current.name, \":\").concat(key);\n          }),\n          transactionAssets: assets\n        });\n        return prev;\n      }, []);\n    }\n  }, {\n    key: \"registerModule\",\n    value: function registerModule(customModule) {\n      var exist = this._registeredModules.find(function (rm) {\n        return rm.id === customModule.id;\n      });\n\n      if (exist) {\n        throw new Error(\"Custom module with id \".concat(customModule.id, \" already exists.\"));\n      }\n\n      if (!customModule.name || !customModule.id) {\n        throw new Error(\"Custom module '\".concat(customModule.constructor.name, \"' is missing either one or both of the required properties: 'id', 'name'.\"));\n      }\n\n      if (customModule.id < MINIMUM_MODULE_ID) {\n        throw new Error(\"Custom module must have id greater than \".concat(MINIMUM_MODULE_ID, \".\"));\n      }\n\n      if (customModule.accountSchema) {\n        this._registeredAccountSchemas[customModule.name] = _objectSpread(_objectSpread({}, customModule.accountSchema), {}, {\n          fieldNumber: customModule.id\n        });\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(customModule.transactionAssets),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var asset = _step3.value;\n\n          if (!(asset instanceof modules_1.BaseAsset)) {\n            throw new Error('Custom module contains asset which does not extend `BaseAsset` class.');\n          }\n\n          if (typeof asset.name !== 'string' || asset.name === '') {\n            throw new Error('Custom module contains asset with invalid `name` property.');\n          }\n\n          if (typeof asset.id !== 'number') {\n            throw new Error('Custom module contains asset with invalid `id` property.');\n          }\n\n          if (typeof asset.schema !== 'object') {\n            throw new Error('Custom module contains asset with invalid `schema` property.');\n          }\n\n          if (typeof asset.apply !== 'function') {\n            throw new Error('Custom module contains asset with invalid `apply` property.');\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this._registeredModules.push(customModule);\n    }\n  }, {\n    key: \"init\",\n    value: function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref2) {\n        var _this = this;\n\n        var genesisBlockJSON, configPath, bus, channel, blockchainDB, forgerDB, logger, nodeDB, _a, genesisBlock, _iterator4, _step4, _loop;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                genesisBlockJSON = _ref2.genesisBlockJSON, configPath = _ref2.dataPath, bus = _ref2.bus, channel = _ref2.channel, blockchainDB = _ref2.blockchainDB, forgerDB = _ref2.forgerDB, logger = _ref2.logger, nodeDB = _ref2.nodeDB;\n                this._channel = channel;\n                this._logger = logger;\n                this._blockchainDB = blockchainDB;\n                this._forgerDB = forgerDB;\n                this._nodeDB = nodeDB;\n                this._bus = bus;\n                genesisBlock = this._readGenesisBlock(genesisBlockJSON, configPath);\n                this._networkIdentifier = lisk_cryptography_1.getNetworkIdentifier(genesisBlock.header.id, this._options.genesisConfig.communityIdentifier);\n\n                this._initModules(genesisBlock);\n\n                _iterator4 = _createForOfIteratorHelper(this._registeredModules);\n                _context10.prev = 11;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var customModule, customModuleChannel;\n                  return _regeneratorRuntime.wrap(function _loop$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          customModule = _step4.value;\n\n                          _this._processor.register(customModule);\n\n                          customModuleChannel = new channels_1.InMemoryChannel(customModule.name, customModule.events, customModule.actions);\n                          _context9.next = 5;\n                          return customModuleChannel.registerToBus(_this._bus);\n\n                        case 5:\n                          customModule.init({\n                            channel: {\n                              publish: function publish(name, data) {\n                                return customModuleChannel.publish(name, data);\n                              }\n                            },\n                            dataAccess: {\n                              getChainState: function () {\n                                var _getChainState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key) {\n                                  return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                                    while (1) {\n                                      switch (_context6.prev = _context6.next) {\n                                        case 0:\n                                          return _context6.abrupt(\"return\", _this._chain.dataAccess.getChainState(key));\n\n                                        case 1:\n                                        case \"end\":\n                                          return _context6.stop();\n                                      }\n                                    }\n                                  }, _callee6);\n                                }));\n\n                                function getChainState(_x6) {\n                                  return _getChainState.apply(this, arguments);\n                                }\n\n                                return getChainState;\n                              }(),\n                              getAccountByAddress: function () {\n                                var _getAccountByAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(address) {\n                                  return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n                                    while (1) {\n                                      switch (_context7.prev = _context7.next) {\n                                        case 0:\n                                          return _context7.abrupt(\"return\", _this._chain.dataAccess.getAccountByAddress(address));\n\n                                        case 1:\n                                        case \"end\":\n                                          return _context7.stop();\n                                      }\n                                    }\n                                  }, _callee7);\n                                }));\n\n                                function getAccountByAddress(_x7) {\n                                  return _getAccountByAddress.apply(this, arguments);\n                                }\n\n                                return getAccountByAddress;\n                              }(),\n                              getLastBlockHeader: function () {\n                                var _getLastBlockHeader = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n                                  return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n                                    while (1) {\n                                      switch (_context8.prev = _context8.next) {\n                                        case 0:\n                                          return _context8.abrupt(\"return\", _this._chain.dataAccess.getLastBlockHeader());\n\n                                        case 1:\n                                        case \"end\":\n                                          return _context8.stop();\n                                      }\n                                    }\n                                  }, _callee8);\n                                }));\n\n                                function getLastBlockHeader() {\n                                  return _getLastBlockHeader.apply(this, arguments);\n                                }\n\n                                return getLastBlockHeader;\n                              }()\n                            },\n                            logger: _this._logger\n                          });\n\n                        case 6:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n\n                _iterator4.s();\n\n              case 14:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context10.next = 18;\n                  break;\n                }\n\n                return _context10.delegateYield(_loop(), \"t0\", 16);\n\n              case 16:\n                _context10.next = 14;\n                break;\n\n              case 18:\n                _context10.next = 23;\n                break;\n\n              case 20:\n                _context10.prev = 20;\n                _context10.t1 = _context10[\"catch\"](11);\n\n                _iterator4.e(_context10.t1);\n\n              case 23:\n                _context10.prev = 23;\n\n                _iterator4.f();\n\n                return _context10.finish(23);\n\n              case 26:\n                this._networkModule.registerEndpoint('getTransactions', /*#__PURE__*/function () {\n                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref3) {\n                    var data, peerId;\n                    return _regeneratorRuntime.wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            data = _ref3.data, peerId = _ref3.peerId;\n                            return _context.abrupt(\"return\", _this._transport.handleRPCGetTransactions(data, peerId));\n\n                          case 2:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function (_x2) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }());\n\n                this._networkModule.registerEndpoint('getLastBlock', function (_ref5) {\n                  var peerId = _ref5.peerId;\n                  return _this._transport.handleRPCGetLastBlock(peerId);\n                });\n\n                this._networkModule.registerEndpoint('getBlocksFromId', /*#__PURE__*/function () {\n                  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref6) {\n                    var data, peerId;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            data = _ref6.data, peerId = _ref6.peerId;\n                            return _context2.abrupt(\"return\", _this._transport.handleRPCGetBlocksFromId(data, peerId));\n\n                          case 2:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function (_x3) {\n                    return _ref7.apply(this, arguments);\n                  };\n                }());\n\n                this._networkModule.registerEndpoint('getHighestCommonBlock', /*#__PURE__*/function () {\n                  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref8) {\n                    var data, peerId;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            data = _ref8.data, peerId = _ref8.peerId;\n                            return _context3.abrupt(\"return\", _this._transport.handleRPCGetHighestCommonBlockID(data, peerId));\n\n                          case 2:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function (_x4) {\n                    return _ref9.apply(this, arguments);\n                  };\n                }());\n\n                _context10.next = 32;\n                return this._networkModule.bootstrap(this.networkIdentifier);\n\n              case 32:\n                this._subscribeToEvents();\n\n                _context10.next = 35;\n                return this._processor.init(genesisBlock);\n\n              case 35:\n                _context10.next = 37;\n                return this._synchronizer.init();\n\n              case 37:\n                this._networkModule.applyNodeInfo({\n                  height: this._chain.lastBlock.header.height,\n                  lastBlockID: this._chain.lastBlock.header.id,\n                  maxHeightPrevoted: (_a = this._chain.lastBlock.header.asset.maxHeightPrevoted) !== null && _a !== void 0 ? _a : 0,\n                  blockVersion: this._chain.lastBlock.header.version\n                });\n\n                _context10.next = 40;\n                return this._transactionPool.start();\n\n              case 40:\n                _context10.next = 42;\n                return this._startForging();\n\n              case 42:\n                this._logger.info('Node ready and launched');\n\n                this._networkModule.events.on(constants_1.APP_EVENT_NETWORK_READY, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return _this._startLoader();\n\n                        case 2:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                })));\n\n                this._networkModule.events.on(constants_1.APP_EVENT_NETWORK_EVENT, /*#__PURE__*/function () {\n                  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(eventData) {\n                    var event, data, peerId;\n                    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            event = eventData.event, data = eventData.data, peerId = eventData.peerId;\n                            _context5.prev = 1;\n\n                            if (!(event === 'postTransactionsAnnouncement')) {\n                              _context5.next = 6;\n                              break;\n                            }\n\n                            _context5.next = 5;\n                            return _this._transport.handleEventPostTransactionsAnnouncement(data, peerId);\n\n                          case 5:\n                            return _context5.abrupt(\"return\");\n\n                          case 6:\n                            if (!(event === 'postBlock')) {\n                              _context5.next = 10;\n                              break;\n                            }\n\n                            _context5.next = 9;\n                            return _this._transport.handleEventPostBlock(data, peerId);\n\n                          case 9:\n                            return _context5.abrupt(\"return\");\n\n                          case 10:\n                            _context5.next = 15;\n                            break;\n\n                          case 12:\n                            _context5.prev = 12;\n                            _context5.t0 = _context5[\"catch\"](1);\n\n                            _this._logger.warn({\n                              err: _context5.t0,\n                              event: event\n                            }, 'Received invalid event message');\n\n                          case 15:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5, null, [[1, 12]]);\n                  }));\n\n                  return function (_x5) {\n                    return _ref11.apply(this, arguments);\n                  };\n                }());\n\n              case 45:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee9, this, [[11, 20, 23, 26]]);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n  }, {\n    key: \"networkIdentifier\",\n    get: function get() {\n      return this._networkIdentifier;\n    }\n  }, {\n    key: \"actions\",\n    get: function get() {\n      var _this2 = this;\n\n      return {\n        getValidators: function () {\n          var _getValidators = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n            var validators, slot, startTime, nextForgingTime, slotInRound, blockTime, forgersInfo, i, validator;\n            return _regeneratorRuntime.wrap(function _callee10$(_context11) {\n              while (1) {\n                switch (_context11.prev = _context11.next) {\n                  case 0:\n                    _context11.next = 2;\n                    return _this2._chain.getValidators();\n\n                  case 2:\n                    validators = _context11.sent;\n                    slot = _this2._chain.slots.getSlotNumber();\n                    startTime = _this2._chain.slots.getSlotTime(slot);\n                    nextForgingTime = startTime;\n                    slotInRound = slot % _this2._chain.numberOfValidators;\n                    blockTime = _this2._chain.slots.blockTime();\n                    forgersInfo = [];\n\n                    for (i = slotInRound; i < slotInRound + _this2._chain.numberOfValidators; i += 1) {\n                      validator = validators[i % validators.length];\n                      forgersInfo.push(_objectSpread(_objectSpread({}, validator), {}, {\n                        address: validator.address.toString('hex'),\n                        nextForgingTime: nextForgingTime\n                      }));\n                      nextForgingTime += blockTime;\n                    }\n\n                    return _context11.abrupt(\"return\", forgersInfo);\n\n                  case 11:\n                  case \"end\":\n                    return _context11.stop();\n                }\n              }\n            }, _callee10);\n          }));\n\n          function getValidators() {\n            return _getValidators.apply(this, arguments);\n          }\n\n          return getValidators;\n        }(),\n        updateForgingStatus: function () {\n          var _updateForgingStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(params) {\n            var result;\n            return _regeneratorRuntime.wrap(function _callee11$(_context12) {\n              while (1) {\n                switch (_context12.prev = _context12.next) {\n                  case 0:\n                    _context12.next = 2;\n                    return _this2._forger.updateForgingStatus(Buffer.from(params.address, 'hex'), params.password, params.forging, params.height, params.maxHeightPreviouslyForged, params.maxHeightPrevoted, params.overwrite);\n\n                  case 2:\n                    result = _context12.sent;\n                    return _context12.abrupt(\"return\", {\n                      address: result.address.toString('hex'),\n                      forging: result.forging\n                    });\n\n                  case 4:\n                  case \"end\":\n                    return _context12.stop();\n                }\n              }\n            }, _callee11);\n          }));\n\n          function updateForgingStatus(_x8) {\n            return _updateForgingStatus.apply(this, arguments);\n          }\n\n          return updateForgingStatus;\n        }(),\n        getAccount: function () {\n          var _getAccount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(params) {\n            var account;\n            return _regeneratorRuntime.wrap(function _callee12$(_context13) {\n              while (1) {\n                switch (_context13.prev = _context13.next) {\n                  case 0:\n                    _context13.next = 2;\n                    return _this2._chain.dataAccess.getAccountByAddress(Buffer.from(params.address, 'hex'));\n\n                  case 2:\n                    account = _context13.sent;\n                    return _context13.abrupt(\"return\", _this2._chain.dataAccess.encodeAccount(account).toString('hex'));\n\n                  case 4:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }\n            }, _callee12);\n          }));\n\n          function getAccount(_x9) {\n            return _getAccount.apply(this, arguments);\n          }\n\n          return getAccount;\n        }(),\n        getAccounts: function () {\n          var _getAccounts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(params) {\n            var accounts;\n            return _regeneratorRuntime.wrap(function _callee13$(_context14) {\n              while (1) {\n                switch (_context14.prev = _context14.next) {\n                  case 0:\n                    _context14.next = 2;\n                    return _this2._chain.dataAccess.getAccountsByAddress(params.address.map(function (address) {\n                      return Buffer.from(address, 'hex');\n                    }));\n\n                  case 2:\n                    accounts = _context14.sent;\n                    return _context14.abrupt(\"return\", accounts.map(function (account) {\n                      return _this2._chain.dataAccess.encodeAccount(account).toString('hex');\n                    }));\n\n                  case 4:\n                  case \"end\":\n                    return _context14.stop();\n                }\n              }\n            }, _callee13);\n          }));\n\n          function getAccounts(_x10) {\n            return _getAccounts.apply(this, arguments);\n          }\n\n          return getAccounts;\n        }(),\n        getBlockByID: function () {\n          var _getBlockByID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(params) {\n            var block;\n            return _regeneratorRuntime.wrap(function _callee14$(_context15) {\n              while (1) {\n                switch (_context15.prev = _context15.next) {\n                  case 0:\n                    _context15.next = 2;\n                    return _this2._chain.dataAccess.getBlockByID(Buffer.from(params.id, 'hex'));\n\n                  case 2:\n                    block = _context15.sent;\n                    return _context15.abrupt(\"return\", _this2._chain.dataAccess.encode(block).toString('hex'));\n\n                  case 4:\n                  case \"end\":\n                    return _context15.stop();\n                }\n              }\n            }, _callee14);\n          }));\n\n          function getBlockByID(_x11) {\n            return _getBlockByID.apply(this, arguments);\n          }\n\n          return getBlockByID;\n        }(),\n        getBlocksByIDs: function () {\n          var _getBlocksByIDs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(params) {\n            var blocks, _iterator5, _step5, id, block;\n\n            return _regeneratorRuntime.wrap(function _callee15$(_context16) {\n              while (1) {\n                switch (_context16.prev = _context16.next) {\n                  case 0:\n                    blocks = [];\n                    _context16.prev = 1;\n                    _iterator5 = _createForOfIteratorHelper(params.ids);\n                    _context16.prev = 3;\n\n                    _iterator5.s();\n\n                  case 5:\n                    if ((_step5 = _iterator5.n()).done) {\n                      _context16.next = 13;\n                      break;\n                    }\n\n                    id = _step5.value;\n                    _context16.next = 9;\n                    return _this2._chain.dataAccess.getBlockByID(Buffer.from(id, 'hex'));\n\n                  case 9:\n                    block = _context16.sent;\n                    blocks.push(block);\n\n                  case 11:\n                    _context16.next = 5;\n                    break;\n\n                  case 13:\n                    _context16.next = 18;\n                    break;\n\n                  case 15:\n                    _context16.prev = 15;\n                    _context16.t0 = _context16[\"catch\"](3);\n\n                    _iterator5.e(_context16.t0);\n\n                  case 18:\n                    _context16.prev = 18;\n\n                    _iterator5.f();\n\n                    return _context16.finish(18);\n\n                  case 21:\n                    _context16.next = 27;\n                    break;\n\n                  case 23:\n                    _context16.prev = 23;\n                    _context16.t1 = _context16[\"catch\"](1);\n\n                    if (_context16.t1 instanceof lisk_db_1.NotFoundError) {\n                      _context16.next = 27;\n                      break;\n                    }\n\n                    throw _context16.t1;\n\n                  case 27:\n                    return _context16.abrupt(\"return\", blocks.map(function (block) {\n                      return _this2._chain.dataAccess.encode(block).toString('hex');\n                    }));\n\n                  case 28:\n                  case \"end\":\n                    return _context16.stop();\n                }\n              }\n            }, _callee15, null, [[1, 23], [3, 15, 18, 21]]);\n          }));\n\n          function getBlocksByIDs(_x12) {\n            return _getBlocksByIDs.apply(this, arguments);\n          }\n\n          return getBlocksByIDs;\n        }(),\n        getBlockByHeight: function () {\n          var _getBlockByHeight = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(params) {\n            var block;\n            return _regeneratorRuntime.wrap(function _callee16$(_context17) {\n              while (1) {\n                switch (_context17.prev = _context17.next) {\n                  case 0:\n                    _context17.next = 2;\n                    return _this2._chain.dataAccess.getBlockByHeight(params.height);\n\n                  case 2:\n                    block = _context17.sent;\n                    return _context17.abrupt(\"return\", _this2._chain.dataAccess.encode(block).toString('hex'));\n\n                  case 4:\n                  case \"end\":\n                    return _context17.stop();\n                }\n              }\n            }, _callee16);\n          }));\n\n          function getBlockByHeight(_x13) {\n            return _getBlockByHeight.apply(this, arguments);\n          }\n\n          return getBlockByHeight;\n        }(),\n        getBlocksByHeightBetween: function () {\n          var _getBlocksByHeightBetween = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(params) {\n            var blocks;\n            return _regeneratorRuntime.wrap(function _callee17$(_context18) {\n              while (1) {\n                switch (_context18.prev = _context18.next) {\n                  case 0:\n                    _context18.next = 2;\n                    return _this2._chain.dataAccess.getBlocksByHeightBetween(params.from, params.to);\n\n                  case 2:\n                    blocks = _context18.sent;\n                    return _context18.abrupt(\"return\", blocks.map(function (b) {\n                      return _this2._chain.dataAccess.encode(b).toString('hex');\n                    }));\n\n                  case 4:\n                  case \"end\":\n                    return _context18.stop();\n                }\n              }\n            }, _callee17);\n          }));\n\n          function getBlocksByHeightBetween(_x14) {\n            return _getBlocksByHeightBetween.apply(this, arguments);\n          }\n\n          return getBlocksByHeightBetween;\n        }(),\n        getTransactionByID: function () {\n          var _getTransactionByID = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(params) {\n            var transaction;\n            return _regeneratorRuntime.wrap(function _callee18$(_context19) {\n              while (1) {\n                switch (_context19.prev = _context19.next) {\n                  case 0:\n                    _context19.next = 2;\n                    return _this2._chain.dataAccess.getTransactionByID(Buffer.from(params.id, 'hex'));\n\n                  case 2:\n                    transaction = _context19.sent;\n                    return _context19.abrupt(\"return\", transaction.getBytes().toString('hex'));\n\n                  case 4:\n                  case \"end\":\n                    return _context19.stop();\n                }\n              }\n            }, _callee18);\n          }));\n\n          function getTransactionByID(_x15) {\n            return _getTransactionByID.apply(this, arguments);\n          }\n\n          return getTransactionByID;\n        }(),\n        getTransactionsByIDs: function () {\n          var _getTransactionsByIDs = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(params) {\n            var transactions, _iterator6, _step6, id, transaction;\n\n            return _regeneratorRuntime.wrap(function _callee19$(_context20) {\n              while (1) {\n                switch (_context20.prev = _context20.next) {\n                  case 0:\n                    transactions = [];\n                    _context20.prev = 1;\n                    _iterator6 = _createForOfIteratorHelper(params.ids);\n                    _context20.prev = 3;\n\n                    _iterator6.s();\n\n                  case 5:\n                    if ((_step6 = _iterator6.n()).done) {\n                      _context20.next = 13;\n                      break;\n                    }\n\n                    id = _step6.value;\n                    _context20.next = 9;\n                    return _this2._chain.dataAccess.getTransactionByID(Buffer.from(id, 'hex'));\n\n                  case 9:\n                    transaction = _context20.sent;\n                    transactions.push(transaction);\n\n                  case 11:\n                    _context20.next = 5;\n                    break;\n\n                  case 13:\n                    _context20.next = 18;\n                    break;\n\n                  case 15:\n                    _context20.prev = 15;\n                    _context20.t0 = _context20[\"catch\"](3);\n\n                    _iterator6.e(_context20.t0);\n\n                  case 18:\n                    _context20.prev = 18;\n\n                    _iterator6.f();\n\n                    return _context20.finish(18);\n\n                  case 21:\n                    _context20.next = 27;\n                    break;\n\n                  case 23:\n                    _context20.prev = 23;\n                    _context20.t1 = _context20[\"catch\"](1);\n\n                    if (_context20.t1 instanceof lisk_db_1.NotFoundError) {\n                      _context20.next = 27;\n                      break;\n                    }\n\n                    throw _context20.t1;\n\n                  case 27:\n                    return _context20.abrupt(\"return\", transactions.map(function (tx) {\n                      return tx.getBytes().toString('hex');\n                    }));\n\n                  case 28:\n                  case \"end\":\n                    return _context20.stop();\n                }\n              }\n            }, _callee19, null, [[1, 23], [3, 15, 18, 21]]);\n          }));\n\n          function getTransactionsByIDs(_x16) {\n            return _getTransactionsByIDs.apply(this, arguments);\n          }\n\n          return getTransactionsByIDs;\n        }(),\n        getForgingStatus: function () {\n          var _getForgingStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n            var forgingStatus;\n            return _regeneratorRuntime.wrap(function _callee20$(_context21) {\n              while (1) {\n                switch (_context21.prev = _context21.next) {\n                  case 0:\n                    _context21.next = 2;\n                    return _this2._forger.getForgingStatusOfAllDelegates();\n\n                  case 2:\n                    forgingStatus = _context21.sent;\n\n                    if (!forgingStatus) {\n                      _context21.next = 5;\n                      break;\n                    }\n\n                    return _context21.abrupt(\"return\", forgingStatus.map(function (_ref12) {\n                      var address = _ref12.address,\n                          forgingStatusWithoutAddress = _objectWithoutProperties(_ref12, _excluded2);\n\n                      return _objectSpread({\n                        address: address.toString('hex')\n                      }, forgingStatusWithoutAddress);\n                    }));\n\n                  case 5:\n                    return _context21.abrupt(\"return\", undefined);\n\n                  case 6:\n                  case \"end\":\n                    return _context21.stop();\n                }\n              }\n            }, _callee20);\n          }));\n\n          function getForgingStatus() {\n            return _getForgingStatus.apply(this, arguments);\n          }\n\n          return getForgingStatus;\n        }(),\n        getTransactionsFromPool: function getTransactionsFromPool() {\n          return _this2._transactionPool.getAll().map(function (tx) {\n            return tx.getBytes().toString('hex');\n          });\n        },\n        postTransaction: function () {\n          var _postTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(params) {\n            return _regeneratorRuntime.wrap(function _callee21$(_context22) {\n              while (1) {\n                switch (_context22.prev = _context22.next) {\n                  case 0:\n                    return _context22.abrupt(\"return\", _this2._transport.handleEventPostTransaction(params));\n\n                  case 1:\n                  case \"end\":\n                    return _context22.stop();\n                }\n              }\n            }, _callee21);\n          }));\n\n          function postTransaction(_x17) {\n            return _postTransaction.apply(this, arguments);\n          }\n\n          return postTransaction;\n        }(),\n        getLastBlock: function getLastBlock() {\n          return _this2._chain.dataAccess.encode(_this2._chain.lastBlock).toString('hex');\n        },\n        getSchema: function getSchema() {\n          return _this2.getSchema();\n        },\n        getRegisteredModules: function getRegisteredModules() {\n          return _this2.getRegisteredModules();\n        },\n        getNodeInfo: function getNodeInfo() {\n          return {\n            version: _this2._options.version,\n            networkVersion: _this2._options.networkVersion,\n            networkIdentifier: _this2._networkIdentifier.toString('hex'),\n            lastBlockID: _this2._chain.lastBlock.header.id.toString('hex'),\n            height: _this2._chain.lastBlock.header.height,\n            genesisHeight: _this2._chain.genesisHeight,\n            finalizedHeight: _this2._bft.finalityManager.finalizedHeight,\n            syncing: _this2._synchronizer.isActive,\n            unconfirmedTransactions: _this2._transactionPool.getAll().length,\n            genesisConfig: _objectSpread({}, _this2._options.genesisConfig),\n            registeredModules: _this2.getRegisteredModules(),\n            network: {\n              port: _this2._options.network.port,\n              hostIp: _this2._options.network.hostIp,\n              seedPeers: _this2._options.network.seedPeers,\n              blacklistedIPs: _this2._options.network.blacklistedIPs,\n              fixedPeers: _this2._options.network.fixedPeers,\n              whitelistedPeers: _this2._options.network.whitelistedPeers\n            }\n          };\n        },\n        getConnectedPeers: function getConnectedPeers() {\n          return _this2._networkModule.getConnectedPeers();\n        },\n        getDisconnectedPeers: function getDisconnectedPeers() {\n          return _this2._networkModule.getDisconnectedPeers();\n        },\n        getNetworkStats: function getNetworkStats() {\n          return _this2._networkModule.getNetworkStats();\n        }\n      };\n    }\n  }, {\n    key: \"cleanup\",\n    value: function () {\n      var _cleanup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n        return _regeneratorRuntime.wrap(function _callee22$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                this._logger.info('Node cleanup started');\n\n                this._transactionPool.stop();\n\n                this._unsubscribeToEvents();\n\n                if (this._forgingJob) {\n                  this._forgingJob.stop();\n                }\n\n                _context23.next = 6;\n                return this._synchronizer.stop();\n\n              case 6:\n                _context23.next = 8;\n                return this._processor.stop();\n\n              case 8:\n                this._logger.info('Node cleanup completed');\n\n                _context23.next = 11;\n                return this._networkModule.cleanup();\n\n              case 11:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function cleanup() {\n        return _cleanup.apply(this, arguments);\n      }\n\n      return cleanup;\n    }()\n  }, {\n    key: \"_initModules\",\n    value: function _initModules(genesisBlock) {\n      var _this3 = this;\n\n      this._networkModule = new network_1.Network({\n        networkVersion: this._options.networkVersion,\n        options: this._options.network,\n        logger: this._logger,\n        channel: this._channel,\n        nodeDB: this._nodeDB\n      });\n      this._chain = new lisk_chain_1.Chain({\n        db: this._blockchainDB,\n        genesisBlock: genesisBlock,\n        networkIdentifier: this._networkIdentifier,\n        maxPayloadLength: this._options.genesisConfig.maxPayloadLength,\n        rewardDistance: this._options.genesisConfig.rewards.distance,\n        rewardOffset: this._options.genesisConfig.rewards.offset,\n        rewardMilestones: this._options.genesisConfig.rewards.milestones.map(function (s) {\n          return BigInt(s);\n        }),\n        blockTime: this._options.genesisConfig.blockTime,\n        accountSchemas: this._registeredAccountSchemas,\n        minFeePerByte: this._options.genesisConfig.minFeePerByte,\n        baseFees: this._options.genesisConfig.baseFees\n      });\n      this._bft = new lisk_bft_1.BFT({\n        chain: this._chain,\n        threshold: this._options.genesisConfig.bftThreshold,\n        genesisHeight: genesisBlock.header.height\n      });\n      this._processor = new processor_1.Processor({\n        channel: this._channel,\n        logger: this._logger,\n        chainModule: this._chain,\n        bftModule: this._bft\n      });\n      this._transactionPool = new lisk_transaction_pool_1.TransactionPool(_objectSpread(_objectSpread({\n        baseFees: this._options.genesisConfig.baseFees.map(function (fees) {\n          return _objectSpread(_objectSpread({}, fees), {}, {\n            baseFee: BigInt(fees.baseFee)\n          });\n        }),\n        minFeePerByte: this._options.genesisConfig.minFeePerByte,\n        applyTransactions: function () {\n          var _applyTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(transactions) {\n            var stateStore;\n            return _regeneratorRuntime.wrap(function _callee23$(_context24) {\n              while (1) {\n                switch (_context24.prev = _context24.next) {\n                  case 0:\n                    _context24.next = 2;\n                    return _this3._chain.newStateStore();\n\n                  case 2:\n                    stateStore = _context24.sent;\n                    return _context24.abrupt(\"return\", _this3._processor.verifyTransactions(transactions, stateStore));\n\n                  case 4:\n                  case \"end\":\n                    return _context24.stop();\n                }\n              }\n            }, _callee23);\n          }));\n\n          function applyTransactions(_x18) {\n            return _applyTransactions.apply(this, arguments);\n          }\n\n          return applyTransactions;\n        }()\n      }, this._options.transactionPool), {}, {\n        minEntranceFeePriority: BigInt(this._options.transactionPool.minEntranceFeePriority),\n        minReplacementFeeDifference: BigInt(this._options.transactionPool.minReplacementFeeDifference)\n      }));\n      var blockSyncMechanism = new synchronizer_1.BlockSynchronizationMechanism({\n        logger: this._logger,\n        bft: this._bft,\n        channel: this._channel,\n        chain: this._chain,\n        processorModule: this._processor,\n        networkModule: this._networkModule\n      });\n      var fastChainSwitchMechanism = new synchronizer_1.FastChainSwitchingMechanism({\n        logger: this._logger,\n        channel: this._channel,\n        chain: this._chain,\n        bft: this._bft,\n        processor: this._processor,\n        networkModule: this._networkModule\n      });\n      this._synchronizer = new synchronizer_1.Synchronizer({\n        channel: this._channel,\n        logger: this._logger,\n        chainModule: this._chain,\n        bftModule: this._bft,\n        processorModule: this._processor,\n        transactionPoolModule: this._transactionPool,\n        mechanisms: [blockSyncMechanism, fastChainSwitchMechanism],\n        networkModule: this._networkModule\n      });\n      blockSyncMechanism.events.on(base_synchronizer_1.EVENT_SYNCHRONIZER_SYNC_REQUIRED, function (_ref13) {\n        var block = _ref13.block,\n            peerId = _ref13.peerId;\n\n        _this3._synchronizer.run(block, peerId).catch(function (err) {\n          _this3._logger.error({\n            err: err\n          }, 'Error occurred during synchronization.');\n        });\n      });\n      fastChainSwitchMechanism.events.on(base_synchronizer_1.EVENT_SYNCHRONIZER_SYNC_REQUIRED, function (_ref14) {\n        var block = _ref14.block,\n            peerId = _ref14.peerId;\n\n        _this3._synchronizer.run(block, peerId).catch(function (err) {\n          _this3._logger.error({\n            err: err\n          }, 'Error occurred during synchronization.');\n        });\n      });\n      this._forger = new forger_1.Forger({\n        logger: this._logger,\n        db: this._forgerDB,\n        bftModule: this._bft,\n        transactionPoolModule: this._transactionPool,\n        processorModule: this._processor,\n        chainModule: this._chain,\n        forgingDelegates: this._options.forging.delegates.map(function (delegate) {\n          return _objectSpread(_objectSpread({}, delegate), {}, {\n            address: Buffer.from(delegate.address, 'hex'),\n            hashOnion: _objectSpread(_objectSpread({}, delegate.hashOnion), {}, {\n              hashes: delegate.hashOnion.hashes.map(function (h) {\n                return Buffer.from(h, 'hex');\n              })\n            })\n          });\n        }),\n        forgingForce: this._options.forging.force,\n        forgingDefaultPassword: this._options.forging.defaultPassword,\n        forgingWaitThreshold: this._options.forging.waitThreshold\n      });\n      this._transport = new transport_1.Transport({\n        channel: this._channel,\n        logger: this._logger,\n        synchronizer: this._synchronizer,\n        transactionPoolModule: this._transactionPool,\n        processorModule: this._processor,\n        chainModule: this._chain,\n        networkModule: this._networkModule\n      });\n    }\n  }, {\n    key: \"_startLoader\",\n    value: function () {\n      var _startLoader2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n        return _regeneratorRuntime.wrap(function _callee24$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                return _context25.abrupt(\"return\", this._synchronizer.loadUnconfirmedTransactions());\n\n              case 1:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function _startLoader() {\n        return _startLoader2.apply(this, arguments);\n      }\n\n      return _startLoader;\n    }()\n  }, {\n    key: \"_forgingTask\",\n    value: function () {\n      var _forgingTask2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {\n        return _regeneratorRuntime.wrap(function _callee25$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.prev = 0;\n\n                if (this._forger.delegatesEnabled()) {\n                  _context26.next = 4;\n                  break;\n                }\n\n                this._logger.trace('No delegates are enabled');\n\n                return _context26.abrupt(\"return\");\n\n              case 4:\n                if (!this._synchronizer.isActive) {\n                  _context26.next = 7;\n                  break;\n                }\n\n                this._logger.debug('Client not ready to forge');\n\n                return _context26.abrupt(\"return\");\n\n              case 7:\n                _context26.next = 9;\n                return this._forger.forge();\n\n              case 9:\n                _context26.next = 14;\n                break;\n\n              case 11:\n                _context26.prev = 11;\n                _context26.t0 = _context26[\"catch\"](0);\n\n                this._logger.error({\n                  err: _context26.t0\n                });\n\n              case 14:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee25, this, [[0, 11]]);\n      }));\n\n      function _forgingTask() {\n        return _forgingTask2.apply(this, arguments);\n      }\n\n      return _forgingTask;\n    }()\n  }, {\n    key: \"_startForging\",\n    value: function () {\n      var _startForging2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n        var _this4 = this;\n\n        return _regeneratorRuntime.wrap(function _callee27$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                _context28.prev = 0;\n                _context28.next = 3;\n                return this._forger.loadDelegates();\n\n              case 3:\n                _context28.next = 8;\n                break;\n\n              case 5:\n                _context28.prev = 5;\n                _context28.t0 = _context28[\"catch\"](0);\n\n                this._logger.error({\n                  err: _context28.t0\n                }, 'Failed to load delegates for forging');\n\n              case 8:\n                this._forgingJob = new lisk_utils_1.jobHandlers.Scheduler( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {\n                  return _regeneratorRuntime.wrap(function _callee26$(_context27) {\n                    while (1) {\n                      switch (_context27.prev = _context27.next) {\n                        case 0:\n                          return _context27.abrupt(\"return\", _this4._forgingTask());\n\n                        case 1:\n                        case \"end\":\n                          return _context27.stop();\n                      }\n                    }\n                  }, _callee26);\n                })), forgeInterval);\n\n                this._forgingJob.start();\n\n              case 10:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee27, this, [[0, 5]]);\n      }));\n\n      function _startForging() {\n        return _startForging2.apply(this, arguments);\n      }\n\n      return _startForging;\n    }()\n  }, {\n    key: \"_subscribeToEvents\",\n    value: function _subscribeToEvents() {\n      var _this5 = this;\n\n      this._chain.events.on(EVENT_NEW_BLOCK, /*#__PURE__*/function () {\n        var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(eventData) {\n          var block, _iterator7, _step7, transaction;\n\n          return _regeneratorRuntime.wrap(function _callee28$(_context29) {\n            while (1) {\n              switch (_context29.prev = _context29.next) {\n                case 0:\n                  block = eventData.block;\n\n                  _this5._channel.publish(constants_1.APP_EVENT_BLOCK_NEW, {\n                    block: _this5._chain.dataAccess.encode(block).toString('hex'),\n                    accounts: eventData.accounts.map(function (acc) {\n                      return _this5._chain.dataAccess.encodeAccount(acc).toString('hex');\n                    })\n                  });\n\n                  if (block.payload.length) {\n                    _iterator7 = _createForOfIteratorHelper(block.payload);\n\n                    try {\n                      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                        transaction = _step7.value;\n\n                        _this5._transactionPool.remove(transaction);\n                      }\n                    } catch (err) {\n                      _iterator7.e(err);\n                    } finally {\n                      _iterator7.f();\n                    }\n                  }\n\n                  if (!_this5._synchronizer.isActive) {\n                    _this5._networkModule.applyNodeInfo({\n                      height: block.header.height,\n                      lastBlockID: block.header.id,\n                      maxHeightPrevoted: block.header.asset.maxHeightPrevoted,\n                      blockVersion: block.header.version\n                    });\n                  }\n\n                  _this5._logger.info({\n                    id: block.header.id,\n                    height: block.header.height,\n                    numberOfTransactions: block.payload.length\n                  }, 'New block added to the chain');\n\n                case 5:\n                case \"end\":\n                  return _context29.stop();\n              }\n            }\n          }, _callee28);\n        }));\n\n        return function (_x19) {\n          return _ref16.apply(this, arguments);\n        };\n      }());\n\n      this._chain.events.on(EVENT_DELETE_BLOCK, /*#__PURE__*/function () {\n        var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(eventData) {\n          var block, _iterator8, _step8, transaction;\n\n          return _regeneratorRuntime.wrap(function _callee29$(_context30) {\n            while (1) {\n              switch (_context30.prev = _context30.next) {\n                case 0:\n                  block = eventData.block;\n\n                  _this5._channel.publish(constants_1.APP_EVENT_BLOCK_DELETE, {\n                    block: _this5._chain.dataAccess.encode(block).toString('hex'),\n                    accounts: eventData.accounts.map(function (acc) {\n                      return _this5._chain.dataAccess.encodeAccount(acc).toString('hex');\n                    })\n                  });\n\n                  if (!block.payload.length) {\n                    _context30.next = 26;\n                    break;\n                  }\n\n                  _iterator8 = _createForOfIteratorHelper(block.payload);\n                  _context30.prev = 4;\n\n                  _iterator8.s();\n\n                case 6:\n                  if ((_step8 = _iterator8.n()).done) {\n                    _context30.next = 18;\n                    break;\n                  }\n\n                  transaction = _step8.value;\n                  _context30.prev = 8;\n                  _context30.next = 11;\n                  return _this5._transactionPool.add(transaction);\n\n                case 11:\n                  _context30.next = 16;\n                  break;\n\n                case 13:\n                  _context30.prev = 13;\n                  _context30.t0 = _context30[\"catch\"](8);\n\n                  _this5._logger.error({\n                    err: _context30.t0\n                  }, 'Failed to add transaction back to the pool');\n\n                case 16:\n                  _context30.next = 6;\n                  break;\n\n                case 18:\n                  _context30.next = 23;\n                  break;\n\n                case 20:\n                  _context30.prev = 20;\n                  _context30.t1 = _context30[\"catch\"](4);\n\n                  _iterator8.e(_context30.t1);\n\n                case 23:\n                  _context30.prev = 23;\n\n                  _iterator8.f();\n\n                  return _context30.finish(23);\n\n                case 26:\n                  _this5._logger.info({\n                    id: block.header.id,\n                    height: block.header.height\n                  }, 'Deleted a block from the chain');\n\n                case 27:\n                case \"end\":\n                  return _context30.stop();\n              }\n            }\n          }, _callee29, null, [[4, 20, 23, 26], [8, 13]]);\n        }));\n\n        return function (_x20) {\n          return _ref17.apply(this, arguments);\n        };\n      }());\n\n      this._chain.events.on(EVENT_VALIDATORS_CHANGED, function (eventData) {\n        var updatedValidatorsList = eventData.validators.map(function (aValidator) {\n          return _objectSpread(_objectSpread({}, aValidator), {}, {\n            address: aValidator.address.toString('hex')\n          });\n        });\n\n        _this5._channel.publish(constants_1.APP_EVENT_CHAIN_VALIDATORS_CHANGE, {\n          validators: updatedValidatorsList\n        });\n      });\n\n      this._processor.events.on(processor_2.EVENT_PROCESSOR_BROADCAST_BLOCK, /*#__PURE__*/function () {\n        var _ref19 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(_ref18) {\n          var block;\n          return _regeneratorRuntime.wrap(function _callee30$(_context31) {\n            while (1) {\n              switch (_context31.prev = _context31.next) {\n                case 0:\n                  block = _ref18.block;\n                  _context31.next = 3;\n                  return _this5._transport.handleBroadcastBlock(block);\n\n                case 3:\n                case \"end\":\n                  return _context31.stop();\n              }\n            }\n          }, _callee30);\n        }));\n\n        return function (_x21) {\n          return _ref19.apply(this, arguments);\n        };\n      }());\n\n      this._processor.events.on(processor_2.EVENT_PROCESSOR_SYNC_REQUIRED, function (_ref20) {\n        var block = _ref20.block,\n            peerId = _ref20.peerId;\n\n        _this5._synchronizer.run(block, peerId).catch(function (err) {\n          _this5._logger.error({\n            err: err\n          }, 'Error occurred during synchronization.');\n        });\n      });\n\n      this._transactionPool.events.on(EVENT_TRANSACTION_REMOVED, function (event) {\n        _this5._logger.debug(event, 'Transaction was removed from the pool.');\n      });\n    }\n  }, {\n    key: \"_unsubscribeToEvents\",\n    value: function _unsubscribeToEvents() {\n      this._bft.removeAllListeners(lisk_bft_1.EVENT_BFT_BLOCK_FINALIZED);\n    }\n  }, {\n    key: \"_readGenesisBlock\",\n    value: function _readGenesisBlock(genesisBlockJSON, configPath) {\n      var compiledGenesisPath = path.join(configPath, compiledGenesisBlockFileName);\n\n      var _lisk_chain_1$getAcco3 = lisk_chain_1.getAccountSchemaWithDefault(this._registeredAccountSchemas),\n          defaultAccount = _lisk_chain_1$getAcco3.default,\n          schema = _objectWithoutProperties(_lisk_chain_1$getAcco3, _excluded3);\n\n      var genesisAssetSchema = lisk_chain_1.getRegisteredBlockAssetSchema(schema)[0];\n      var compiled = fs.existsSync(compiledGenesisPath);\n\n      if (compiled) {\n        var genesisBlockBytes = fs.readFileSync(compiledGenesisPath);\n        var blockHeader = lisk_codec_1.codec.decode(lisk_chain_1.blockHeaderSchema, genesisBlockBytes);\n        var asset = lisk_codec_1.codec.decode(genesisAssetSchema, blockHeader.asset);\n        var id = lisk_cryptography_1.hash(genesisBlockBytes);\n        return {\n          header: _objectSpread(_objectSpread({}, blockHeader), {}, {\n            asset: asset,\n            id: id\n          }),\n          payload: []\n        };\n      }\n\n      var genesisBlock = lisk_chain_1.readGenesisBlockJSON(genesisBlockJSON, this._registeredAccountSchemas);\n      var assetBytes = lisk_codec_1.codec.encode(genesisAssetSchema, genesisBlock.header.asset);\n      var headerBytes = lisk_codec_1.codec.encode(lisk_chain_1.blockHeaderSchema, _objectSpread(_objectSpread({}, genesisBlock.header), {}, {\n        asset: assetBytes\n      }));\n      fs.writeFileSync(compiledGenesisPath, headerBytes);\n      return genesisBlock;\n    }\n  }]);\n\n  return Node;\n}();\n\nexports.Node = Node;","map":{"version":3,"sources":["../../src/node/node.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Node = void 0;\nconst path = require(\"path\");\nconst fs = require(\"fs-extra\");\nconst lisk_chain_1 = require(\"@liskhq/lisk-chain\");\nconst lisk_bft_1 = require(\"@liskhq/lisk-bft\");\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst lisk_transaction_pool_1 = require(\"@liskhq/lisk-transaction-pool\");\nconst lisk_db_1 = require(\"@liskhq/lisk-db\");\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nconst lisk_codec_1 = require(\"@liskhq/lisk-codec\");\nconst constants_1 = require(\"../constants\");\nconst forger_1 = require(\"./forger\");\nconst transport_1 = require(\"./transport\");\nconst synchronizer_1 = require(\"./synchronizer\");\nconst processor_1 = require(\"./processor\");\nconst channels_1 = require(\"../controller/channels\");\nconst processor_2 = require(\"./processor/processor\");\nconst base_synchronizer_1 = require(\"./synchronizer/base_synchronizer\");\nconst network_1 = require(\"./network\");\nconst modules_1 = require(\"../modules\");\nconst forgeInterval = 1000;\nconst { EVENT_NEW_BLOCK, EVENT_DELETE_BLOCK, EVENT_VALIDATORS_CHANGED } = lisk_chain_1.events;\nconst { EVENT_TRANSACTION_REMOVED } = lisk_transaction_pool_1.events;\nconst MINIMUM_MODULE_ID = 2;\nconst compiledGenesisBlockFileName = 'genesis_block_compiled';\nclass Node {\n    constructor({ options }) {\n        this._registeredModules = [];\n        this._registeredAccountSchemas = {};\n        this._options = options;\n        if (this._options.forging.waitThreshold >= this._options.genesisConfig.blockTime) {\n            throw Error(`forging.waitThreshold=${this._options.forging.waitThreshold} is greater or equal to genesisConfig.blockTime=${this._options.genesisConfig.blockTime}. It impacts the forging and propagation of blocks. Please use a smaller value for forging.waitThreshold`);\n        }\n    }\n    getSchema() {\n        const transactionsAssets = [];\n        for (const customModule of this._registeredModules) {\n            for (const customAsset of customModule.transactionAssets) {\n                transactionsAssets.push({\n                    moduleID: customModule.id,\n                    moduleName: customModule.name,\n                    assetID: customAsset.id,\n                    assetName: customAsset.name,\n                    schema: customAsset.schema,\n                });\n            }\n        }\n        const { default: defaultAccount, ...accountSchema } = lisk_chain_1.getAccountSchemaWithDefault(this._registeredAccountSchemas);\n        const blockHeadersAssets = lisk_chain_1.getRegisteredBlockAssetSchema(accountSchema);\n        return {\n            account: accountSchema,\n            block: lisk_chain_1.blockSchema,\n            blockHeader: lisk_chain_1.blockHeaderSchema,\n            blockHeadersAssets,\n            transaction: lisk_chain_1.transactionSchema,\n            transactionsAssets,\n        };\n    }\n    getDefaultAccount() {\n        const { default: defaultAccount } = lisk_chain_1.getAccountSchemaWithDefault(this._registeredAccountSchemas);\n        return defaultAccount;\n    }\n    getRegisteredModules() {\n        return this._registeredModules.reduce((prev, current) => {\n            const assets = current.transactionAssets.map(asset => ({ id: asset.id, name: asset.name }));\n            prev.push({\n                id: current.id,\n                name: current.name,\n                actions: Object.keys(current.actions).map(key => `${current.name}:${key}`),\n                events: current.events.map(key => `${current.name}:${key}`),\n                reducers: Object.keys(current.reducers).map(key => `${current.name}:${key}`),\n                transactionAssets: assets,\n            });\n            return prev;\n        }, []);\n    }\n    registerModule(customModule) {\n        const exist = this._registeredModules.find(rm => rm.id === customModule.id);\n        if (exist) {\n            throw new Error(`Custom module with id ${customModule.id} already exists.`);\n        }\n        if (!customModule.name || !customModule.id) {\n            throw new Error(`Custom module '${customModule.constructor.name}' is missing either one or both of the required properties: 'id', 'name'.`);\n        }\n        if (customModule.id < MINIMUM_MODULE_ID) {\n            throw new Error(`Custom module must have id greater than ${MINIMUM_MODULE_ID}.`);\n        }\n        if (customModule.accountSchema) {\n            this._registeredAccountSchemas[customModule.name] = {\n                ...customModule.accountSchema,\n                fieldNumber: customModule.id,\n            };\n        }\n        for (const asset of customModule.transactionAssets) {\n            if (!(asset instanceof modules_1.BaseAsset)) {\n                throw new Error('Custom module contains asset which does not extend `BaseAsset` class.');\n            }\n            if (typeof asset.name !== 'string' || asset.name === '') {\n                throw new Error('Custom module contains asset with invalid `name` property.');\n            }\n            if (typeof asset.id !== 'number') {\n                throw new Error('Custom module contains asset with invalid `id` property.');\n            }\n            if (typeof asset.schema !== 'object') {\n                throw new Error('Custom module contains asset with invalid `schema` property.');\n            }\n            if (typeof asset.apply !== 'function') {\n                throw new Error('Custom module contains asset with invalid `apply` property.');\n            }\n        }\n        this._registeredModules.push(customModule);\n    }\n    async init({ genesisBlockJSON, dataPath: configPath, bus, channel, blockchainDB, forgerDB, logger, nodeDB, }) {\n        var _a;\n        this._channel = channel;\n        this._logger = logger;\n        this._blockchainDB = blockchainDB;\n        this._forgerDB = forgerDB;\n        this._nodeDB = nodeDB;\n        this._bus = bus;\n        const genesisBlock = this._readGenesisBlock(genesisBlockJSON, configPath);\n        this._networkIdentifier = lisk_cryptography_1.getNetworkIdentifier(genesisBlock.header.id, this._options.genesisConfig.communityIdentifier);\n        this._initModules(genesisBlock);\n        for (const customModule of this._registeredModules) {\n            this._processor.register(customModule);\n            const customModuleChannel = new channels_1.InMemoryChannel(customModule.name, customModule.events, customModule.actions);\n            await customModuleChannel.registerToBus(this._bus);\n            customModule.init({\n                channel: {\n                    publish: (name, data) => customModuleChannel.publish(name, data),\n                },\n                dataAccess: {\n                    getChainState: async (key) => this._chain.dataAccess.getChainState(key),\n                    getAccountByAddress: async (address) => this._chain.dataAccess.getAccountByAddress(address),\n                    getLastBlockHeader: async () => this._chain.dataAccess.getLastBlockHeader(),\n                },\n                logger: this._logger,\n            });\n        }\n        this._networkModule.registerEndpoint('getTransactions', async ({ data, peerId }) => this._transport.handleRPCGetTransactions(data, peerId));\n        this._networkModule.registerEndpoint('getLastBlock', ({ peerId }) => this._transport.handleRPCGetLastBlock(peerId));\n        this._networkModule.registerEndpoint('getBlocksFromId', async ({ data, peerId }) => this._transport.handleRPCGetBlocksFromId(data, peerId));\n        this._networkModule.registerEndpoint('getHighestCommonBlock', async ({ data, peerId }) => this._transport.handleRPCGetHighestCommonBlockID(data, peerId));\n        await this._networkModule.bootstrap(this.networkIdentifier);\n        this._subscribeToEvents();\n        await this._processor.init(genesisBlock);\n        await this._synchronizer.init();\n        this._networkModule.applyNodeInfo({\n            height: this._chain.lastBlock.header.height,\n            lastBlockID: this._chain.lastBlock.header.id,\n            maxHeightPrevoted: (_a = this._chain.lastBlock.header.asset.maxHeightPrevoted) !== null && _a !== void 0 ? _a : 0,\n            blockVersion: this._chain.lastBlock.header.version,\n        });\n        await this._transactionPool.start();\n        await this._startForging();\n        this._logger.info('Node ready and launched');\n        this._networkModule.events.on(constants_1.APP_EVENT_NETWORK_READY, async () => {\n            await this._startLoader();\n        });\n        this._networkModule.events.on(constants_1.APP_EVENT_NETWORK_EVENT, async (eventData) => {\n            const { event, data, peerId } = eventData;\n            try {\n                if (event === 'postTransactionsAnnouncement') {\n                    await this._transport.handleEventPostTransactionsAnnouncement(data, peerId);\n                    return;\n                }\n                if (event === 'postBlock') {\n                    await this._transport.handleEventPostBlock(data, peerId);\n                    return;\n                }\n            }\n            catch (err) {\n                this._logger.warn({ err, event }, 'Received invalid event message');\n            }\n        });\n    }\n    get networkIdentifier() {\n        return this._networkIdentifier;\n    }\n    get actions() {\n        return {\n            getValidators: async () => {\n                const validators = await this._chain.getValidators();\n                const slot = this._chain.slots.getSlotNumber();\n                const startTime = this._chain.slots.getSlotTime(slot);\n                let nextForgingTime = startTime;\n                const slotInRound = slot % this._chain.numberOfValidators;\n                const blockTime = this._chain.slots.blockTime();\n                const forgersInfo = [];\n                for (let i = slotInRound; i < slotInRound + this._chain.numberOfValidators; i += 1) {\n                    const validator = validators[i % validators.length];\n                    forgersInfo.push({\n                        ...validator,\n                        address: validator.address.toString('hex'),\n                        nextForgingTime,\n                    });\n                    nextForgingTime += blockTime;\n                }\n                return forgersInfo;\n            },\n            updateForgingStatus: async (params) => {\n                const result = await this._forger.updateForgingStatus(Buffer.from(params.address, 'hex'), params.password, params.forging, params.height, params.maxHeightPreviouslyForged, params.maxHeightPrevoted, params.overwrite);\n                return {\n                    address: result.address.toString('hex'),\n                    forging: result.forging,\n                };\n            },\n            getAccount: async (params) => {\n                const account = await this._chain.dataAccess.getAccountByAddress(Buffer.from(params.address, 'hex'));\n                return this._chain.dataAccess.encodeAccount(account).toString('hex');\n            },\n            getAccounts: async (params) => {\n                const accounts = await this._chain.dataAccess.getAccountsByAddress(params.address.map(address => Buffer.from(address, 'hex')));\n                return accounts.map(account => this._chain.dataAccess.encodeAccount(account).toString('hex'));\n            },\n            getBlockByID: async (params) => {\n                const block = await this._chain.dataAccess.getBlockByID(Buffer.from(params.id, 'hex'));\n                return this._chain.dataAccess.encode(block).toString('hex');\n            },\n            getBlocksByIDs: async (params) => {\n                const blocks = [];\n                try {\n                    for (const id of params.ids) {\n                        const block = await this._chain.dataAccess.getBlockByID(Buffer.from(id, 'hex'));\n                        blocks.push(block);\n                    }\n                }\n                catch (error) {\n                    if (!(error instanceof lisk_db_1.NotFoundError)) {\n                        throw error;\n                    }\n                }\n                return blocks.map(block => this._chain.dataAccess.encode(block).toString('hex'));\n            },\n            getBlockByHeight: async (params) => {\n                const block = await this._chain.dataAccess.getBlockByHeight(params.height);\n                return this._chain.dataAccess.encode(block).toString('hex');\n            },\n            getBlocksByHeightBetween: async (params) => {\n                const blocks = await this._chain.dataAccess.getBlocksByHeightBetween(params.from, params.to);\n                return blocks.map(b => this._chain.dataAccess.encode(b).toString('hex'));\n            },\n            getTransactionByID: async (params) => {\n                const transaction = await this._chain.dataAccess.getTransactionByID(Buffer.from(params.id, 'hex'));\n                return transaction.getBytes().toString('hex');\n            },\n            getTransactionsByIDs: async (params) => {\n                const transactions = [];\n                try {\n                    for (const id of params.ids) {\n                        const transaction = await this._chain.dataAccess.getTransactionByID(Buffer.from(id, 'hex'));\n                        transactions.push(transaction);\n                    }\n                }\n                catch (error) {\n                    if (!(error instanceof lisk_db_1.NotFoundError)) {\n                        throw error;\n                    }\n                }\n                return transactions.map(tx => tx.getBytes().toString('hex'));\n            },\n            getForgingStatus: async () => {\n                const forgingStatus = await this._forger.getForgingStatusOfAllDelegates();\n                if (forgingStatus) {\n                    return forgingStatus.map(({ address, ...forgingStatusWithoutAddress }) => ({\n                        address: address.toString('hex'),\n                        ...forgingStatusWithoutAddress,\n                    }));\n                }\n                return undefined;\n            },\n            getTransactionsFromPool: () => this._transactionPool.getAll().map(tx => tx.getBytes().toString('hex')),\n            postTransaction: async (params) => this._transport.handleEventPostTransaction(params),\n            getLastBlock: () => this._chain.dataAccess.encode(this._chain.lastBlock).toString('hex'),\n            getSchema: () => this.getSchema(),\n            getRegisteredModules: () => this.getRegisteredModules(),\n            getNodeInfo: () => ({\n                version: this._options.version,\n                networkVersion: this._options.networkVersion,\n                networkIdentifier: this._networkIdentifier.toString('hex'),\n                lastBlockID: this._chain.lastBlock.header.id.toString('hex'),\n                height: this._chain.lastBlock.header.height,\n                genesisHeight: this._chain.genesisHeight,\n                finalizedHeight: this._bft.finalityManager.finalizedHeight,\n                syncing: this._synchronizer.isActive,\n                unconfirmedTransactions: this._transactionPool.getAll().length,\n                genesisConfig: {\n                    ...this._options.genesisConfig,\n                },\n                registeredModules: this.getRegisteredModules(),\n                network: {\n                    port: this._options.network.port,\n                    hostIp: this._options.network.hostIp,\n                    seedPeers: this._options.network.seedPeers,\n                    blacklistedIPs: this._options.network.blacklistedIPs,\n                    fixedPeers: this._options.network.fixedPeers,\n                    whitelistedPeers: this._options.network.whitelistedPeers,\n                },\n            }),\n            getConnectedPeers: () => this._networkModule.getConnectedPeers(),\n            getDisconnectedPeers: () => this._networkModule.getDisconnectedPeers(),\n            getNetworkStats: () => this._networkModule.getNetworkStats(),\n        };\n    }\n    async cleanup() {\n        this._logger.info('Node cleanup started');\n        this._transactionPool.stop();\n        this._unsubscribeToEvents();\n        if (this._forgingJob) {\n            this._forgingJob.stop();\n        }\n        await this._synchronizer.stop();\n        await this._processor.stop();\n        this._logger.info('Node cleanup completed');\n        await this._networkModule.cleanup();\n    }\n    _initModules(genesisBlock) {\n        this._networkModule = new network_1.Network({\n            networkVersion: this._options.networkVersion,\n            options: this._options.network,\n            logger: this._logger,\n            channel: this._channel,\n            nodeDB: this._nodeDB,\n        });\n        this._chain = new lisk_chain_1.Chain({\n            db: this._blockchainDB,\n            genesisBlock,\n            networkIdentifier: this._networkIdentifier,\n            maxPayloadLength: this._options.genesisConfig.maxPayloadLength,\n            rewardDistance: this._options.genesisConfig.rewards.distance,\n            rewardOffset: this._options.genesisConfig.rewards.offset,\n            rewardMilestones: this._options.genesisConfig.rewards.milestones.map(s => BigInt(s)),\n            blockTime: this._options.genesisConfig.blockTime,\n            accountSchemas: this._registeredAccountSchemas,\n            minFeePerByte: this._options.genesisConfig.minFeePerByte,\n            baseFees: this._options.genesisConfig.baseFees,\n        });\n        this._bft = new lisk_bft_1.BFT({\n            chain: this._chain,\n            threshold: this._options.genesisConfig.bftThreshold,\n            genesisHeight: genesisBlock.header.height,\n        });\n        this._processor = new processor_1.Processor({\n            channel: this._channel,\n            logger: this._logger,\n            chainModule: this._chain,\n            bftModule: this._bft,\n        });\n        this._transactionPool = new lisk_transaction_pool_1.TransactionPool({\n            baseFees: this._options.genesisConfig.baseFees.map(fees => ({\n                ...fees,\n                baseFee: BigInt(fees.baseFee),\n            })),\n            minFeePerByte: this._options.genesisConfig.minFeePerByte,\n            applyTransactions: async (transactions) => {\n                const stateStore = await this._chain.newStateStore();\n                return this._processor.verifyTransactions(transactions, stateStore);\n            },\n            ...this._options.transactionPool,\n            minEntranceFeePriority: BigInt(this._options.transactionPool.minEntranceFeePriority),\n            minReplacementFeeDifference: BigInt(this._options.transactionPool.minReplacementFeeDifference),\n        });\n        const blockSyncMechanism = new synchronizer_1.BlockSynchronizationMechanism({\n            logger: this._logger,\n            bft: this._bft,\n            channel: this._channel,\n            chain: this._chain,\n            processorModule: this._processor,\n            networkModule: this._networkModule,\n        });\n        const fastChainSwitchMechanism = new synchronizer_1.FastChainSwitchingMechanism({\n            logger: this._logger,\n            channel: this._channel,\n            chain: this._chain,\n            bft: this._bft,\n            processor: this._processor,\n            networkModule: this._networkModule,\n        });\n        this._synchronizer = new synchronizer_1.Synchronizer({\n            channel: this._channel,\n            logger: this._logger,\n            chainModule: this._chain,\n            bftModule: this._bft,\n            processorModule: this._processor,\n            transactionPoolModule: this._transactionPool,\n            mechanisms: [blockSyncMechanism, fastChainSwitchMechanism],\n            networkModule: this._networkModule,\n        });\n        blockSyncMechanism.events.on(base_synchronizer_1.EVENT_SYNCHRONIZER_SYNC_REQUIRED, ({ block, peerId }) => {\n            this._synchronizer.run(block, peerId).catch(err => {\n                this._logger.error({ err: err }, 'Error occurred during synchronization.');\n            });\n        });\n        fastChainSwitchMechanism.events.on(base_synchronizer_1.EVENT_SYNCHRONIZER_SYNC_REQUIRED, ({ block, peerId }) => {\n            this._synchronizer.run(block, peerId).catch(err => {\n                this._logger.error({ err: err }, 'Error occurred during synchronization.');\n            });\n        });\n        this._forger = new forger_1.Forger({\n            logger: this._logger,\n            db: this._forgerDB,\n            bftModule: this._bft,\n            transactionPoolModule: this._transactionPool,\n            processorModule: this._processor,\n            chainModule: this._chain,\n            forgingDelegates: this._options.forging.delegates.map(delegate => ({\n                ...delegate,\n                address: Buffer.from(delegate.address, 'hex'),\n                hashOnion: {\n                    ...delegate.hashOnion,\n                    hashes: delegate.hashOnion.hashes.map(h => Buffer.from(h, 'hex')),\n                },\n            })),\n            forgingForce: this._options.forging.force,\n            forgingDefaultPassword: this._options.forging.defaultPassword,\n            forgingWaitThreshold: this._options.forging.waitThreshold,\n        });\n        this._transport = new transport_1.Transport({\n            channel: this._channel,\n            logger: this._logger,\n            synchronizer: this._synchronizer,\n            transactionPoolModule: this._transactionPool,\n            processorModule: this._processor,\n            chainModule: this._chain,\n            networkModule: this._networkModule,\n        });\n    }\n    async _startLoader() {\n        return this._synchronizer.loadUnconfirmedTransactions();\n    }\n    async _forgingTask() {\n        try {\n            if (!this._forger.delegatesEnabled()) {\n                this._logger.trace('No delegates are enabled');\n                return;\n            }\n            if (this._synchronizer.isActive) {\n                this._logger.debug('Client not ready to forge');\n                return;\n            }\n            await this._forger.forge();\n        }\n        catch (err) {\n            this._logger.error({ err: err });\n        }\n    }\n    async _startForging() {\n        try {\n            await this._forger.loadDelegates();\n        }\n        catch (err) {\n            this._logger.error({ err: err }, 'Failed to load delegates for forging');\n        }\n        this._forgingJob = new lisk_utils_1.jobHandlers.Scheduler(async () => this._forgingTask(), forgeInterval);\n        this._forgingJob.start();\n    }\n    _subscribeToEvents() {\n        this._chain.events.on(EVENT_NEW_BLOCK, async (eventData) => {\n            const { block } = eventData;\n            this._channel.publish(constants_1.APP_EVENT_BLOCK_NEW, {\n                block: this._chain.dataAccess.encode(block).toString('hex'),\n                accounts: eventData.accounts.map(acc => this._chain.dataAccess.encodeAccount(acc).toString('hex')),\n            });\n            if (block.payload.length) {\n                for (const transaction of block.payload) {\n                    this._transactionPool.remove(transaction);\n                }\n            }\n            if (!this._synchronizer.isActive) {\n                this._networkModule.applyNodeInfo({\n                    height: block.header.height,\n                    lastBlockID: block.header.id,\n                    maxHeightPrevoted: block.header.asset.maxHeightPrevoted,\n                    blockVersion: block.header.version,\n                });\n            }\n            this._logger.info({\n                id: block.header.id,\n                height: block.header.height,\n                numberOfTransactions: block.payload.length,\n            }, 'New block added to the chain');\n        });\n        this._chain.events.on(EVENT_DELETE_BLOCK, async (eventData) => {\n            const { block } = eventData;\n            this._channel.publish(constants_1.APP_EVENT_BLOCK_DELETE, {\n                block: this._chain.dataAccess.encode(block).toString('hex'),\n                accounts: eventData.accounts.map(acc => this._chain.dataAccess.encodeAccount(acc).toString('hex')),\n            });\n            if (block.payload.length) {\n                for (const transaction of block.payload) {\n                    try {\n                        await this._transactionPool.add(transaction);\n                    }\n                    catch (err) {\n                        this._logger.error({ err: err }, 'Failed to add transaction back to the pool');\n                    }\n                }\n            }\n            this._logger.info({ id: block.header.id, height: block.header.height }, 'Deleted a block from the chain');\n        });\n        this._chain.events.on(EVENT_VALIDATORS_CHANGED, (eventData) => {\n            const updatedValidatorsList = eventData.validators.map(aValidator => ({\n                ...aValidator,\n                address: aValidator.address.toString('hex'),\n            }));\n            this._channel.publish(constants_1.APP_EVENT_CHAIN_VALIDATORS_CHANGE, {\n                validators: updatedValidatorsList,\n            });\n        });\n        this._processor.events.on(processor_2.EVENT_PROCESSOR_BROADCAST_BLOCK, async ({ block }) => {\n            await this._transport.handleBroadcastBlock(block);\n        });\n        this._processor.events.on(processor_2.EVENT_PROCESSOR_SYNC_REQUIRED, ({ block, peerId }) => {\n            this._synchronizer.run(block, peerId).catch(err => {\n                this._logger.error({ err: err }, 'Error occurred during synchronization.');\n            });\n        });\n        this._transactionPool.events.on(EVENT_TRANSACTION_REMOVED, event => {\n            this._logger.debug(event, 'Transaction was removed from the pool.');\n        });\n    }\n    _unsubscribeToEvents() {\n        this._bft.removeAllListeners(lisk_bft_1.EVENT_BFT_BLOCK_FINALIZED);\n    }\n    _readGenesisBlock(genesisBlockJSON, configPath) {\n        const compiledGenesisPath = path.join(configPath, compiledGenesisBlockFileName);\n        const { default: defaultAccount, ...schema } = lisk_chain_1.getAccountSchemaWithDefault(this._registeredAccountSchemas);\n        const genesisAssetSchema = lisk_chain_1.getRegisteredBlockAssetSchema(schema)[0];\n        const compiled = fs.existsSync(compiledGenesisPath);\n        if (compiled) {\n            const genesisBlockBytes = fs.readFileSync(compiledGenesisPath);\n            const blockHeader = lisk_codec_1.codec.decode(lisk_chain_1.blockHeaderSchema, genesisBlockBytes);\n            const asset = lisk_codec_1.codec.decode(genesisAssetSchema, blockHeader.asset);\n            const id = lisk_cryptography_1.hash(genesisBlockBytes);\n            return {\n                header: {\n                    ...blockHeader,\n                    asset,\n                    id,\n                },\n                payload: [],\n            };\n        }\n        const genesisBlock = lisk_chain_1.readGenesisBlockJSON(genesisBlockJSON, this._registeredAccountSchemas);\n        const assetBytes = lisk_codec_1.codec.encode(genesisAssetSchema, genesisBlock.header.asset);\n        const headerBytes = lisk_codec_1.codec.encode(lisk_chain_1.blockHeaderSchema, {\n            ...genesisBlock.header,\n            asset: assetBytes,\n        });\n        fs.writeFileSync(compiledGenesisPath, headerBytes);\n        return genesisBlock;\n    }\n}\nexports.Node = Node;\n//# sourceMappingURL=node.js.map"]},"metadata":{},"sourceType":"script"}