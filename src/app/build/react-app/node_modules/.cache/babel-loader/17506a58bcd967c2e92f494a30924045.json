{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPublicKey = exports.getKeyPair = exports.getRandomBytes = exports.verifyDetached = exports.signDetached = exports.openBox = exports.box = void 0;\n\nvar sodium = require(\"sodium-native\");\n\nvar box = function box(messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey) {\n  var cipherBytes = Buffer.alloc(messageInBytes.length + sodium.crypto_box_MACBYTES);\n  sodium.crypto_box_easy(cipherBytes, messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey);\n  return cipherBytes;\n};\n\nexports.box = box;\n\nvar openBox = function openBox(cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey) {\n  var plainText = Buffer.alloc(cipherBytes.length - sodium.crypto_box_MACBYTES);\n\n  if (!sodium.crypto_box_open_easy(plainText, cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey)) {\n    throw new Error('Failed to decrypt message');\n  }\n\n  return plainText;\n};\n\nexports.openBox = openBox;\n\nvar signDetached = function signDetached(messageBytes, privateKeyBytes) {\n  var signatureBytes = Buffer.alloc(sodium.crypto_sign_BYTES);\n  sodium.crypto_sign_detached(signatureBytes, messageBytes, privateKeyBytes);\n  return signatureBytes;\n};\n\nexports.signDetached = signDetached;\n\nvar verifyDetached = function verifyDetached(messageBytes, signatureBytes, publicKeyBytes) {\n  return sodium.crypto_sign_verify_detached(signatureBytes, messageBytes, publicKeyBytes);\n};\n\nexports.verifyDetached = verifyDetached;\n\nvar getRandomBytes = function getRandomBytes(length) {\n  var nonce = Buffer.alloc(length);\n  sodium.randombytes_buf(nonce);\n  return nonce;\n};\n\nexports.getRandomBytes = getRandomBytes;\n\nvar getKeyPair = function getKeyPair(hashedSeed) {\n  var publicKey = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n  var privateKey = Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);\n  sodium.crypto_sign_seed_keypair(publicKey, privateKey, hashedSeed);\n  return {\n    publicKey: publicKey,\n    privateKey: privateKey\n  };\n};\n\nexports.getKeyPair = getKeyPair;\n\nvar getPublicKey = function getPublicKey(privateKey) {\n  var publicKeyBytes = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n  sodium.crypto_sign_ed25519_sk_to_pk(publicKeyBytes, privateKey);\n  return publicKeyBytes;\n};\n\nexports.getPublicKey = getPublicKey;","map":{"version":3,"sources":["../../src/nacl/fast.ts"],"names":[],"mappings":";;;;;;;AAeA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAIO,IAAM,GAAG,GAAyB,SAA5B,GAA4B,CACxC,cADwC,EAExC,YAFwC,EAGxC,kBAHwC,EAIxC,mBAJwC,EAKrC;AACH,MAAM,WAAW,GAAG,MAAM,CAAC,KAAP,CAAa,cAAc,CAAC,MAAf,GAAwB,MAAM,CAAC,mBAA5C,CAApB;AACA,EAAA,MAAM,CAAC,eAAP,CACC,WADD,EAEC,cAFD,EAGC,YAHD,EAIC,kBAJD,EAKC,mBALD;AAQA,SAAO,WAAP;AACA,CAhBM;;AAAM,OAAA,CAAA,GAAA,GAAG,GAAH;;AAkBN,IAAM,OAAO,GAA6B,SAApC,OAAoC,CAChD,WADgD,EAEhD,UAFgD,EAGhD,kBAHgD,EAIhD,mBAJgD,EAK7C;AACH,MAAM,SAAS,GAAG,MAAM,CAAC,KAAP,CAAa,WAAW,CAAC,MAAZ,GAAqB,MAAM,CAAC,mBAAzC,CAAlB;;AAEA,MACC,CAAC,MAAM,CAAC,oBAAP,CACA,SADA,EAEA,WAFA,EAGA,UAHA,EAIA,kBAJA,EAKA,mBALA,CADF,EAQE;AACD,UAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACA;;AAED,SAAO,SAAP;AACA,CArBM;;AAAM,OAAA,CAAA,OAAA,GAAO,OAAP;;AAuBN,IAAM,YAAY,GAAkC,SAA9C,YAA8C,CAAC,YAAD,EAAe,eAAf,EAAkC;AAC5F,MAAM,cAAc,GAAG,MAAM,CAAC,KAAP,CAAa,MAAM,CAAC,iBAApB,CAAvB;AACA,EAAA,MAAM,CAAC,oBAAP,CAA4B,cAA5B,EAA4C,YAA5C,EAA0D,eAA1D;AAEA,SAAO,cAAP;AACA,CALM;;AAAM,OAAA,CAAA,YAAA,GAAY,YAAZ;;AAON,IAAM,cAAc,GAAoC,SAAlD,cAAkD,CAC9D,YAD8D,EAE9D,cAF8D,EAG9D,cAH8D;AAAA,SAI1D,MAAM,CAAC,2BAAP,CAAmC,cAAnC,EAAmD,YAAnD,EAAiE,cAAjE,CAJ0D;AAAA,CAAxD;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd;;AAMN,IAAM,cAAc,GAAoC,SAAlD,cAAkD,CAAA,MAAM,EAAG;AACvE,MAAM,KAAK,GAAG,MAAM,CAAC,KAAP,CAAa,MAAb,CAAd;AACA,EAAA,MAAM,CAAC,eAAP,CAAuB,KAAvB;AAEA,SAAO,KAAP;AACA,CALM;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd;;AAON,IAAM,UAAU,GAAgC,SAA1C,UAA0C,CAAA,UAAU,EAAG;AACnE,MAAM,SAAS,GAAG,MAAM,CAAC,KAAP,CAAa,MAAM,CAAC,0BAApB,CAAlB;AACA,MAAM,UAAU,GAAG,MAAM,CAAC,KAAP,CAAa,MAAM,CAAC,0BAApB,CAAnB;AAEA,EAAA,MAAM,CAAC,wBAAP,CAAgC,SAAhC,EAA2C,UAA3C,EAAuD,UAAvD;AAEA,SAAO;AACN,IAAA,SAAS,EAAT,SADM;AAEN,IAAA,UAAU,EAAV;AAFM,GAAP;AAIA,CAVM;;AAAM,OAAA,CAAA,UAAA,GAAU,UAAV;;AAYN,IAAM,YAAY,GAAkC,SAA9C,YAA8C,CAAA,UAAU,EAAG;AACvE,MAAM,cAAc,GAAG,MAAM,CAAC,KAAP,CAAa,MAAM,CAAC,0BAApB,CAAvB;AAEA,EAAA,MAAM,CAAC,4BAAP,CAAoC,cAApC,EAAoD,UAApD;AAEA,SAAO,cAAP;AACA,CANM;;AAAM,OAAA,CAAA,YAAA,GAAY,YAAZ","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPublicKey = exports.getKeyPair = exports.getRandomBytes = exports.verifyDetached = exports.signDetached = exports.openBox = exports.box = void 0;\nconst sodium = require(\"sodium-native\");\nconst box = (messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey) => {\n    const cipherBytes = Buffer.alloc(messageInBytes.length + sodium.crypto_box_MACBYTES);\n    sodium.crypto_box_easy(cipherBytes, messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey);\n    return cipherBytes;\n};\nexports.box = box;\nconst openBox = (cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey) => {\n    const plainText = Buffer.alloc(cipherBytes.length - sodium.crypto_box_MACBYTES);\n    if (!sodium.crypto_box_open_easy(plainText, cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey)) {\n        throw new Error('Failed to decrypt message');\n    }\n    return plainText;\n};\nexports.openBox = openBox;\nconst signDetached = (messageBytes, privateKeyBytes) => {\n    const signatureBytes = Buffer.alloc(sodium.crypto_sign_BYTES);\n    sodium.crypto_sign_detached(signatureBytes, messageBytes, privateKeyBytes);\n    return signatureBytes;\n};\nexports.signDetached = signDetached;\nconst verifyDetached = (messageBytes, signatureBytes, publicKeyBytes) => sodium.crypto_sign_verify_detached(signatureBytes, messageBytes, publicKeyBytes);\nexports.verifyDetached = verifyDetached;\nconst getRandomBytes = length => {\n    const nonce = Buffer.alloc(length);\n    sodium.randombytes_buf(nonce);\n    return nonce;\n};\nexports.getRandomBytes = getRandomBytes;\nconst getKeyPair = hashedSeed => {\n    const publicKey = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n    const privateKey = Buffer.alloc(sodium.crypto_sign_SECRETKEYBYTES);\n    sodium.crypto_sign_seed_keypair(publicKey, privateKey, hashedSeed);\n    return {\n        publicKey,\n        privateKey,\n    };\n};\nexports.getKeyPair = getKeyPair;\nconst getPublicKey = privateKey => {\n    const publicKeyBytes = Buffer.alloc(sodium.crypto_sign_PUBLICKEYBYTES);\n    sodium.crypto_sign_ed25519_sk_to_pk(publicKeyBytes, privateKey);\n    return publicKeyBytes;\n};\nexports.getPublicKey = getPublicKey;\n//# sourceMappingURL=fast.js.map"]},"metadata":{},"sourceType":"script"}