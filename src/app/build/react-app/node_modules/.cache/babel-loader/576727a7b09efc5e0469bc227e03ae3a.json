{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getForgingInfo = void 0;\n\nvar db_1 = require(\"../db\");\n\nvar getForgingInfo = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(channel, codec, db) {\n    var forgingDelegates, encodedAccounts, forgerAccounts, data, _iterator, _step, _loop;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return channel.invoke('app:getForgingStatus');\n\n          case 2:\n            forgingDelegates = _context2.sent;\n            _context2.next = 5;\n            return channel.invoke('app:getAccounts', {\n              address: forgingDelegates.map(function (forger) {\n                return forger.address;\n              })\n            });\n\n          case 5:\n            encodedAccounts = _context2.sent;\n            forgerAccounts = encodedAccounts.map(function (encodedAccount) {\n              return codec.decodeAccount(encodedAccount);\n            });\n            data = [];\n            _iterator = _createForOfIteratorHelper(forgerAccounts);\n            _context2.prev = 9;\n            _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n              var forgerAccount, forgerAddressBinary, forgerInfo, forger;\n              return _regeneratorRuntime.wrap(function _loop$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      forgerAccount = _step.value;\n                      forgerAddressBinary = Buffer.from(forgerAccount.address, 'hex').toString('binary');\n                      _context.next = 4;\n                      return db_1.getForgerInfo(db, forgerAddressBinary);\n\n                    case 4:\n                      forgerInfo = _context.sent;\n                      forger = forgingDelegates.find(function (aForger) {\n                        return aForger.address === forgerAccount.address;\n                      });\n\n                      if (forger) {\n                        data.push(_objectSpread(_objectSpread({}, forger), {}, {\n                          username: forgerAccount.dpos.delegate.username,\n                          totalReceivedFees: forgerInfo.totalReceivedFees.toString(),\n                          totalReceivedRewards: forgerInfo.totalReceivedRewards.toString(),\n                          totalProducedBlocks: forgerInfo.totalProducedBlocks,\n                          totalVotesReceived: forgerAccount.dpos.delegate.totalVotesReceived,\n                          consecutiveMissedBlocks: forgerAccount.dpos.delegate.consecutiveMissedBlocks\n                        }));\n                      }\n\n                    case 7:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, _loop);\n            });\n\n            _iterator.s();\n\n          case 12:\n            if ((_step = _iterator.n()).done) {\n              _context2.next = 16;\n              break;\n            }\n\n            return _context2.delegateYield(_loop(), \"t0\", 14);\n\n          case 14:\n            _context2.next = 12;\n            break;\n\n          case 16:\n            _context2.next = 21;\n            break;\n\n          case 18:\n            _context2.prev = 18;\n            _context2.t1 = _context2[\"catch\"](9);\n\n            _iterator.e(_context2.t1);\n\n          case 21:\n            _context2.prev = 21;\n\n            _iterator.f();\n\n            return _context2.finish(21);\n\n          case 24:\n            return _context2.abrupt(\"return\", data);\n\n          case 25:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee, null, [[9, 18, 21, 24]]);\n  }));\n\n  return function getForgingInfo(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.getForgingInfo = getForgingInfo;","map":{"version":3,"sources":["../../src/controllers/forging_info.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAgBA,IAAA,IAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAYO,IAAM,cAAc;AAAA,sEAAG,iBAC7B,OAD6B,EAE7B,KAF6B,EAG7B,EAH6B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKE,OAAO,CAAC,MAAR,CAAsC,sBAAtC,CALF;;AAAA;AAKvB,YAAA,gBALuB;AAAA;AAAA,mBAMC,OAAO,CAAC,MAAR,CAAyB,iBAAzB,EAA4C;AACzE,cAAA,OAAO,EAAE,gBAAgB,CAAC,GAAjB,CAAqB,UAAA,MAAM;AAAA,uBAAI,MAAM,CAAC,OAAX;AAAA,eAA3B;AADgE,aAA5C,CAND;;AAAA;AAMvB,YAAA,eANuB;AASvB,YAAA,cATuB,GASN,eAAe,CAAC,GAAhB,CAAoB,UAAA,cAAc;AAAA,qBACxD,KAAK,CAAC,aAAN,CAAqC,cAArC,CADwD;AAAA,aAAlC,CATM;AAavB,YAAA,IAbuB,GAaF,EAbE;AAAA,mDAcD,cAdC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAclB,sBAAA,aAdkB;AAetB,sBAAA,mBAfsB,GAeA,MAAM,CAAC,IAAP,CAAY,aAAa,CAAC,OAA1B,EAAmC,KAAnC,EAA0C,QAA1C,CAAmD,QAAnD,CAfA;AAAA;AAAA,6BAgBH,IAAA,CAAA,aAAA,CAAc,EAAd,EAAkB,mBAAlB,CAhBG;;AAAA;AAgBtB,sBAAA,UAhBsB;AAiBtB,sBAAA,MAjBsB,GAiBb,gBAAgB,CAAC,IAAjB,CAAsB,UAAA,OAAO;AAAA,+BAAI,OAAO,CAAC,OAAR,KAAoB,aAAa,CAAC,OAAtC;AAAA,uBAA7B,CAjBa;;AAmB5B,0BAAI,MAAJ,EAAY;AACX,wBAAA,IAAI,CAAC,IAAL,iCACI,MADJ;AAEC,0BAAA,QAAQ,EAAE,aAAa,CAAC,IAAd,CAAmB,QAAnB,CAA4B,QAFvC;AAGC,0BAAA,iBAAiB,EAAE,UAAU,CAAC,iBAAX,CAA6B,QAA7B,EAHpB;AAIC,0BAAA,oBAAoB,EAAE,UAAU,CAAC,oBAAX,CAAgC,QAAhC,EAJvB;AAKC,0BAAA,mBAAmB,EAAE,UAAU,CAAC,mBALjC;AAMC,0BAAA,kBAAkB,EAAE,aAAa,CAAC,IAAd,CAAmB,QAAnB,CAA4B,kBANjD;AAOC,0BAAA,uBAAuB,EAAE,aAAa,CAAC,IAAd,CAAmB,QAAnB,CAA4B;AAPtD;AASA;;AA7B2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA,8CAgCtB,IAhCsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAd,cAAc;AAAA;AAAA;AAAA,GAApB;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getForgingInfo = void 0;\nconst db_1 = require(\"../db\");\nconst getForgingInfo = async (channel, codec, db) => {\n    const forgingDelegates = await channel.invoke('app:getForgingStatus');\n    const encodedAccounts = await channel.invoke('app:getAccounts', {\n        address: forgingDelegates.map(forger => forger.address),\n    });\n    const forgerAccounts = encodedAccounts.map(encodedAccount => codec.decodeAccount(encodedAccount));\n    const data = [];\n    for (const forgerAccount of forgerAccounts) {\n        const forgerAddressBinary = Buffer.from(forgerAccount.address, 'hex').toString('binary');\n        const forgerInfo = await db_1.getForgerInfo(db, forgerAddressBinary);\n        const forger = forgingDelegates.find(aForger => aForger.address === forgerAccount.address);\n        if (forger) {\n            data.push({\n                ...forger,\n                username: forgerAccount.dpos.delegate.username,\n                totalReceivedFees: forgerInfo.totalReceivedFees.toString(),\n                totalReceivedRewards: forgerInfo.totalReceivedRewards.toString(),\n                totalProducedBlocks: forgerInfo.totalProducedBlocks,\n                totalVotesReceived: forgerAccount.dpos.delegate.totalVotesReceived,\n                consecutiveMissedBlocks: forgerAccount.dpos.delegate.consecutiveMissedBlocks,\n            });\n        }\n    }\n    return data;\n};\nexports.getForgingInfo = getForgingInfo;\n//# sourceMappingURL=forging_info.js.map"]},"metadata":{},"sourceType":"script"}