{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPassphraseValidationErrors = exports.locateConsecutiveWhitespaces = exports.locateUppercaseCharacters = exports.countUppercaseCharacters = exports.countPassphraseWords = exports.countPassphraseWhitespaces = void 0;\n\nvar Mnemonic = require(\"bip39\");\n\nvar passphraseRegularExpression = {\n  uppercaseRegExp: /[A-Z]/g,\n  whitespaceRegExp: /\\s/g\n};\n\nvar countPassphraseWhitespaces = function countPassphraseWhitespaces(passphrase) {\n  var whitespaceMatches = passphrase.match(passphraseRegularExpression.whitespaceRegExp);\n  return whitespaceMatches !== null ? whitespaceMatches.length : 0;\n};\n\nexports.countPassphraseWhitespaces = countPassphraseWhitespaces;\n\nvar countPassphraseWords = function countPassphraseWords(passphrase) {\n  return passphrase.split(' ').filter(Boolean).length;\n};\n\nexports.countPassphraseWords = countPassphraseWords;\n\nvar countUppercaseCharacters = function countUppercaseCharacters(passphrase) {\n  var uppercaseCharacterMatches = passphrase.match(passphraseRegularExpression.uppercaseRegExp);\n  return uppercaseCharacterMatches !== null ? uppercaseCharacterMatches.length : 0;\n};\n\nexports.countUppercaseCharacters = countUppercaseCharacters;\n\nvar locateUppercaseCharacters = function locateUppercaseCharacters(passphrase) {\n  return passphrase.split('').reduce(function (upperCaseIndexes, character, index) {\n    if (character.match(passphraseRegularExpression.uppercaseRegExp) !== null) {\n      return [].concat(_toConsumableArray(upperCaseIndexes), [index]);\n    }\n\n    return upperCaseIndexes;\n  }, []);\n};\n\nexports.locateUppercaseCharacters = locateUppercaseCharacters;\n\nvar locateConsecutiveWhitespaces = function locateConsecutiveWhitespaces(passphrase) {\n  return passphrase.split('').reduce(function (whitespaceIndexes, character, index) {\n    if (index === 0 && character.match(passphraseRegularExpression.whitespaceRegExp) !== null) {\n      return [].concat(_toConsumableArray(whitespaceIndexes), [index]);\n    }\n\n    if (index !== passphrase.length - 1 && character.match(passphraseRegularExpression.whitespaceRegExp) !== null && passphrase.split('')[index - 1].match(passphraseRegularExpression.whitespaceRegExp) !== null) {\n      return [].concat(_toConsumableArray(whitespaceIndexes), [index]);\n    }\n\n    if (index === passphrase.length - 1 && character.match(passphraseRegularExpression.whitespaceRegExp) !== null) {\n      return [].concat(_toConsumableArray(whitespaceIndexes), [index]);\n    }\n\n    return whitespaceIndexes;\n  }, []);\n};\n\nexports.locateConsecutiveWhitespaces = locateConsecutiveWhitespaces;\n\nvar getPassphraseValidationErrors = function getPassphraseValidationErrors(passphrase, wordlists) {\n  var expectedWords = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 12;\n  var expectedWhitespaces = expectedWords - 1;\n  var expectedUppercaseCharacterCount = 0;\n  var wordsInPassphrase = exports.countPassphraseWords(passphrase);\n  var whiteSpacesInPassphrase = exports.countPassphraseWhitespaces(passphrase);\n  var uppercaseCharacterInPassphrase = exports.countUppercaseCharacters(passphrase);\n  var passphraseWordError = {\n    actual: wordsInPassphrase,\n    code: 'INVALID_AMOUNT_OF_WORDS',\n    expected: expectedWords,\n    message: \"Passphrase contains \".concat(wordsInPassphrase.toString(), \" words instead of expected \").concat(expectedWords.toString(), \". Please check the passphrase.\")\n  };\n  var whiteSpaceError = {\n    actual: whiteSpacesInPassphrase,\n    code: 'INVALID_AMOUNT_OF_WHITESPACES',\n    expected: expectedWhitespaces,\n    location: exports.locateConsecutiveWhitespaces(passphrase),\n    message: \"Passphrase contains \".concat(whiteSpacesInPassphrase.toString(), \" whitespaces instead of expected \").concat(expectedWhitespaces.toString(), \". Please check the passphrase.\")\n  };\n  var uppercaseCharacterError = {\n    actual: uppercaseCharacterInPassphrase,\n    code: 'INVALID_AMOUNT_OF_UPPERCASE_CHARACTER',\n    expected: expectedUppercaseCharacterCount,\n    location: exports.locateUppercaseCharacters(passphrase),\n    message: \"Passphrase contains \".concat(uppercaseCharacterInPassphrase.toString(), \" uppercase character instead of expected \").concat(expectedUppercaseCharacterCount.toString(), \". Please check the passphrase.\")\n  };\n  var validationError = {\n    actual: false,\n    code: 'INVALID_MNEMONIC',\n    expected: true,\n    message: 'Passphrase is not a valid mnemonic passphrase. Please check the passphrase.'\n  };\n  var finalWordList = wordlists !== undefined ? _toConsumableArray(wordlists) : Mnemonic.wordlists.english;\n  return [passphraseWordError, whiteSpaceError, uppercaseCharacterError, validationError].reduce(function (errorArray, error) {\n    if (error.code === passphraseWordError.code && wordsInPassphrase !== expectedWords) {\n      return [].concat(_toConsumableArray(errorArray), [error]);\n    }\n\n    if (error.code === whiteSpaceError.code && whiteSpacesInPassphrase !== expectedWhitespaces) {\n      return [].concat(_toConsumableArray(errorArray), [error]);\n    }\n\n    if (error.code === uppercaseCharacterError.code && uppercaseCharacterInPassphrase !== expectedUppercaseCharacterCount) {\n      return [].concat(_toConsumableArray(errorArray), [error]);\n    }\n\n    if (error.code === validationError.code && !Mnemonic.validateMnemonic(passphrase, finalWordList)) {\n      return [].concat(_toConsumableArray(errorArray), [error]);\n    }\n\n    return errorArray;\n  }, []);\n};\n\nexports.getPassphraseValidationErrors = getPassphraseValidationErrors;","map":{"version":3,"sources":["../src/validation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPassphraseValidationErrors = exports.locateConsecutiveWhitespaces = exports.locateUppercaseCharacters = exports.countUppercaseCharacters = exports.countPassphraseWords = exports.countPassphraseWhitespaces = void 0;\nconst Mnemonic = require(\"bip39\");\nconst passphraseRegularExpression = {\n    uppercaseRegExp: /[A-Z]/g,\n    whitespaceRegExp: /\\s/g,\n};\nconst countPassphraseWhitespaces = (passphrase) => {\n    const whitespaceMatches = passphrase.match(passphraseRegularExpression.whitespaceRegExp);\n    return whitespaceMatches !== null ? whitespaceMatches.length : 0;\n};\nexports.countPassphraseWhitespaces = countPassphraseWhitespaces;\nconst countPassphraseWords = (passphrase) => passphrase.split(' ').filter(Boolean).length;\nexports.countPassphraseWords = countPassphraseWords;\nconst countUppercaseCharacters = (passphrase) => {\n    const uppercaseCharacterMatches = passphrase.match(passphraseRegularExpression.uppercaseRegExp);\n    return uppercaseCharacterMatches !== null ? uppercaseCharacterMatches.length : 0;\n};\nexports.countUppercaseCharacters = countUppercaseCharacters;\nconst locateUppercaseCharacters = (passphrase) => passphrase\n    .split('')\n    .reduce((upperCaseIndexes, character, index) => {\n    if (character.match(passphraseRegularExpression.uppercaseRegExp) !== null) {\n        return [...upperCaseIndexes, index];\n    }\n    return upperCaseIndexes;\n}, []);\nexports.locateUppercaseCharacters = locateUppercaseCharacters;\nconst locateConsecutiveWhitespaces = (passphrase) => passphrase\n    .split('')\n    .reduce((whitespaceIndexes, character, index) => {\n    if (index === 0 && character.match(passphraseRegularExpression.whitespaceRegExp) !== null) {\n        return [...whitespaceIndexes, index];\n    }\n    if (index !== passphrase.length - 1 &&\n        character.match(passphraseRegularExpression.whitespaceRegExp) !== null &&\n        passphrase.split('')[index - 1].match(passphraseRegularExpression.whitespaceRegExp) !== null) {\n        return [...whitespaceIndexes, index];\n    }\n    if (index === passphrase.length - 1 &&\n        character.match(passphraseRegularExpression.whitespaceRegExp) !== null) {\n        return [...whitespaceIndexes, index];\n    }\n    return whitespaceIndexes;\n}, []);\nexports.locateConsecutiveWhitespaces = locateConsecutiveWhitespaces;\nconst getPassphraseValidationErrors = (passphrase, wordlists, expectedWords = 12) => {\n    const expectedWhitespaces = expectedWords - 1;\n    const expectedUppercaseCharacterCount = 0;\n    const wordsInPassphrase = exports.countPassphraseWords(passphrase);\n    const whiteSpacesInPassphrase = exports.countPassphraseWhitespaces(passphrase);\n    const uppercaseCharacterInPassphrase = exports.countUppercaseCharacters(passphrase);\n    const passphraseWordError = {\n        actual: wordsInPassphrase,\n        code: 'INVALID_AMOUNT_OF_WORDS',\n        expected: expectedWords,\n        message: `Passphrase contains ${wordsInPassphrase.toString()} words instead of expected ${expectedWords.toString()}. Please check the passphrase.`,\n    };\n    const whiteSpaceError = {\n        actual: whiteSpacesInPassphrase,\n        code: 'INVALID_AMOUNT_OF_WHITESPACES',\n        expected: expectedWhitespaces,\n        location: exports.locateConsecutiveWhitespaces(passphrase),\n        message: `Passphrase contains ${whiteSpacesInPassphrase.toString()} whitespaces instead of expected ${expectedWhitespaces.toString()}. Please check the passphrase.`,\n    };\n    const uppercaseCharacterError = {\n        actual: uppercaseCharacterInPassphrase,\n        code: 'INVALID_AMOUNT_OF_UPPERCASE_CHARACTER',\n        expected: expectedUppercaseCharacterCount,\n        location: exports.locateUppercaseCharacters(passphrase),\n        message: `Passphrase contains ${uppercaseCharacterInPassphrase.toString()} uppercase character instead of expected ${expectedUppercaseCharacterCount.toString()}. Please check the passphrase.`,\n    };\n    const validationError = {\n        actual: false,\n        code: 'INVALID_MNEMONIC',\n        expected: true,\n        message: 'Passphrase is not a valid mnemonic passphrase. Please check the passphrase.',\n    };\n    const finalWordList = wordlists !== undefined ? [...wordlists] : Mnemonic.wordlists.english;\n    return [passphraseWordError, whiteSpaceError, uppercaseCharacterError, validationError].reduce((errorArray, error) => {\n        if (error.code === passphraseWordError.code && wordsInPassphrase !== expectedWords) {\n            return [...errorArray, error];\n        }\n        if (error.code === whiteSpaceError.code && whiteSpacesInPassphrase !== expectedWhitespaces) {\n            return [...errorArray, error];\n        }\n        if (error.code === uppercaseCharacterError.code &&\n            uppercaseCharacterInPassphrase !== expectedUppercaseCharacterCount) {\n            return [...errorArray, error];\n        }\n        if (error.code === validationError.code &&\n            !Mnemonic.validateMnemonic(passphrase, finalWordList)) {\n            return [...errorArray, error];\n        }\n        return errorArray;\n    }, []);\n};\nexports.getPassphraseValidationErrors = getPassphraseValidationErrors;\n//# sourceMappingURL=validation.js.map"]},"metadata":{},"sourceType":"script"}