{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionPool = exports.events = exports.DEFAULT_REORGANIZE_TIME = exports.DEFAULT_MINIMUM_REPLACEMENT_FEE_DIFFERENCE = exports.DEFAULT_EXPIRE_INTERVAL = exports.DEFAULT_EXPIRY_TIME = exports.DEFAULT_MIN_ENTRANCE_FEE_PRIORITY = exports.DEFAULT_MAX_TRANSACTIONS_PER_ACCOUNT = exports.DEFAULT_MAX_TRANSACTIONS = void 0;\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar createDebug = require(\"debug\");\n\nvar events_1 = require(\"events\");\n\nvar lisk_utils_1 = require(\"@liskhq/lisk-utils\");\n\nvar errors_1 = require(\"./errors\");\n\nvar job_1 = require(\"./job\");\n\nvar transaction_list_1 = require(\"./transaction_list\");\n\nvar types_1 = require(\"./types\");\n\nvar debug = createDebug('lisk:transaction_pool');\nexports.DEFAULT_MAX_TRANSACTIONS = 4096;\nexports.DEFAULT_MAX_TRANSACTIONS_PER_ACCOUNT = 64;\nexports.DEFAULT_MIN_ENTRANCE_FEE_PRIORITY = BigInt(0);\nexports.DEFAULT_EXPIRY_TIME = 3 * 60 * 60 * 1000;\nexports.DEFAULT_EXPIRE_INTERVAL = 60 * 60 * 1000;\nexports.DEFAULT_MINIMUM_REPLACEMENT_FEE_DIFFERENCE = BigInt(10);\nexports.DEFAULT_REORGANIZE_TIME = 500;\nexports.events = {\n  EVENT_TRANSACTION_REMOVED: 'EVENT_TRANSACTION_REMOVED'\n};\nvar ERR_NONCE_OUT_OF_BOUNDS_CODE = 'ERR_NONCE_OUT_OF_BOUNDS';\nvar ERR_TRANSACTION_VERIFICATION_FAIL = 'ERR_TRANSACTION_VERIFICATION_FAIL';\n\nvar TransactionPool = /*#__PURE__*/function () {\n  function TransactionPool(config) {\n    var _this = this;\n\n    _classCallCheck(this, TransactionPool);\n\n    var _a, _b, _c, _d, _e, _f;\n\n    this.events = new events_1.EventEmitter();\n    this._feePriorityQueue = new lisk_utils_1.dataStructures.MinHeap();\n    this._allTransactions = new lisk_utils_1.dataStructures.BufferMap();\n    this._transactionList = new lisk_utils_1.dataStructures.BufferMap();\n    this._applyFunction = config.applyTransactions;\n    this._maxTransactions = (_a = config.maxTransactions) !== null && _a !== void 0 ? _a : exports.DEFAULT_MAX_TRANSACTIONS;\n    this._maxTransactionsPerAccount = (_b = config.maxTransactionsPerAccount) !== null && _b !== void 0 ? _b : exports.DEFAULT_MAX_TRANSACTIONS_PER_ACCOUNT;\n    this._transactionExpiryTime = (_c = config.transactionExpiryTime) !== null && _c !== void 0 ? _c : exports.DEFAULT_EXPIRY_TIME;\n    this._minEntranceFeePriority = (_d = config.minEntranceFeePriority) !== null && _d !== void 0 ? _d : exports.DEFAULT_MIN_ENTRANCE_FEE_PRIORITY;\n    this._transactionReorganizationInterval = (_e = config.transactionReorganizationInterval) !== null && _e !== void 0 ? _e : exports.DEFAULT_REORGANIZE_TIME;\n    this._minReplacementFeeDifference = (_f = config.minReplacementFeeDifference) !== null && _f !== void 0 ? _f : exports.DEFAULT_MINIMUM_REPLACEMENT_FEE_DIFFERENCE;\n    this._baseFees = config.baseFees;\n    this._minFeePerByte = config.minFeePerByte;\n    this._reorganizeJob = new job_1.Job( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", _this._reorganize());\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })), this._transactionReorganizationInterval);\n    this._expireJob = new job_1.Job( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", _this._expire());\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })), exports.DEFAULT_EXPIRE_INTERVAL);\n  }\n\n  _createClass(TransactionPool, [{\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._reorganizeJob.start();\n\n                this._expireJob.start();\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      this._reorganizeJob.stop();\n\n      this._expireJob.stop();\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return this._allTransactions.values();\n    }\n  }, {\n    key: \"get\",\n    value: function get(id) {\n      return this._allTransactions.get(id);\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(id) {\n      return this._allTransactions.has(id);\n    }\n  }, {\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(incomingTx) {\n        var error, lowestFeePriorityTrx, _error, incomingTxAddress, txStatus, exceededTransactionsCount, isEvicted, _this$_transactionLis, added, removedID, reason, removedTx;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this._allTransactions.has(incomingTx.id)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                debug('Received duplicate transaction', incomingTx.id);\n                return _context4.abrupt(\"return\", {\n                  status: types_1.Status.OK\n                });\n\n              case 3:\n                incomingTx.feePriority = this._calculateFeePriority(incomingTx);\n\n                if (!(incomingTx.feePriority < this._minEntranceFeePriority)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                error = new errors_1.TransactionPoolError('Rejecting transaction due to failed minimum entrance fee priority requirement.', incomingTx.id, '.fee', incomingTx.feePriority.toString(), this._minEntranceFeePriority.toString());\n                return _context4.abrupt(\"return\", {\n                  status: types_1.Status.FAIL,\n                  error: error\n                });\n\n              case 7:\n                lowestFeePriorityTrx = this._feePriorityQueue.peek();\n\n                if (!(this._allTransactions.size >= this._maxTransactions && lowestFeePriorityTrx && incomingTx.feePriority <= lowestFeePriorityTrx.key)) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                _error = new errors_1.TransactionPoolError('Rejecting transaction due to fee priority when the pool is full.', incomingTx.id, '.fee', incomingTx.feePriority.toString(), lowestFeePriorityTrx.key.toString());\n                return _context4.abrupt(\"return\", {\n                  status: types_1.Status.FAIL,\n                  error: _error\n                });\n\n              case 11:\n                incomingTxAddress = lisk_cryptography_1.getAddressFromPublicKey(incomingTx.senderPublicKey);\n                _context4.prev = 12;\n                _context4.next = 15;\n                return this._applyFunction([incomingTx]);\n\n              case 15:\n                txStatus = types_1.TransactionStatus.PROCESSABLE;\n                _context4.next = 23;\n                break;\n\n              case 18:\n                _context4.prev = 18;\n                _context4.t0 = _context4[\"catch\"](12);\n                txStatus = this._getStatus(_context4.t0);\n\n                if (!(txStatus === types_1.TransactionStatus.INVALID)) {\n                  _context4.next = 23;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  status: types_1.Status.FAIL,\n                  error: _context4.t0\n                });\n\n              case 23:\n                exceededTransactionsCount = this._allTransactions.size - this._maxTransactions;\n\n                if (exceededTransactionsCount >= 0) {\n                  isEvicted = this._evictUnprocessable();\n\n                  if (!isEvicted) {\n                    this._evictProcessable();\n                  }\n                }\n\n                if (!this._transactionList.has(incomingTxAddress)) {\n                  this._transactionList.set(incomingTxAddress, new transaction_list_1.TransactionList(incomingTxAddress, {\n                    maxSize: this._maxTransactionsPerAccount,\n                    minReplacementFeeDifference: this._minReplacementFeeDifference\n                  }));\n                }\n\n                _this$_transactionLis = this._transactionList.get(incomingTxAddress).add(incomingTx, txStatus === types_1.TransactionStatus.PROCESSABLE), added = _this$_transactionLis.added, removedID = _this$_transactionLis.removedID, reason = _this$_transactionLis.reason;\n\n                if (added) {\n                  _context4.next = 29;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  status: types_1.Status.FAIL,\n                  error: new errors_1.TransactionPoolError(reason, incomingTx.id)\n                });\n\n              case 29:\n                if (removedID) {\n                  debug('Removing from transaction pool with id', removedID);\n                  removedTx = this._allTransactions.get(removedID);\n\n                  this._allTransactions.delete(removedID);\n\n                  this.events.emit(exports.events.EVENT_TRANSACTION_REMOVED, {\n                    id: removedTx.id,\n                    nonce: removedTx.nonce.toString(),\n                    senderPublicKey: removedTx.senderPublicKey,\n                    reason: 'Transaction List executed remove'\n                  });\n                }\n\n                incomingTx.receivedAt = new Date();\n\n                this._allTransactions.set(incomingTx.id, incomingTx);\n\n                this._feePriorityQueue.push(this._calculateFeePriority(incomingTx), incomingTx.id);\n\n                return _context4.abrupt(\"return\", {\n                  status: types_1.Status.OK\n                });\n\n              case 34:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[12, 18]]);\n      }));\n\n      function add(_x) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n  }, {\n    key: \"remove\",\n    value: function remove(tx) {\n      var _a;\n\n      var foundTx = this._allTransactions.get(tx.id);\n\n      if (!foundTx) {\n        return false;\n      }\n\n      this._allTransactions.delete(tx.id);\n\n      debug('Removing from transaction pool with id', tx.id);\n      var senderId = lisk_cryptography_1.getAddressFromPublicKey(foundTx.senderPublicKey);\n\n      this._transactionList.get(senderId).remove(tx.nonce);\n\n      if (this._transactionList.get(senderId).size === 0) {\n        this._transactionList.delete(senderId);\n      }\n\n      this._feePriorityQueue.clear();\n\n      var _iterator = _createForOfIteratorHelper(this.getAll()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var txObject = _step.value;\n\n          this._feePriorityQueue.push((_a = txObject.feePriority) !== null && _a !== void 0 ? _a : this._calculateFeePriority(txObject), txObject.id);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return true;\n    }\n  }, {\n    key: \"getProcessableTransactions\",\n    value: function getProcessableTransactions() {\n      var processableTransactions = new lisk_utils_1.dataStructures.BufferMap();\n\n      var _iterator2 = _createForOfIteratorHelper(this._transactionList.values()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var list = _step2.value;\n          var transactions = list.getProcessable();\n\n          if (transactions.length !== 0) {\n            processableTransactions.set(list.address, _toConsumableArray(transactions));\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return processableTransactions;\n    }\n  }, {\n    key: \"_calculateFeePriority\",\n    value: function _calculateFeePriority(trx) {\n      return (trx.fee - this._calculateMinFee(trx)) / BigInt(trx.getBytes().length);\n    }\n  }, {\n    key: \"_calculateMinFee\",\n    value: function _calculateMinFee(trx) {\n      var _a;\n\n      var foundBaseFee = this._baseFees.find(function (f) {\n        return f.moduleID === trx.moduleID && f.assetID === trx.assetID;\n      });\n\n      return BigInt((_a = foundBaseFee === null || foundBaseFee === void 0 ? void 0 : foundBaseFee.baseFee) !== null && _a !== void 0 ? _a : BigInt(0)) + BigInt(this._minFeePerByte * trx.getBytes().length);\n    }\n  }, {\n    key: \"_getStatus\",\n    value: function _getStatus(errorResponse) {\n      if (errorResponse.code === ERR_TRANSACTION_VERIFICATION_FAIL && errorResponse.transactionError.code === ERR_NONCE_OUT_OF_BOUNDS_CODE) {\n        debug('Received UNPROCESSABLE transaction');\n        return types_1.TransactionStatus.UNPROCESSABLE;\n      }\n\n      debug('Received INVALID transaction');\n      return types_1.TransactionStatus.INVALID;\n    }\n  }, {\n    key: \"_evictUnprocessable\",\n    value: function _evictUnprocessable() {\n      var unprocessableFeePriorityHeap = new lisk_utils_1.dataStructures.MinHeap();\n\n      var _iterator3 = _createForOfIteratorHelper(this._transactionList.values()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var txList = _step3.value;\n          var unprocessableTransactions = txList.getUnprocessable();\n\n          var _iterator4 = _createForOfIteratorHelper(unprocessableTransactions),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var unprocessableTx = _step4.value;\n              unprocessableFeePriorityHeap.push(unprocessableTx.feePriority, unprocessableTx);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      if (unprocessableFeePriorityHeap.count < 1) {\n        return false;\n      }\n\n      var evictedTransaction = unprocessableFeePriorityHeap.pop();\n\n      if (!evictedTransaction) {\n        return false;\n      }\n\n      this.events.emit(exports.events.EVENT_TRANSACTION_REMOVED, {\n        id: evictedTransaction.value.id,\n        nonce: evictedTransaction.value.nonce.toString(),\n        senderPublicKey: evictedTransaction.value.senderPublicKey,\n        reason: 'Pool exceeded the size limit'\n      });\n      return this.remove(evictedTransaction.value);\n    }\n  }, {\n    key: \"_evictProcessable\",\n    value: function _evictProcessable() {\n      var processableFeePriorityHeap = new lisk_utils_1.dataStructures.MinHeap();\n\n      var _iterator5 = _createForOfIteratorHelper(this._transactionList.values()),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var txList = _step5.value;\n          var processableTransactions = txList.getProcessable();\n\n          if (processableTransactions.length) {\n            var processableTransactionWithHighestNonce = processableTransactions[processableTransactions.length - 1];\n            processableFeePriorityHeap.push(processableTransactionWithHighestNonce.feePriority, processableTransactionWithHighestNonce);\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      if (processableFeePriorityHeap.count < 1) {\n        return false;\n      }\n\n      var evictedTransaction = processableFeePriorityHeap.pop();\n\n      if (!evictedTransaction) {\n        return false;\n      }\n\n      this.events.emit(exports.events.EVENT_TRANSACTION_REMOVED, {\n        id: evictedTransaction.value.id,\n        nonce: evictedTransaction.value.nonce.toString(),\n        senderPublicKey: evictedTransaction.value.senderPublicKey,\n        reason: 'Pool exceeded the size limit'\n      });\n      return this.remove(evictedTransaction.value);\n    }\n  }, {\n    key: \"_reorganize\",\n    value: function () {\n      var _reorganize2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this2 = this;\n\n        var _iterator6, _step6, _loop, _ret;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _iterator6 = _createForOfIteratorHelper(this._transactionList.values());\n                _context6.prev = 1;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var txList, promotableTransactions, processableTransactions, allTransactions, firstInvalidTransaction, failedStatus, successfulTransactionIds, _iterator7, _step7, _tx, invalidTransaction, _iterator8, _step8, tx;\n\n                  return _regeneratorRuntime.wrap(function _loop$(_context5) {\n                    while (1) {\n                      switch (_context5.prev = _context5.next) {\n                        case 0:\n                          txList = _step6.value;\n                          promotableTransactions = txList.getPromotable();\n\n                          if (promotableTransactions.length) {\n                            _context5.next = 4;\n                            break;\n                          }\n\n                          return _context5.abrupt(\"return\", \"continue\");\n\n                        case 4:\n                          processableTransactions = txList.getProcessable();\n                          allTransactions = [].concat(_toConsumableArray(processableTransactions), _toConsumableArray(promotableTransactions));\n                          firstInvalidTransaction = void 0;\n                          _context5.prev = 7;\n                          _context5.next = 10;\n                          return _this2._applyFunction(allTransactions);\n\n                        case 10:\n                          _context5.next = 16;\n                          break;\n\n                        case 12:\n                          _context5.prev = 12;\n                          _context5.t0 = _context5[\"catch\"](7);\n                          failedStatus = _this2._getStatus(_context5.t0);\n                          firstInvalidTransaction = {\n                            id: _context5.t0.id,\n                            status: failedStatus\n                          };\n\n                        case 16:\n                          successfulTransactionIds = [];\n                          _iterator7 = _createForOfIteratorHelper(allTransactions);\n                          _context5.prev = 18;\n\n                          _iterator7.s();\n\n                        case 20:\n                          if ((_step7 = _iterator7.n()).done) {\n                            _context5.next = 27;\n                            break;\n                          }\n\n                          _tx = _step7.value;\n\n                          if (!(firstInvalidTransaction && _tx.id.equals(firstInvalidTransaction.id))) {\n                            _context5.next = 24;\n                            break;\n                          }\n\n                          return _context5.abrupt(\"break\", 27);\n\n                        case 24:\n                          successfulTransactionIds.push(_tx.id);\n\n                        case 25:\n                          _context5.next = 20;\n                          break;\n\n                        case 27:\n                          _context5.next = 32;\n                          break;\n\n                        case 29:\n                          _context5.prev = 29;\n                          _context5.t1 = _context5[\"catch\"](18);\n\n                          _iterator7.e(_context5.t1);\n\n                        case 32:\n                          _context5.prev = 32;\n\n                          _iterator7.f();\n\n                          return _context5.finish(32);\n\n                        case 35:\n                          txList.promote(promotableTransactions.filter(function (tx) {\n                            return successfulTransactionIds.includes(tx.id);\n                          }));\n                          invalidTransaction = firstInvalidTransaction && firstInvalidTransaction.status === types_1.TransactionStatus.INVALID ? allTransactions.find(function (tx) {\n                            return tx.id.equals(firstInvalidTransaction === null || firstInvalidTransaction === void 0 ? void 0 : firstInvalidTransaction.id);\n                          }) : undefined;\n\n                          if (invalidTransaction) {\n                            _iterator8 = _createForOfIteratorHelper(allTransactions);\n\n                            try {\n                              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                                tx = _step8.value;\n\n                                if (tx.nonce >= invalidTransaction.nonce) {\n                                  _this2.events.emit(exports.events.EVENT_TRANSACTION_REMOVED, {\n                                    id: tx.id,\n                                    nonce: tx.nonce.toString(),\n                                    senderPublicKey: tx.senderPublicKey,\n                                    reason: \"Invalid transaction \".concat(invalidTransaction.id.toString('binary'))\n                                  });\n\n                                  _this2.remove(tx);\n                                }\n                              }\n                            } catch (err) {\n                              _iterator8.e(err);\n                            } finally {\n                              _iterator8.f();\n                            }\n                          }\n\n                        case 38:\n                        case \"end\":\n                          return _context5.stop();\n                      }\n                    }\n                  }, _loop, null, [[7, 12], [18, 29, 32, 35]]);\n                });\n\n                _iterator6.s();\n\n              case 4:\n                if ((_step6 = _iterator6.n()).done) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                return _context6.delegateYield(_loop(), \"t0\", 6);\n\n              case 6:\n                _ret = _context6.t0;\n\n                if (!(_ret === \"continue\")) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                return _context6.abrupt(\"continue\", 9);\n\n              case 9:\n                _context6.next = 4;\n                break;\n\n              case 11:\n                _context6.next = 16;\n                break;\n\n              case 13:\n                _context6.prev = 13;\n                _context6.t1 = _context6[\"catch\"](1);\n\n                _iterator6.e(_context6.t1);\n\n              case 16:\n                _context6.prev = 16;\n\n                _iterator6.f();\n\n                return _context6.finish(16);\n\n              case 19:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee5, this, [[1, 13, 16, 19]]);\n      }));\n\n      function _reorganize() {\n        return _reorganize2.apply(this, arguments);\n      }\n\n      return _reorganize;\n    }()\n  }, {\n    key: \"_expire\",\n    value: function () {\n      var _expire2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _iterator9, _step9, transaction, timeDifference;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _iterator9 = _createForOfIteratorHelper(this._allTransactions.values());\n\n                try {\n                  for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n                    transaction = _step9.value;\n                    timeDifference = Math.round(Math.abs(transaction.receivedAt.getTime() - new Date().getTime()));\n\n                    if (timeDifference > this._transactionExpiryTime) {\n                      this.events.emit(exports.events.EVENT_TRANSACTION_REMOVED, {\n                        id: transaction.id,\n                        nonce: transaction.nonce.toString(),\n                        senderPublicKey: transaction.senderPublicKey,\n                        reason: 'Transaction exceeded the expiry time'\n                      });\n                      this.remove(transaction);\n                    }\n                  }\n                } catch (err) {\n                  _iterator9.e(err);\n                } finally {\n                  _iterator9.f();\n                }\n\n              case 2:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _expire() {\n        return _expire2.apply(this, arguments);\n      }\n\n      return _expire;\n    }()\n  }]);\n\n  return TransactionPool;\n}();\n\nexports.TransactionPool = TransactionPool;","map":{"version":3,"sources":["../src/transaction_pool.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TransactionPool = exports.events = exports.DEFAULT_REORGANIZE_TIME = exports.DEFAULT_MINIMUM_REPLACEMENT_FEE_DIFFERENCE = exports.DEFAULT_EXPIRE_INTERVAL = exports.DEFAULT_EXPIRY_TIME = exports.DEFAULT_MIN_ENTRANCE_FEE_PRIORITY = exports.DEFAULT_MAX_TRANSACTIONS_PER_ACCOUNT = exports.DEFAULT_MAX_TRANSACTIONS = void 0;\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst createDebug = require(\"debug\");\nconst events_1 = require(\"events\");\nconst lisk_utils_1 = require(\"@liskhq/lisk-utils\");\nconst errors_1 = require(\"./errors\");\nconst job_1 = require(\"./job\");\nconst transaction_list_1 = require(\"./transaction_list\");\nconst types_1 = require(\"./types\");\nconst debug = createDebug('lisk:transaction_pool');\nexports.DEFAULT_MAX_TRANSACTIONS = 4096;\nexports.DEFAULT_MAX_TRANSACTIONS_PER_ACCOUNT = 64;\nexports.DEFAULT_MIN_ENTRANCE_FEE_PRIORITY = BigInt(0);\nexports.DEFAULT_EXPIRY_TIME = 3 * 60 * 60 * 1000;\nexports.DEFAULT_EXPIRE_INTERVAL = 60 * 60 * 1000;\nexports.DEFAULT_MINIMUM_REPLACEMENT_FEE_DIFFERENCE = BigInt(10);\nexports.DEFAULT_REORGANIZE_TIME = 500;\nexports.events = {\n    EVENT_TRANSACTION_REMOVED: 'EVENT_TRANSACTION_REMOVED',\n};\nconst ERR_NONCE_OUT_OF_BOUNDS_CODE = 'ERR_NONCE_OUT_OF_BOUNDS';\nconst ERR_TRANSACTION_VERIFICATION_FAIL = 'ERR_TRANSACTION_VERIFICATION_FAIL';\nclass TransactionPool {\n    constructor(config) {\n        var _a, _b, _c, _d, _e, _f;\n        this.events = new events_1.EventEmitter();\n        this._feePriorityQueue = new lisk_utils_1.dataStructures.MinHeap();\n        this._allTransactions = new lisk_utils_1.dataStructures.BufferMap();\n        this._transactionList = new lisk_utils_1.dataStructures.BufferMap();\n        this._applyFunction = config.applyTransactions;\n        this._maxTransactions = (_a = config.maxTransactions) !== null && _a !== void 0 ? _a : exports.DEFAULT_MAX_TRANSACTIONS;\n        this._maxTransactionsPerAccount =\n            (_b = config.maxTransactionsPerAccount) !== null && _b !== void 0 ? _b : exports.DEFAULT_MAX_TRANSACTIONS_PER_ACCOUNT;\n        this._transactionExpiryTime = (_c = config.transactionExpiryTime) !== null && _c !== void 0 ? _c : exports.DEFAULT_EXPIRY_TIME;\n        this._minEntranceFeePriority =\n            (_d = config.minEntranceFeePriority) !== null && _d !== void 0 ? _d : exports.DEFAULT_MIN_ENTRANCE_FEE_PRIORITY;\n        this._transactionReorganizationInterval =\n            (_e = config.transactionReorganizationInterval) !== null && _e !== void 0 ? _e : exports.DEFAULT_REORGANIZE_TIME;\n        this._minReplacementFeeDifference =\n            (_f = config.minReplacementFeeDifference) !== null && _f !== void 0 ? _f : exports.DEFAULT_MINIMUM_REPLACEMENT_FEE_DIFFERENCE;\n        this._baseFees = config.baseFees;\n        this._minFeePerByte = config.minFeePerByte;\n        this._reorganizeJob = new job_1.Job(async () => this._reorganize(), this._transactionReorganizationInterval);\n        this._expireJob = new job_1.Job(async () => this._expire(), exports.DEFAULT_EXPIRE_INTERVAL);\n    }\n    async start() {\n        this._reorganizeJob.start();\n        this._expireJob.start();\n    }\n    stop() {\n        this._reorganizeJob.stop();\n        this._expireJob.stop();\n    }\n    getAll() {\n        return this._allTransactions.values();\n    }\n    get(id) {\n        return this._allTransactions.get(id);\n    }\n    contains(id) {\n        return this._allTransactions.has(id);\n    }\n    async add(incomingTx) {\n        if (this._allTransactions.has(incomingTx.id)) {\n            debug('Received duplicate transaction', incomingTx.id);\n            return { status: types_1.Status.OK };\n        }\n        incomingTx.feePriority = this._calculateFeePriority(incomingTx);\n        if (incomingTx.feePriority < this._minEntranceFeePriority) {\n            const error = new errors_1.TransactionPoolError('Rejecting transaction due to failed minimum entrance fee priority requirement.', incomingTx.id, '.fee', incomingTx.feePriority.toString(), this._minEntranceFeePriority.toString());\n            return { status: types_1.Status.FAIL, error };\n        }\n        const lowestFeePriorityTrx = this._feePriorityQueue.peek();\n        if (this._allTransactions.size >= this._maxTransactions &&\n            lowestFeePriorityTrx &&\n            incomingTx.feePriority <= lowestFeePriorityTrx.key) {\n            const error = new errors_1.TransactionPoolError('Rejecting transaction due to fee priority when the pool is full.', incomingTx.id, '.fee', incomingTx.feePriority.toString(), lowestFeePriorityTrx.key.toString());\n            return { status: types_1.Status.FAIL, error };\n        }\n        const incomingTxAddress = lisk_cryptography_1.getAddressFromPublicKey(incomingTx.senderPublicKey);\n        let txStatus;\n        try {\n            await this._applyFunction([incomingTx]);\n            txStatus = types_1.TransactionStatus.PROCESSABLE;\n        }\n        catch (err) {\n            txStatus = this._getStatus(err);\n            if (txStatus === types_1.TransactionStatus.INVALID) {\n                return {\n                    status: types_1.Status.FAIL,\n                    error: err,\n                };\n            }\n        }\n        const exceededTransactionsCount = this._allTransactions.size - this._maxTransactions;\n        if (exceededTransactionsCount >= 0) {\n            const isEvicted = this._evictUnprocessable();\n            if (!isEvicted) {\n                this._evictProcessable();\n            }\n        }\n        if (!this._transactionList.has(incomingTxAddress)) {\n            this._transactionList.set(incomingTxAddress, new transaction_list_1.TransactionList(incomingTxAddress, {\n                maxSize: this._maxTransactionsPerAccount,\n                minReplacementFeeDifference: this._minReplacementFeeDifference,\n            }));\n        }\n        const { added, removedID, reason } = this._transactionList.get(incomingTxAddress).add(incomingTx, txStatus === types_1.TransactionStatus.PROCESSABLE);\n        if (!added) {\n            return {\n                status: types_1.Status.FAIL,\n                error: new errors_1.TransactionPoolError(reason, incomingTx.id),\n            };\n        }\n        if (removedID) {\n            debug('Removing from transaction pool with id', removedID);\n            const removedTx = this._allTransactions.get(removedID);\n            this._allTransactions.delete(removedID);\n            this.events.emit(exports.events.EVENT_TRANSACTION_REMOVED, {\n                id: removedTx.id,\n                nonce: removedTx.nonce.toString(),\n                senderPublicKey: removedTx.senderPublicKey,\n                reason: 'Transaction List executed remove',\n            });\n        }\n        incomingTx.receivedAt = new Date();\n        this._allTransactions.set(incomingTx.id, incomingTx);\n        this._feePriorityQueue.push(this._calculateFeePriority(incomingTx), incomingTx.id);\n        return { status: types_1.Status.OK };\n    }\n    remove(tx) {\n        var _a;\n        const foundTx = this._allTransactions.get(tx.id);\n        if (!foundTx) {\n            return false;\n        }\n        this._allTransactions.delete(tx.id);\n        debug('Removing from transaction pool with id', tx.id);\n        const senderId = lisk_cryptography_1.getAddressFromPublicKey(foundTx.senderPublicKey);\n        this._transactionList.get(senderId).remove(tx.nonce);\n        if (this._transactionList.get(senderId).size === 0) {\n            this._transactionList.delete(senderId);\n        }\n        this._feePriorityQueue.clear();\n        for (const txObject of this.getAll()) {\n            this._feePriorityQueue.push((_a = txObject.feePriority) !== null && _a !== void 0 ? _a : this._calculateFeePriority(txObject), txObject.id);\n        }\n        return true;\n    }\n    getProcessableTransactions() {\n        const processableTransactions = new lisk_utils_1.dataStructures.BufferMap();\n        for (const list of this._transactionList.values()) {\n            const transactions = list.getProcessable();\n            if (transactions.length !== 0) {\n                processableTransactions.set(list.address, [...transactions]);\n            }\n        }\n        return processableTransactions;\n    }\n    _calculateFeePriority(trx) {\n        return (trx.fee - this._calculateMinFee(trx)) / BigInt(trx.getBytes().length);\n    }\n    _calculateMinFee(trx) {\n        var _a;\n        const foundBaseFee = this._baseFees.find(f => f.moduleID === trx.moduleID && f.assetID === trx.assetID);\n        return (BigInt((_a = foundBaseFee === null || foundBaseFee === void 0 ? void 0 : foundBaseFee.baseFee) !== null && _a !== void 0 ? _a : BigInt(0)) +\n            BigInt(this._minFeePerByte * trx.getBytes().length));\n    }\n    _getStatus(errorResponse) {\n        if (errorResponse.code === ERR_TRANSACTION_VERIFICATION_FAIL &&\n            errorResponse.transactionError.code === ERR_NONCE_OUT_OF_BOUNDS_CODE) {\n            debug('Received UNPROCESSABLE transaction');\n            return types_1.TransactionStatus.UNPROCESSABLE;\n        }\n        debug('Received INVALID transaction');\n        return types_1.TransactionStatus.INVALID;\n    }\n    _evictUnprocessable() {\n        const unprocessableFeePriorityHeap = new lisk_utils_1.dataStructures.MinHeap();\n        for (const txList of this._transactionList.values()) {\n            const unprocessableTransactions = txList.getUnprocessable();\n            for (const unprocessableTx of unprocessableTransactions) {\n                unprocessableFeePriorityHeap.push(unprocessableTx.feePriority, unprocessableTx);\n            }\n        }\n        if (unprocessableFeePriorityHeap.count < 1) {\n            return false;\n        }\n        const evictedTransaction = unprocessableFeePriorityHeap.pop();\n        if (!evictedTransaction) {\n            return false;\n        }\n        this.events.emit(exports.events.EVENT_TRANSACTION_REMOVED, {\n            id: evictedTransaction.value.id,\n            nonce: evictedTransaction.value.nonce.toString(),\n            senderPublicKey: evictedTransaction.value.senderPublicKey,\n            reason: 'Pool exceeded the size limit',\n        });\n        return this.remove(evictedTransaction.value);\n    }\n    _evictProcessable() {\n        const processableFeePriorityHeap = new lisk_utils_1.dataStructures.MinHeap();\n        for (const txList of this._transactionList.values()) {\n            const processableTransactions = txList.getProcessable();\n            if (processableTransactions.length) {\n                const processableTransactionWithHighestNonce = processableTransactions[processableTransactions.length - 1];\n                processableFeePriorityHeap.push(processableTransactionWithHighestNonce.feePriority, processableTransactionWithHighestNonce);\n            }\n        }\n        if (processableFeePriorityHeap.count < 1) {\n            return false;\n        }\n        const evictedTransaction = processableFeePriorityHeap.pop();\n        if (!evictedTransaction) {\n            return false;\n        }\n        this.events.emit(exports.events.EVENT_TRANSACTION_REMOVED, {\n            id: evictedTransaction.value.id,\n            nonce: evictedTransaction.value.nonce.toString(),\n            senderPublicKey: evictedTransaction.value.senderPublicKey,\n            reason: 'Pool exceeded the size limit',\n        });\n        return this.remove(evictedTransaction.value);\n    }\n    async _reorganize() {\n        for (const txList of this._transactionList.values()) {\n            const promotableTransactions = txList.getPromotable();\n            if (!promotableTransactions.length) {\n                continue;\n            }\n            const processableTransactions = txList.getProcessable();\n            const allTransactions = [...processableTransactions, ...promotableTransactions];\n            let firstInvalidTransaction;\n            try {\n                await this._applyFunction(allTransactions);\n            }\n            catch (error) {\n                const failedStatus = this._getStatus(error);\n                firstInvalidTransaction = {\n                    id: error.id,\n                    status: failedStatus,\n                };\n            }\n            const successfulTransactionIds = [];\n            for (const tx of allTransactions) {\n                if (firstInvalidTransaction && tx.id.equals(firstInvalidTransaction.id)) {\n                    break;\n                }\n                successfulTransactionIds.push(tx.id);\n            }\n            txList.promote(promotableTransactions.filter(tx => successfulTransactionIds.includes(tx.id)));\n            const invalidTransaction = firstInvalidTransaction && firstInvalidTransaction.status === types_1.TransactionStatus.INVALID\n                ? allTransactions.find(tx => tx.id.equals(firstInvalidTransaction === null || firstInvalidTransaction === void 0 ? void 0 : firstInvalidTransaction.id))\n                : undefined;\n            if (invalidTransaction) {\n                for (const tx of allTransactions) {\n                    if (tx.nonce >= invalidTransaction.nonce) {\n                        this.events.emit(exports.events.EVENT_TRANSACTION_REMOVED, {\n                            id: tx.id,\n                            nonce: tx.nonce.toString(),\n                            senderPublicKey: tx.senderPublicKey,\n                            reason: `Invalid transaction ${invalidTransaction.id.toString('binary')}`,\n                        });\n                        this.remove(tx);\n                    }\n                }\n            }\n        }\n    }\n    async _expire() {\n        for (const transaction of this._allTransactions.values()) {\n            const timeDifference = Math.round(Math.abs(transaction.receivedAt.getTime() - new Date().getTime()));\n            if (timeDifference > this._transactionExpiryTime) {\n                this.events.emit(exports.events.EVENT_TRANSACTION_REMOVED, {\n                    id: transaction.id,\n                    nonce: transaction.nonce.toString(),\n                    senderPublicKey: transaction.senderPublicKey,\n                    reason: 'Transaction exceeded the expiry time',\n                });\n                this.remove(transaction);\n            }\n        }\n    }\n}\nexports.TransactionPool = TransactionPool;\n//# sourceMappingURL=transaction_pool.js.map"]},"metadata":{},"sourceType":"script"}