{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChainStateStore = void 0;\n\nvar constants_1 = require(\"../data_access/constants\");\n\nvar ChainStateStore = /*#__PURE__*/function () {\n  function ChainStateStore(dataAccess, additionalInformation) {\n    _classCallCheck(this, ChainStateStore);\n\n    this._name = 'ChainState';\n    this._dataAccess = dataAccess;\n    this._lastBlockHeaders = additionalInformation.lastBlockHeaders;\n    this._networkIdentifier = additionalInformation.networkIdentifier;\n    this._lastBlockReward = additionalInformation.lastBlockReward;\n    this._data = {};\n    this._originalData = {};\n    this._initialValue = {};\n    this._updatedKeys = new Set();\n    this._originalUpdatedKeys = new Set();\n  }\n\n  _createClass(ChainStateStore, [{\n    key: \"networkIdentifier\",\n    get: function get() {\n      return this._networkIdentifier;\n    }\n  }, {\n    key: \"lastBlockHeaders\",\n    get: function get() {\n      return this._lastBlockHeaders;\n    }\n  }, {\n    key: \"lastBlockReward\",\n    get: function get() {\n      return this._lastBlockReward;\n    }\n  }, {\n    key: \"createSnapshot\",\n    value: function createSnapshot() {\n      this._originalData = _objectSpread({}, this._data);\n      this._originalUpdatedKeys = new Set(this._updatedKeys);\n    }\n  }, {\n    key: \"restoreSnapshot\",\n    value: function restoreSnapshot() {\n      this._data = _objectSpread({}, this._originalData);\n      this._updatedKeys = new Set(this._originalUpdatedKeys);\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key) {\n        var value, dbValue;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                value = this._data[key];\n\n                if (!value) {\n                  _context.next = 3;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", value);\n\n              case 3:\n                _context.next = 5;\n                return this._dataAccess.getChainState(key);\n\n              case 5:\n                dbValue = _context.sent;\n\n                if (!(dbValue === undefined)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", dbValue);\n\n              case 8:\n                this._initialValue[key] = dbValue;\n                this._data[key] = dbValue;\n                return _context.abrupt(\"return\", this._data[key]);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"getOrDefault\",\n    value: function getOrDefault() {\n      throw new Error(\"getOrDefault cannot be called for \".concat(this._name));\n    }\n  }, {\n    key: \"find\",\n    value: function find() {\n      throw new Error(\"getOrDefault cannot be called for \".concat(this._name));\n    }\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key, value) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this._data[key] = value;\n\n                this._updatedKeys.add(key);\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function set(_x2, _x3) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n  }, {\n    key: \"finalize\",\n    value: function finalize(batch) {\n      var stateDiff = {\n        updated: [],\n        created: [],\n        deleted: []\n      };\n\n      if (this._updatedKeys.size === 0) {\n        return stateDiff;\n      }\n\n      for (var _i = 0, _Array$from = Array.from(this._updatedKeys); _i < _Array$from.length; _i++) {\n        var key = _Array$from[_i];\n        var dbKey = \"\".concat(constants_1.DB_KEY_CHAIN_STATE, \":\").concat(key);\n        var updatedValue = this._data[key];\n        batch.put(dbKey, updatedValue);\n        var initialValue = this._initialValue[key];\n\n        if (initialValue !== undefined && !initialValue.equals(updatedValue)) {\n          stateDiff.updated.push({\n            key: dbKey,\n            value: initialValue\n          });\n        } else if (initialValue === undefined) {\n          stateDiff.created.push(dbKey);\n        }\n      }\n\n      return stateDiff;\n    }\n  }]);\n\n  return ChainStateStore;\n}();\n\nexports.ChainStateStore = ChainStateStore;","map":{"version":3,"sources":["../../src/state_store/chain_state_store.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChainStateStore = void 0;\nconst constants_1 = require(\"../data_access/constants\");\nclass ChainStateStore {\n    constructor(dataAccess, additionalInformation) {\n        this._name = 'ChainState';\n        this._dataAccess = dataAccess;\n        this._lastBlockHeaders = additionalInformation.lastBlockHeaders;\n        this._networkIdentifier = additionalInformation.networkIdentifier;\n        this._lastBlockReward = additionalInformation.lastBlockReward;\n        this._data = {};\n        this._originalData = {};\n        this._initialValue = {};\n        this._updatedKeys = new Set();\n        this._originalUpdatedKeys = new Set();\n    }\n    get networkIdentifier() {\n        return this._networkIdentifier;\n    }\n    get lastBlockHeaders() {\n        return this._lastBlockHeaders;\n    }\n    get lastBlockReward() {\n        return this._lastBlockReward;\n    }\n    createSnapshot() {\n        this._originalData = { ...this._data };\n        this._originalUpdatedKeys = new Set(this._updatedKeys);\n    }\n    restoreSnapshot() {\n        this._data = { ...this._originalData };\n        this._updatedKeys = new Set(this._originalUpdatedKeys);\n    }\n    async get(key) {\n        const value = this._data[key];\n        if (value) {\n            return value;\n        }\n        const dbValue = await this._dataAccess.getChainState(key);\n        if (dbValue === undefined) {\n            return dbValue;\n        }\n        this._initialValue[key] = dbValue;\n        this._data[key] = dbValue;\n        return this._data[key];\n    }\n    getOrDefault() {\n        throw new Error(`getOrDefault cannot be called for ${this._name}`);\n    }\n    find() {\n        throw new Error(`getOrDefault cannot be called for ${this._name}`);\n    }\n    async set(key, value) {\n        this._data[key] = value;\n        this._updatedKeys.add(key);\n    }\n    finalize(batch) {\n        const stateDiff = { updated: [], created: [], deleted: [] };\n        if (this._updatedKeys.size === 0) {\n            return stateDiff;\n        }\n        for (const key of Array.from(this._updatedKeys)) {\n            const dbKey = `${constants_1.DB_KEY_CHAIN_STATE}:${key}`;\n            const updatedValue = this._data[key];\n            batch.put(dbKey, updatedValue);\n            const initialValue = this._initialValue[key];\n            if (initialValue !== undefined && !initialValue.equals(updatedValue)) {\n                stateDiff.updated.push({\n                    key: dbKey,\n                    value: initialValue,\n                });\n            }\n            else if (initialValue === undefined) {\n                stateDiff.created.push(dbKey);\n            }\n        }\n        return stateDiff;\n    }\n}\nexports.ChainStateStore = ChainStateStore;\n//# sourceMappingURL=chain_state_store.js.map"]},"metadata":{},"sourceType":"script"}