{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getData = void 0;\n\nvar blocks_1 = require(\"./blocks\");\n\nvar transactions_1 = require(\"./transactions\");\n\nvar PROMETHEUS_TYPE;\n\n(function (PROMETHEUS_TYPE) {\n  PROMETHEUS_TYPE[\"gauge\"] = \"gauge\";\n  PROMETHEUS_TYPE[\"counter\"] = \"counter\";\n  PROMETHEUS_TYPE[\"histogram\"] = \"histogram\";\n})(PROMETHEUS_TYPE || (PROMETHEUS_TYPE = {}));\n\nvar prometheusExporter = function prometheusExporter(data) {\n  var exportData = '';\n\n  var _iterator = _createForOfIteratorHelper(data),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var param = _step.value;\n      exportData += \"# HELP \".concat(param.metric, \" \").concat(param.label, \"\\n# TYPE \").concat(param.metric, \" \").concat(param.type, \"\\n\").concat(param.values.reduce(function (val, el) {\n        val += \"\".concat(param.metric).concat(el.key, \" \").concat(el.value, \"\\n\");\n        return val;\n      }, ''), \"\\n\");\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return exportData;\n};\n\nvar getData = function getData(channel, state) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_req, res, next) {\n      var connectedPeers, disconnectedPeers, nodeInfo, blockStats, transactionStats, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return channel.invoke('app:getConnectedPeers');\n\n            case 3:\n              connectedPeers = _context.sent;\n              _context.next = 6;\n              return channel.invoke('app:getDisconnectedPeers');\n\n            case 6:\n              disconnectedPeers = _context.sent;\n              _context.next = 9;\n              return channel.invoke('app:getNodeInfo');\n\n            case 9:\n              nodeInfo = _context.sent;\n              _context.next = 12;\n              return blocks_1.getBlockStats(channel, state);\n\n            case 12:\n              blockStats = _context.sent;\n              _context.next = 15;\n              return transactions_1.getTransactionStats(channel, state);\n\n            case 15:\n              transactionStats = _context.sent;\n              data = [{\n                label: 'Average number of times blocks received',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_avg_times_blocks_received_info',\n                values: [{\n                  key: '',\n                  value: blockStats.averageReceivedBlocks\n                }]\n              }, {\n                label: 'Average number of times transactions received',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_avg_times_transactions_received_info',\n                values: [{\n                  key: '',\n                  value: transactionStats.averageReceivedTransactions\n                }]\n              }, {\n                label: 'Node Height',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_node_height_total',\n                values: [{\n                  key: '',\n                  value: nodeInfo.height\n                }]\n              }, {\n                label: 'Finalized Height',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_finalized_height_total',\n                values: [{\n                  key: '',\n                  value: nodeInfo.finalizedHeight\n                }]\n              }, {\n                label: 'Unconfirmed transactions',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_unconfirmed_transactions_total',\n                values: [{\n                  key: '',\n                  value: nodeInfo.unconfirmedTransactions\n                }]\n              }, {\n                label: 'Total number of peers',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_peers_total',\n                values: [{\n                  key: '{state=\"connected\"}',\n                  value: connectedPeers.length\n                }, {\n                  key: '{state=\"disconnected\"}',\n                  value: disconnectedPeers.length\n                }]\n              }, {\n                label: 'Fork events',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_fork_events_total',\n                values: [{\n                  key: '',\n                  value: state.forks.forkEventCount\n                }]\n              }];\n              res.set('Content-Type', 'text/plain');\n              res.status(200).send(prometheusExporter(data));\n              _context.next = 24;\n              break;\n\n            case 21:\n              _context.prev = 21;\n              _context.t0 = _context[\"catch\"](0);\n              next(_context.t0);\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 21]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexports.getData = getData;","map":{"version":3,"sources":["../../src/controllers/prometheus.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getData = void 0;\nconst blocks_1 = require(\"./blocks\");\nconst transactions_1 = require(\"./transactions\");\nvar PROMETHEUS_TYPE;\n(function (PROMETHEUS_TYPE) {\n    PROMETHEUS_TYPE[\"gauge\"] = \"gauge\";\n    PROMETHEUS_TYPE[\"counter\"] = \"counter\";\n    PROMETHEUS_TYPE[\"histogram\"] = \"histogram\";\n})(PROMETHEUS_TYPE || (PROMETHEUS_TYPE = {}));\nconst prometheusExporter = (data) => {\n    let exportData = '';\n    for (const param of data) {\n        exportData += `# HELP ${param.metric} ${param.label}\\n# TYPE ${param.metric} ${param.type}\\n${param.values.reduce((val, el) => {\n            val += `${param.metric}${el.key} ${el.value}\\n`;\n            return val;\n        }, '')}\\n`;\n    }\n    return exportData;\n};\nconst getData = (channel, state) => async (_req, res, next) => {\n    try {\n        const connectedPeers = await channel.invoke('app:getConnectedPeers');\n        const disconnectedPeers = await channel.invoke('app:getDisconnectedPeers');\n        const nodeInfo = await channel.invoke('app:getNodeInfo');\n        const blockStats = await blocks_1.getBlockStats(channel, state);\n        const transactionStats = await transactions_1.getTransactionStats(channel, state);\n        const data = [\n            {\n                label: 'Average number of times blocks received',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_avg_times_blocks_received_info',\n                values: [\n                    {\n                        key: '',\n                        value: blockStats.averageReceivedBlocks,\n                    },\n                ],\n            },\n            {\n                label: 'Average number of times transactions received',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_avg_times_transactions_received_info',\n                values: [\n                    {\n                        key: '',\n                        value: transactionStats.averageReceivedTransactions,\n                    },\n                ],\n            },\n            {\n                label: 'Node Height',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_node_height_total',\n                values: [\n                    {\n                        key: '',\n                        value: nodeInfo.height,\n                    },\n                ],\n            },\n            {\n                label: 'Finalized Height',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_finalized_height_total',\n                values: [\n                    {\n                        key: '',\n                        value: nodeInfo.finalizedHeight,\n                    },\n                ],\n            },\n            {\n                label: 'Unconfirmed transactions',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_unconfirmed_transactions_total',\n                values: [\n                    {\n                        key: '',\n                        value: nodeInfo.unconfirmedTransactions,\n                    },\n                ],\n            },\n            {\n                label: 'Total number of peers',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_peers_total',\n                values: [\n                    {\n                        key: '{state=\"connected\"}',\n                        value: connectedPeers.length,\n                    },\n                    {\n                        key: '{state=\"disconnected\"}',\n                        value: disconnectedPeers.length,\n                    },\n                ],\n            },\n            {\n                label: 'Fork events',\n                type: PROMETHEUS_TYPE.gauge,\n                metric: 'lisk_fork_events_total',\n                values: [\n                    {\n                        key: '',\n                        value: state.forks.forkEventCount,\n                    },\n                ],\n            },\n        ];\n        res.set('Content-Type', 'text/plain');\n        res.status(200).send(prometheusExporter(data));\n    }\n    catch (err) {\n        next(err);\n    }\n};\nexports.getData = getData;\n//# sourceMappingURL=prometheus.js.map"]},"metadata":{},"sourceType":"script"}