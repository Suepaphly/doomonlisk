{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TriedList = void 0;\n\nvar constants_1 = require(\"../constants\");\n\nvar utils_1 = require(\"../utils\");\n\nvar base_list_1 = require(\"./base_list\");\n\nvar TriedList = /*#__PURE__*/function (_base_list_1$BaseList) {\n  _inherits(TriedList, _base_list_1$BaseList);\n\n  var _super = _createSuper(TriedList);\n\n  function TriedList(_ref) {\n    var _this;\n\n    var numOfBuckets = _ref.numOfBuckets,\n        bucketSize = _ref.bucketSize,\n        maxReconnectTries = _ref.maxReconnectTries,\n        secret = _ref.secret,\n        peerType = _ref.peerType;\n\n    _classCallCheck(this, TriedList);\n\n    _this = _super.call(this, {\n      secret: secret,\n      numOfBuckets: numOfBuckets,\n      bucketSize: bucketSize,\n      peerType: peerType\n    });\n    _this.type = utils_1.PEER_TYPE.TRIED_PEER;\n    _this._maxReconnectTries = maxReconnectTries !== null && maxReconnectTries !== void 0 ? maxReconnectTries : constants_1.DEFAULT_MAX_RECONNECT_TRIES;\n    return _this;\n  }\n\n  _createClass(TriedList, [{\n    key: \"triedPeerConfig\",\n    get: function get() {\n      return _objectSpread(_objectSpread({}, this.peerListConfig), {}, {\n        maxReconnectTries: this._maxReconnectTries\n      });\n    }\n  }, {\n    key: \"failedConnectionAction\",\n    value: function failedConnectionAction(incomingPeerInfo) {\n      var _this$calculateBucket = this.calculateBucket(incomingPeerInfo.ipAddress),\n          bucket = _this$calculateBucket.bucket;\n\n      var incomingPeerId = incomingPeerInfo.peerId;\n      var foundPeer = bucket.get(incomingPeerId);\n\n      if (!foundPeer) {\n        return false;\n      }\n\n      var numOfConnectionFailures = foundPeer.numOfConnectionFailures;\n\n      if (numOfConnectionFailures + 1 >= this._maxReconnectTries) {\n        var removedFromBucket = bucket.delete(incomingPeerId);\n        var removedFromPeerLookup = this.peerIdToPeerInfo.delete(incomingPeerId);\n        return removedFromBucket && removedFromPeerLookup;\n      }\n\n      var updatedTriedPeerInfo = _objectSpread(_objectSpread({}, foundPeer), {}, {\n        numOfConnectionFailures: numOfConnectionFailures + 1\n      });\n\n      bucket.set(incomingPeerId, updatedTriedPeerInfo);\n      return false;\n    }\n  }]);\n\n  return TriedList;\n}(base_list_1.BaseList);\n\nexports.TriedList = TriedList;","map":{"version":3,"sources":["../../src/peer_book/tried_list.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAcA,IAAA,WAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAIA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;IAMa,S;;;;;AAGZ,2BAMkB;AAAA;;AAAA,QALjB,YAKiB,QALjB,YAKiB;AAAA,QAJjB,UAIiB,QAJjB,UAIiB;AAAA,QAHjB,iBAGiB,QAHjB,iBAGiB;AAAA,QAFjB,MAEiB,QAFjB,MAEiB;AAAA,QADjB,QACiB,QADjB,QACiB;;AAAA;;AACjB,8BAAM;AACL,MAAA,MAAM,EAAN,MADK;AAEL,MAAA,YAAY,EAAZ,YAFK;AAGL,MAAA,UAAU,EAAV,UAHK;AAIL,MAAA,QAAQ,EAAR;AAJK,KAAN;AAMA,UAAK,IAAL,GAAY,OAAA,CAAA,SAAA,CAAU,UAAtB;AACA,UAAK,kBAAL,GAA0B,iBAAiB,KAAA,IAAjB,IAAA,iBAAiB,KAAA,KAAA,CAAjB,GAAA,iBAAA,GAAqB,WAAA,CAAA,2BAA/C;AARiB;AASjB;;;;SAED,eAA0B;AACzB,6CACI,KAAK,cADT;AAEC,QAAA,iBAAiB,EAAE,KAAK;AAFzB;AAIA;;;WAEM,gCAAuB,gBAAvB,EAAoD;AAE1D,kCAAmB,KAAK,eAAL,CAAqB,gBAAgB,CAAC,SAAtC,CAAnB;AAAA,UAAQ,MAAR,yBAAQ,MAAR;;AACA,UAAM,cAAc,GAAG,gBAAgB,CAAC,MAAxC;AACA,UAAM,SAAS,GAAG,MAAM,CAAC,GAAP,CAAW,cAAX,CAAlB;;AACA,UAAI,CAAC,SAAL,EAAgB;AACf,eAAO,KAAP;AACA;;AACD,UAAQ,uBAAR,GAAoC,SAApC,CAAQ,uBAAR;;AAEA,UAAK,uBAAkC,GAAG,CAArC,IAA0C,KAAK,kBAApD,EAAwE;AACvE,YAAM,iBAAiB,GAAG,MAAM,CAAC,MAAP,CAAc,cAAd,CAA1B;AACA,YAAM,qBAAqB,GAAG,KAAK,gBAAL,CAAsB,MAAtB,CAA6B,cAA7B,CAA9B;AAEA,eAAO,iBAAiB,IAAI,qBAA5B;AACA;;AACD,UAAM,oBAAoB,mCACtB,SADsB;AAEzB,QAAA,uBAAuB,EAAG,uBAAkC,GAAG;AAFtC,QAA1B;;AAKA,MAAA,MAAM,CAAC,GAAP,CAAW,cAAX,EAA2B,oBAA3B;AAEA,aAAO,KAAP;AACA;;;;EAnD6B,WAAA,CAAA,Q;;AAA/B,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TriedList = void 0;\nconst constants_1 = require(\"../constants\");\nconst utils_1 = require(\"../utils\");\nconst base_list_1 = require(\"./base_list\");\nclass TriedList extends base_list_1.BaseList {\n    constructor({ numOfBuckets, bucketSize, maxReconnectTries, secret, peerType, }) {\n        super({\n            secret,\n            numOfBuckets,\n            bucketSize,\n            peerType,\n        });\n        this.type = utils_1.PEER_TYPE.TRIED_PEER;\n        this._maxReconnectTries = maxReconnectTries !== null && maxReconnectTries !== void 0 ? maxReconnectTries : constants_1.DEFAULT_MAX_RECONNECT_TRIES;\n    }\n    get triedPeerConfig() {\n        return {\n            ...this.peerListConfig,\n            maxReconnectTries: this._maxReconnectTries,\n        };\n    }\n    failedConnectionAction(incomingPeerInfo) {\n        const { bucket } = this.calculateBucket(incomingPeerInfo.ipAddress);\n        const incomingPeerId = incomingPeerInfo.peerId;\n        const foundPeer = bucket.get(incomingPeerId);\n        if (!foundPeer) {\n            return false;\n        }\n        const { numOfConnectionFailures } = foundPeer;\n        if (numOfConnectionFailures + 1 >= this._maxReconnectTries) {\n            const removedFromBucket = bucket.delete(incomingPeerId);\n            const removedFromPeerLookup = this.peerIdToPeerInfo.delete(incomingPeerId);\n            return removedFromBucket && removedFromPeerLookup;\n        }\n        const updatedTriedPeerInfo = {\n            ...foundPeer,\n            numOfConnectionFailures: numOfConnectionFailures + 1,\n        };\n        bucket.set(incomingPeerId, updatedTriedPeerInfo);\n        return false;\n    }\n}\nexports.TriedList = TriedList;\n//# sourceMappingURL=tried_list.js.map"]},"metadata":{},"sourceType":"script"}