{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAccount = void 0;\n\nvar lisk_validator_1 = require(\"@liskhq/lisk-validator\");\n\nvar getAccount = function getAccount(channel, codec) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res, next) {\n      var accountAddress, account;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              accountAddress = req.params.address;\n\n              if (lisk_validator_1.isHexString(accountAddress)) {\n                _context.next = 4;\n                break;\n              }\n\n              res.status(400).send({\n                errors: [{\n                  message: 'The Address parameter should be a hex string.'\n                }]\n              });\n              return _context.abrupt(\"return\");\n\n            case 4:\n              _context.prev = 4;\n              _context.next = 7;\n              return channel.invoke('app:getAccount', {\n                address: accountAddress\n              });\n\n            case 7:\n              account = _context.sent;\n              res.status(200).send({\n                data: codec.decodeAccount(account),\n                meta: {}\n              });\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](4);\n\n              if (_context.t0.message.startsWith('Specified key accounts:address')) {\n                res.status(404).send({\n                  errors: [{\n                    message: \"Account with address '\".concat(accountAddress, \"' was not found\")\n                  }]\n                });\n              } else {\n                next(_context.t0);\n              }\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 11]]);\n    }));\n\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexports.getAccount = getAccount;","map":{"version":3,"sources":["../../src/controllers/accounts.ts"],"names":[],"mappings":";;;;;;;;;;;AAcA,IAAA,gBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AAGO,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,OAAD,EAAuB,KAAvB;AAAA;AAAA,wEAA8C,iBACvE,GADuE,EAEvE,GAFuE,EAGvE,IAHuE;AAAA;AAAA;AAAA;AAAA;AAAA;AAKjE,cAAA,cALiE,GAKhD,GAAG,CAAC,MAAJ,CAAW,OALqC;;AAAA,kBAOlE,gBAAA,CAAA,WAAA,CAAY,cAAZ,CAPkE;AAAA;AAAA;AAAA;;AAQtE,cAAA,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB;AACpB,gBAAA,MAAM,EAAE,CAAC;AAAE,kBAAA,OAAO,EAAE;AAAX,iBAAD;AADY,eAArB;AARsE;;AAAA;AAAA;AAAA;AAAA,qBAexC,OAAO,CAAC,MAAR,CAAe,gBAAf,EAAiC;AAC9D,gBAAA,OAAO,EAAE;AADqD,eAAjC,CAfwC;;AAAA;AAehE,cAAA,OAfgE;AAkBtE,cAAA,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB;AAAE,gBAAA,IAAI,EAAE,KAAK,CAAC,aAAN,CAAoB,OAApB,CAAR;AAAsC,gBAAA,IAAI,EAAE;AAA5C,eAArB;AAlBsE;AAAA;;AAAA;AAAA;AAAA;;AAoBtE,kBAAK,YAAc,OAAd,CAAsB,UAAtB,CAAiC,gCAAjC,CAAL,EAAyE;AACxE,gBAAA,GAAG,CAAC,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB;AACpB,kBAAA,MAAM,EAAE,CAAC;AAAE,oBAAA,OAAO,kCAA2B,cAA3B;AAAT,mBAAD;AADY,iBAArB;AAGA,eAJD,MAIO;AACN,gBAAA,IAAI,aAAJ;AACA;;AA1BqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA9C;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAAM,OAAA,CAAA,UAAA,GAAU,UAAV","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAccount = void 0;\nconst lisk_validator_1 = require(\"@liskhq/lisk-validator\");\nconst getAccount = (channel, codec) => async (req, res, next) => {\n    const accountAddress = req.params.address;\n    if (!lisk_validator_1.isHexString(accountAddress)) {\n        res.status(400).send({\n            errors: [{ message: 'The Address parameter should be a hex string.' }],\n        });\n        return;\n    }\n    try {\n        const account = await channel.invoke('app:getAccount', {\n            address: accountAddress,\n        });\n        res.status(200).send({ data: codec.decodeAccount(account), meta: {} });\n    }\n    catch (err) {\n        if (err.message.startsWith('Specified key accounts:address')) {\n            res.status(404).send({\n                errors: [{ message: `Account with address '${accountAddress}' was not found` }],\n            });\n        }\n        else {\n            next(err);\n        }\n    }\n};\nexports.getAccount = getAccount;\n//# sourceMappingURL=accounts.js.map"]},"metadata":{},"sourceType":"script"}