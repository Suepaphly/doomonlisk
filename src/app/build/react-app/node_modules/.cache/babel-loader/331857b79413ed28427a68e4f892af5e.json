{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar code_1 = require(\"../code\");\n\nvar codegen_1 = require(\"../../compile/codegen\");\n\nvar error = {\n  message: function message(_ref) {\n    var schemaCode = _ref.schemaCode;\n    return codegen_1.str(_templateObject || (_templateObject = _taggedTemplateLiteral([\"must match pattern \\\"\", \"\\\"\"])), schemaCode);\n  },\n  params: function params(_ref2) {\n    var schemaCode = _ref2.schemaCode;\n    return codegen_1._(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"{pattern: \", \"}\"])), schemaCode);\n  }\n};\nvar def = {\n  keyword: \"pattern\",\n  type: \"string\",\n  schemaType: \"string\",\n  $data: true,\n  error: error,\n  code: function code(cxt) {\n    var data = cxt.data,\n        $data = cxt.$data,\n        schema = cxt.schema,\n        schemaCode = cxt.schemaCode,\n        it = cxt.it; // TODO regexp should be wrapped in try/catchs\n\n    var u = it.opts.unicodeRegExp ? \"u\" : \"\";\n    var regExp = $data ? codegen_1._(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"(new RegExp(\", \", \", \"))\"])), schemaCode, u) : code_1.usePattern(cxt, schema);\n    cxt.fail$data(codegen_1._(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"!\", \".test(\", \")\"])), regExp, data));\n  }\n};\nexports.default = def;","map":{"version":3,"sources":["../../../lib/vocabularies/validation/pattern.ts"],"names":[],"mappings":";;;;;;;;;;AAEA,IAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAIA,IAAM,KAAK,GAA2B;AACpC,EAAA,OAAO,EAAE;AAAA,QAAE,UAAF,QAAE,UAAF;AAAA,WAAkB,SAAA,CAAA,GAAlB,iGAA4C,UAA5C;AAAA,GAD2B;AAEpC,EAAA,MAAM,EAAE;AAAA,QAAE,UAAF,SAAE,UAAF;AAAA,WAAkB,SAAA,CAAA,CAAlB,uFAAgC,UAAhC;AAAA;AAF4B,CAAtC;AAKA,IAAM,GAAG,GAA0B;AACjC,EAAA,OAAO,EAAE,SADwB;AAEjC,EAAA,IAAI,EAAE,QAF2B;AAGjC,EAAA,UAAU,EAAE,QAHqB;AAIjC,EAAA,KAAK,EAAE,IAJ0B;AAKjC,EAAA,KAAK,EAAL,KALiC;AAMjC,EAAA,IANiC,gBAM5B,GAN4B,EAMb;AAClB,QAAO,IAAP,GAA8C,GAA9C,CAAO,IAAP;AAAA,QAAa,KAAb,GAA8C,GAA9C,CAAa,KAAb;AAAA,QAAoB,MAApB,GAA8C,GAA9C,CAAoB,MAApB;AAAA,QAA4B,UAA5B,GAA8C,GAA9C,CAA4B,UAA5B;AAAA,QAAwC,EAAxC,GAA8C,GAA9C,CAAwC,EAAxC,CADkB,CAElB;;AACA,QAAM,CAAC,GAAG,EAAE,CAAC,IAAH,CAAQ,aAAR,GAAwB,GAAxB,GAA8B,EAAxC;AACA,QAAM,MAAM,GAAG,KAAK,GAAG,SAAA,CAAA,CAAH,gGAAmB,UAAnB,EAAkC,CAAlC,IAA0C,MAAA,CAAA,UAAA,CAAW,GAAX,EAAgB,MAAhB,CAA9D;AACA,IAAA,GAAG,CAAC,SAAJ,CAAc,SAAA,CAAA,CAAd,wFAAmB,MAAnB,EAAkC,IAAlC;AACD;AAZgC,CAAnC;AAeA,OAAA,CAAA,OAAA,GAAe,GAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst code_1 = require(\"../code\");\nconst codegen_1 = require(\"../../compile/codegen\");\nconst error = {\n    message: ({ schemaCode }) => codegen_1.str `must match pattern \"${schemaCode}\"`,\n    params: ({ schemaCode }) => codegen_1._ `{pattern: ${schemaCode}}`,\n};\nconst def = {\n    keyword: \"pattern\",\n    type: \"string\",\n    schemaType: \"string\",\n    $data: true,\n    error,\n    code(cxt) {\n        const { data, $data, schema, schemaCode, it } = cxt;\n        // TODO regexp should be wrapped in try/catchs\n        const u = it.opts.unicodeRegExp ? \"u\" : \"\";\n        const regExp = $data ? codegen_1._ `(new RegExp(${schemaCode}, ${u}))` : code_1.usePattern(cxt, schema);\n        cxt.fail$data(codegen_1._ `!${regExp}.test(${data})`);\n    },\n};\nexports.default = def;\n//# sourceMappingURL=pattern.js.map"]},"metadata":{},"sourceType":"script"}