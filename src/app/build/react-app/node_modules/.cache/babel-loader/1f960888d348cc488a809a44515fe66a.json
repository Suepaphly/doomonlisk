{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPublicKey = exports.getKeyPair = exports.getRandomBytes = exports.verifyDetached = exports.signDetached = exports.openBox = exports.box = void 0;\n\nvar tweetnacl = require(\"tweetnacl\");\n\nvar box = function box(messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey) {\n  return Buffer.from(tweetnacl.box(Uint8Array.from(messageInBytes), Uint8Array.from(nonceInBytes), Uint8Array.from(convertedPublicKey), Uint8Array.from(convertedPrivateKey)));\n};\n\nexports.box = box;\n\nvar openBox = function openBox(cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey) {\n  var originalMessage = tweetnacl.box.open(Uint8Array.from(cipherBytes), Uint8Array.from(nonceBytes), Uint8Array.from(convertedPublicKey), Uint8Array.from(convertedPrivateKey));\n\n  if (originalMessage === null) {\n    throw new Error('Failed to decrypt message');\n  }\n\n  return Buffer.from(originalMessage);\n};\n\nexports.openBox = openBox;\n\nvar signDetached = function signDetached(messageBytes, privateKeyBytes) {\n  return Buffer.from(tweetnacl.sign.detached(Uint8Array.from(messageBytes), Uint8Array.from(privateKeyBytes)));\n};\n\nexports.signDetached = signDetached;\n\nvar verifyDetached = function verifyDetached(messageBytes, signatureBytes, publicKeyBytes) {\n  return tweetnacl.sign.detached.verify(Uint8Array.from(messageBytes), Uint8Array.from(signatureBytes), Uint8Array.from(publicKeyBytes));\n};\n\nexports.verifyDetached = verifyDetached;\n\nvar getRandomBytes = function getRandomBytes(length) {\n  return Buffer.from(tweetnacl.randomBytes(length));\n};\n\nexports.getRandomBytes = getRandomBytes;\n\nvar getKeyPair = function getKeyPair(hashedSeed) {\n  var _tweetnacl$sign$keyPa = tweetnacl.sign.keyPair.fromSeed(Uint8Array.from(hashedSeed)),\n      publicKey = _tweetnacl$sign$keyPa.publicKey,\n      secretKey = _tweetnacl$sign$keyPa.secretKey;\n\n  return {\n    privateKey: Buffer.from(secretKey),\n    publicKey: Buffer.from(publicKey)\n  };\n};\n\nexports.getKeyPair = getKeyPair;\nvar PRIVATE_KEY_LENGTH = 32;\n\nvar getPublicKey = function getPublicKey(privateKey) {\n  var _tweetnacl$sign$keyPa2 = tweetnacl.sign.keyPair.fromSeed(Uint8Array.from(privateKey.slice(0, PRIVATE_KEY_LENGTH))),\n      publicKey = _tweetnacl$sign$keyPa2.publicKey;\n\n  return Buffer.from(publicKey);\n};\n\nexports.getPublicKey = getPublicKey;","map":{"version":3,"sources":["../../src/nacl/slow.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPublicKey = exports.getKeyPair = exports.getRandomBytes = exports.verifyDetached = exports.signDetached = exports.openBox = exports.box = void 0;\nconst tweetnacl = require(\"tweetnacl\");\nconst box = (messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey) => Buffer.from(tweetnacl.box(Uint8Array.from(messageInBytes), Uint8Array.from(nonceInBytes), Uint8Array.from(convertedPublicKey), Uint8Array.from(convertedPrivateKey)));\nexports.box = box;\nconst openBox = (cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey) => {\n    const originalMessage = tweetnacl.box.open(Uint8Array.from(cipherBytes), Uint8Array.from(nonceBytes), Uint8Array.from(convertedPublicKey), Uint8Array.from(convertedPrivateKey));\n    if (originalMessage === null) {\n        throw new Error('Failed to decrypt message');\n    }\n    return Buffer.from(originalMessage);\n};\nexports.openBox = openBox;\nconst signDetached = (messageBytes, privateKeyBytes) => Buffer.from(tweetnacl.sign.detached(Uint8Array.from(messageBytes), Uint8Array.from(privateKeyBytes)));\nexports.signDetached = signDetached;\nconst verifyDetached = (messageBytes, signatureBytes, publicKeyBytes) => tweetnacl.sign.detached.verify(Uint8Array.from(messageBytes), Uint8Array.from(signatureBytes), Uint8Array.from(publicKeyBytes));\nexports.verifyDetached = verifyDetached;\nconst getRandomBytes = length => Buffer.from(tweetnacl.randomBytes(length));\nexports.getRandomBytes = getRandomBytes;\nconst getKeyPair = hashedSeed => {\n    const { publicKey, secretKey } = tweetnacl.sign.keyPair.fromSeed(Uint8Array.from(hashedSeed));\n    return {\n        privateKey: Buffer.from(secretKey),\n        publicKey: Buffer.from(publicKey),\n    };\n};\nexports.getKeyPair = getKeyPair;\nconst PRIVATE_KEY_LENGTH = 32;\nconst getPublicKey = privateKey => {\n    const { publicKey } = tweetnacl.sign.keyPair.fromSeed(Uint8Array.from(privateKey.slice(0, PRIVATE_KEY_LENGTH)));\n    return Buffer.from(publicKey);\n};\nexports.getPublicKey = getPublicKey;\n//# sourceMappingURL=slow.js.map"]},"metadata":{},"sourceType":"script"}