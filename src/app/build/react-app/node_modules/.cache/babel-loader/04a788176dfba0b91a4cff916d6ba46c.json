{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateDelegateProductivity = exports.createVoteWeightsSnapshot = exports.updateDelegateList = exports.pickStandByDelegate = exports.shuffleDelegateList = void 0;\n\nvar lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\n\nvar data_access_1 = require(\"./data_access\");\n\nvar constants_1 = require(\"./constants\");\n\nvar utils_1 = require(\"./utils\");\n\nvar shuffleDelegateList = function shuffleDelegateList(previousRoundSeed1, addresses) {\n  var delegateList = _toConsumableArray(addresses).map(function (delegate) {\n    return {\n      address: delegate\n    };\n  });\n\n  var _iterator = _createForOfIteratorHelper(delegateList),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var delegate = _step.value;\n      var seedSource = Buffer.concat([previousRoundSeed1, delegate.address]);\n      delegate.roundHash = lisk_cryptography_1.hash(seedSource);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  delegateList.sort(function (delegate1, delegate2) {\n    var diff = delegate1.roundHash.compare(delegate2.roundHash);\n\n    if (diff !== 0) {\n      return diff;\n    }\n\n    return delegate1.address.compare(delegate2.address);\n  });\n  return delegateList.map(function (delegate) {\n    return delegate.address;\n  });\n};\n\nexports.shuffleDelegateList = shuffleDelegateList;\n\nvar pickStandByDelegate = function pickStandByDelegate(delegateWeights, randomSeed) {\n  var seedNumber = randomSeed.readBigUInt64BE();\n  var totalVoteWeight = delegateWeights.reduce(function (prev, current) {\n    return prev + BigInt(current.voteWeight);\n  }, BigInt(0));\n  var threshold = seedNumber % totalVoteWeight;\n\n  for (var i = 0; i < delegateWeights.length; i += 1) {\n    var voteWeight = BigInt(delegateWeights[i].voteWeight);\n\n    if (voteWeight > threshold) {\n      return i;\n    }\n\n    threshold -= voteWeight;\n  }\n\n  return -1;\n};\n\nexports.pickStandByDelegate = pickStandByDelegate;\n\nvar updateDelegateList = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var round, randomSeeds, stateStore, activeDelegates, standbyDelegates, consensus, voteWeights, voteWeight, hasStandbySlot, activeDelegateAddresses, standbyDelegateAddresses, standbyDelegateVoteWeights, _iterator2, _step2, delegate, i, standbyDelegateIndex, delegates, shuffledDelegates, delegatesList;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            round = _ref.round, randomSeeds = _ref.randomSeeds, stateStore = _ref.stateStore, activeDelegates = _ref.activeDelegates, standbyDelegates = _ref.standbyDelegates, consensus = _ref.consensus;\n\n            if (randomSeeds.length) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new Error('Random seed must be provided');\n\n          case 3:\n            _context.next = 5;\n            return data_access_1.getVoteWeights(stateStore);\n\n          case 5:\n            voteWeights = _context.sent;\n            voteWeight = voteWeights.find(function (vw) {\n              return vw.round === round;\n            });\n\n            if (voteWeight) {\n              _context.next = 9;\n              break;\n            }\n\n            throw new Error(\"Corresponding vote weight for round \".concat(round.toString(), \" not found\"));\n\n          case 9:\n            hasStandbySlot = voteWeight.delegates.length > activeDelegates;\n            activeDelegateAddresses = voteWeight.delegates.slice(0, activeDelegates).map(function (vw) {\n              return vw.address;\n            });\n            standbyDelegateAddresses = [];\n            standbyDelegateVoteWeights = hasStandbySlot ? voteWeight.delegates.slice(activeDelegates) : [];\n\n            if (!(standbyDelegateVoteWeights.length > 0 && standbyDelegateVoteWeights.length <= standbyDelegates)) {\n              _context.next = 18;\n              break;\n            }\n\n            _iterator2 = _createForOfIteratorHelper(standbyDelegateVoteWeights);\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                delegate = _step2.value;\n                standbyDelegateAddresses.push(delegate.address);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n            _context.next = 29;\n            break;\n\n          case 18:\n            if (!(standbyDelegateVoteWeights.length > standbyDelegates)) {\n              _context.next = 29;\n              break;\n            }\n\n            i = 0;\n\n          case 20:\n            if (!(i < standbyDelegates)) {\n              _context.next = 29;\n              break;\n            }\n\n            standbyDelegateIndex = exports.pickStandByDelegate(standbyDelegateVoteWeights, randomSeeds[i % randomSeeds.length]);\n\n            if (!(standbyDelegateIndex < 0)) {\n              _context.next = 24;\n              break;\n            }\n\n            throw new Error('Fail to pick standby delegate');\n\n          case 24:\n            standbyDelegateAddresses.push(standbyDelegateVoteWeights[standbyDelegateIndex].address);\n            standbyDelegateVoteWeights.splice(standbyDelegateIndex, 1);\n\n          case 26:\n            i += 1;\n            _context.next = 20;\n            break;\n\n          case 29:\n            delegates = activeDelegateAddresses.concat(standbyDelegateAddresses);\n            shuffledDelegates = exports.shuffleDelegateList(randomSeeds[0], delegates);\n            delegatesList = shuffledDelegates.map(function (address) {\n              return {\n                address: address,\n                isConsensusParticipant: !standbyDelegateAddresses.includes(address)\n              };\n            });\n            _context.next = 34;\n            return consensus.updateDelegates(delegatesList);\n\n          case 34:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function updateDelegateList(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.updateDelegateList = updateDelegateList;\n\nvar createVoteWeightsSnapshot = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref3) {\n    var height, stateStore, round, logger, _ref3$voteWeightCapRa, voteWeightCapRate, _ref3$activeDelegates, activeDelegates, _ref3$standbyDelegate, standbyDelegates, _ref3$standbyThreshol, standbyThreshold, _a, delegateUserNames, delegates, _iterator3, _step3, _loop, _ret, activeDelegatesList, standbyDelegatesList, _iterator4, _step4, account, delegateVoteWeights, voteWeight, voteWeights, voteWeightsIndex;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            height = _ref3.height, stateStore = _ref3.stateStore, round = _ref3.round, logger = _ref3.logger, _ref3$voteWeightCapRa = _ref3.voteWeightCapRate, voteWeightCapRate = _ref3$voteWeightCapRa === void 0 ? constants_1.DEFAULT_VOTE_WEIGHT_CAP_RATE : _ref3$voteWeightCapRa, _ref3$activeDelegates = _ref3.activeDelegates, activeDelegates = _ref3$activeDelegates === void 0 ? constants_1.DEFAULT_ACTIVE_DELEGATE : _ref3$activeDelegates, _ref3$standbyDelegate = _ref3.standbyDelegates, standbyDelegates = _ref3$standbyDelegate === void 0 ? constants_1.DEFAULT_STANDBY_DELEGATE : _ref3$standbyDelegate, _ref3$standbyThreshol = _ref3.standbyThreshold, standbyThreshold = _ref3$standbyThreshol === void 0 ? constants_1.DEFAULT_STANDBY_THRESHOLD : _ref3$standbyThreshol;\n            logger.debug(\"Creating vote weight snapshot for round: \".concat(round.toString()));\n            _context3.next = 4;\n            return data_access_1.getRegisteredDelegates(stateStore);\n\n          case 4:\n            delegateUserNames = _context3.sent;\n            _context3.next = 7;\n            return Promise.all(delegateUserNames.registeredDelegates.map( /*#__PURE__*/function () {\n              var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(delegate) {\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        return _context2.abrupt(\"return\", stateStore.account.get(delegate.address));\n\n                      case 1:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function (_x3) {\n                return _ref5.apply(this, arguments);\n              };\n            }()));\n\n          case 7:\n            delegates = _context3.sent;\n            _iterator3 = _createForOfIteratorHelper(delegates);\n            _context3.prev = 9;\n\n            _loop = function _loop() {\n              var account = _step3.value;\n\n              if (utils_1.isCurrentlyPunished(height, account.dpos.delegate.pomHeights)) {\n                account.dpos.delegate.totalVotesReceived = BigInt(0);\n                return \"continue\";\n              }\n\n              var selfVote = account.dpos.sentVotes.find(function (vote) {\n                return vote.delegateAddress.equals(account.address);\n              });\n              var cappedValue = ((_a = selfVote === null || selfVote === void 0 ? void 0 : selfVote.amount) !== null && _a !== void 0 ? _a : BigInt(0)) * BigInt(voteWeightCapRate);\n\n              if (account.dpos.delegate.totalVotesReceived > cappedValue) {\n                account.dpos.delegate.totalVotesReceived = cappedValue;\n              }\n            };\n\n            _iterator3.s();\n\n          case 12:\n            if ((_step3 = _iterator3.n()).done) {\n              _context3.next = 18;\n              break;\n            }\n\n            _ret = _loop();\n\n            if (!(_ret === \"continue\")) {\n              _context3.next = 16;\n              break;\n            }\n\n            return _context3.abrupt(\"continue\", 16);\n\n          case 16:\n            _context3.next = 12;\n            break;\n\n          case 18:\n            _context3.next = 23;\n            break;\n\n          case 20:\n            _context3.prev = 20;\n            _context3.t0 = _context3[\"catch\"](9);\n\n            _iterator3.e(_context3.t0);\n\n          case 23:\n            _context3.prev = 23;\n\n            _iterator3.f();\n\n            return _context3.finish(23);\n\n          case 26:\n            delegates.sort(function (a, b) {\n              var diff = b.dpos.delegate.totalVotesReceived - a.dpos.delegate.totalVotesReceived;\n\n              if (diff > BigInt(0)) {\n                return 1;\n              }\n\n              if (diff < BigInt(0)) {\n                return -1;\n              }\n\n              return a.address.compare(b.address);\n            });\n            activeDelegatesList = [];\n            standbyDelegatesList = [];\n            _iterator4 = _createForOfIteratorHelper(delegates);\n            _context3.prev = 30;\n\n            _iterator4.s();\n\n          case 32:\n            if ((_step4 = _iterator4.n()).done) {\n              _context3.next = 48;\n              break;\n            }\n\n            account = _step4.value;\n\n            if (!account.dpos.delegate.isBanned) {\n              _context3.next = 36;\n              break;\n            }\n\n            return _context3.abrupt(\"continue\", 46);\n\n          case 36:\n            if (!(activeDelegatesList.length < activeDelegates)) {\n              _context3.next = 39;\n              break;\n            }\n\n            activeDelegatesList.push({\n              address: account.address,\n              voteWeight: account.dpos.delegate.totalVotesReceived\n            });\n            return _context3.abrupt(\"continue\", 46);\n\n          case 39:\n            if (!(account.dpos.delegate.totalVotesReceived >= standbyThreshold)) {\n              _context3.next = 42;\n              break;\n            }\n\n            standbyDelegatesList.push({\n              address: account.address,\n              voteWeight: account.dpos.delegate.totalVotesReceived\n            });\n            return _context3.abrupt(\"continue\", 46);\n\n          case 42:\n            if (!(standbyDelegatesList.length < standbyDelegates)) {\n              _context3.next = 45;\n              break;\n            }\n\n            standbyDelegatesList.push({\n              address: account.address,\n              voteWeight: account.dpos.delegate.totalVotesReceived\n            });\n            return _context3.abrupt(\"continue\", 46);\n\n          case 45:\n            return _context3.abrupt(\"break\", 48);\n\n          case 46:\n            _context3.next = 32;\n            break;\n\n          case 48:\n            _context3.next = 53;\n            break;\n\n          case 50:\n            _context3.prev = 50;\n            _context3.t1 = _context3[\"catch\"](30);\n\n            _iterator4.e(_context3.t1);\n\n          case 53:\n            _context3.prev = 53;\n\n            _iterator4.f();\n\n            return _context3.finish(53);\n\n          case 56:\n            delegateVoteWeights = activeDelegatesList.concat(standbyDelegatesList);\n            voteWeight = {\n              round: round,\n              delegates: delegateVoteWeights\n            };\n            _context3.next = 60;\n            return data_access_1.getVoteWeights(stateStore);\n\n          case 60:\n            voteWeights = _context3.sent;\n            voteWeightsIndex = voteWeights.findIndex(function (vw) {\n              return vw.round === round;\n            });\n\n            if (voteWeightsIndex === -1) {\n              voteWeights.push(voteWeight);\n            } else {\n              voteWeights[voteWeightsIndex] = voteWeight;\n            }\n\n            _context3.next = 65;\n            return data_access_1.setVoteWeights(stateStore, voteWeights);\n\n          case 65:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[9, 20, 23, 26], [30, 50, 53, 56]]);\n  }));\n\n  return function createVoteWeightsSnapshot(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nexports.createVoteWeightsSnapshot = createVoteWeightsSnapshot;\n\nvar updateDelegateProductivity = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref6) {\n    var height, blockTime, generatorPublicKey, blockTimestamp, stateStore, consensus, lastBlock, expectedForgingAddresses, missedBlocks, forgerAddress, forgerIndex, i, rawIndex, index, missedForgerAddress, missedForger, forger;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            height = _ref6.height, blockTime = _ref6.blockTime, generatorPublicKey = _ref6.generatorPublicKey, blockTimestamp = _ref6.blockTimestamp, stateStore = _ref6.stateStore, consensus = _ref6.consensus;\n            lastBlock = stateStore.chain.lastBlockHeaders[0];\n            _context4.next = 4;\n            return consensus.getDelegates();\n\n          case 4:\n            expectedForgingAddresses = _context4.sent.map(function (d) {\n              return d.address;\n            });\n            missedBlocks = Math.ceil((blockTimestamp - lastBlock.timestamp) / blockTime) - 1;\n            forgerAddress = lisk_cryptography_1.getAddressFromPublicKey(generatorPublicKey);\n            forgerIndex = expectedForgingAddresses.findIndex(function (address) {\n              return address.equals(forgerAddress);\n            });\n            i = 0;\n\n          case 9:\n            if (!(i < missedBlocks)) {\n              _context4.next = 23;\n              break;\n            }\n\n            rawIndex = (forgerIndex - 1 - i) % expectedForgingAddresses.length;\n            index = rawIndex >= 0 ? rawIndex : rawIndex + expectedForgingAddresses.length;\n            missedForgerAddress = expectedForgingAddresses[index];\n            _context4.next = 15;\n            return stateStore.account.get(missedForgerAddress);\n\n          case 15:\n            missedForger = _context4.sent;\n            missedForger.dpos.delegate.consecutiveMissedBlocks += 1;\n\n            if (missedForger.dpos.delegate.consecutiveMissedBlocks > constants_1.MAX_CONSECUTIVE_MISSED_BLOCKS && height - missedForger.dpos.delegate.lastForgedHeight > constants_1.MAX_LAST_FORGED_HEIGHT_DIFF) {\n              missedForger.dpos.delegate.isBanned = true;\n            }\n\n            _context4.next = 20;\n            return stateStore.account.set(missedForgerAddress, missedForger);\n\n          case 20:\n            i += 1;\n            _context4.next = 9;\n            break;\n\n          case 23:\n            _context4.next = 25;\n            return stateStore.account.get(forgerAddress);\n\n          case 25:\n            forger = _context4.sent;\n            forger.dpos.delegate.consecutiveMissedBlocks = 0;\n            forger.dpos.delegate.lastForgedHeight = height;\n            _context4.next = 30;\n            return stateStore.account.set(forgerAddress, forger);\n\n          case 30:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function updateDelegateProductivity(_x4) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nexports.updateDelegateProductivity = updateDelegateProductivity;","map":{"version":3,"sources":["../../../src/modules/dpos/delegates.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.updateDelegateProductivity = exports.createVoteWeightsSnapshot = exports.updateDelegateList = exports.pickStandByDelegate = exports.shuffleDelegateList = void 0;\nconst lisk_cryptography_1 = require(\"@liskhq/lisk-cryptography\");\nconst data_access_1 = require(\"./data_access\");\nconst constants_1 = require(\"./constants\");\nconst utils_1 = require(\"./utils\");\nconst shuffleDelegateList = (previousRoundSeed1, addresses) => {\n    const delegateList = [...addresses].map(delegate => ({\n        address: delegate,\n    }));\n    for (const delegate of delegateList) {\n        const seedSource = Buffer.concat([previousRoundSeed1, delegate.address]);\n        delegate.roundHash = lisk_cryptography_1.hash(seedSource);\n    }\n    delegateList.sort((delegate1, delegate2) => {\n        const diff = delegate1.roundHash.compare(delegate2.roundHash);\n        if (diff !== 0) {\n            return diff;\n        }\n        return delegate1.address.compare(delegate2.address);\n    });\n    return delegateList.map(delegate => delegate.address);\n};\nexports.shuffleDelegateList = shuffleDelegateList;\nconst pickStandByDelegate = (delegateWeights, randomSeed) => {\n    const seedNumber = randomSeed.readBigUInt64BE();\n    const totalVoteWeight = delegateWeights.reduce((prev, current) => prev + BigInt(current.voteWeight), BigInt(0));\n    let threshold = seedNumber % totalVoteWeight;\n    for (let i = 0; i < delegateWeights.length; i += 1) {\n        const voteWeight = BigInt(delegateWeights[i].voteWeight);\n        if (voteWeight > threshold) {\n            return i;\n        }\n        threshold -= voteWeight;\n    }\n    return -1;\n};\nexports.pickStandByDelegate = pickStandByDelegate;\nconst updateDelegateList = async ({ round, randomSeeds, stateStore, activeDelegates, standbyDelegates, consensus, }) => {\n    if (!randomSeeds.length) {\n        throw new Error('Random seed must be provided');\n    }\n    const voteWeights = await data_access_1.getVoteWeights(stateStore);\n    const voteWeight = voteWeights.find(vw => vw.round === round);\n    if (!voteWeight) {\n        throw new Error(`Corresponding vote weight for round ${round.toString()} not found`);\n    }\n    const hasStandbySlot = voteWeight.delegates.length > activeDelegates;\n    const activeDelegateAddresses = voteWeight.delegates\n        .slice(0, activeDelegates)\n        .map(vw => vw.address);\n    const standbyDelegateAddresses = [];\n    const standbyDelegateVoteWeights = hasStandbySlot\n        ? voteWeight.delegates.slice(activeDelegates)\n        : [];\n    if (standbyDelegateVoteWeights.length > 0 &&\n        standbyDelegateVoteWeights.length <= standbyDelegates) {\n        for (const delegate of standbyDelegateVoteWeights) {\n            standbyDelegateAddresses.push(delegate.address);\n        }\n    }\n    else if (standbyDelegateVoteWeights.length > standbyDelegates) {\n        for (let i = 0; i < standbyDelegates; i += 1) {\n            const standbyDelegateIndex = exports.pickStandByDelegate(standbyDelegateVoteWeights, randomSeeds[i % randomSeeds.length]);\n            if (standbyDelegateIndex < 0) {\n                throw new Error('Fail to pick standby delegate');\n            }\n            standbyDelegateAddresses.push(standbyDelegateVoteWeights[standbyDelegateIndex].address);\n            standbyDelegateVoteWeights.splice(standbyDelegateIndex, 1);\n        }\n    }\n    const delegates = activeDelegateAddresses.concat(standbyDelegateAddresses);\n    const shuffledDelegates = exports.shuffleDelegateList(randomSeeds[0], delegates);\n    const delegatesList = shuffledDelegates.map(address => ({\n        address,\n        isConsensusParticipant: !standbyDelegateAddresses.includes(address),\n    }));\n    await consensus.updateDelegates(delegatesList);\n};\nexports.updateDelegateList = updateDelegateList;\nconst createVoteWeightsSnapshot = async ({ height, stateStore, round, logger, voteWeightCapRate = constants_1.DEFAULT_VOTE_WEIGHT_CAP_RATE, activeDelegates = constants_1.DEFAULT_ACTIVE_DELEGATE, standbyDelegates = constants_1.DEFAULT_STANDBY_DELEGATE, standbyThreshold = constants_1.DEFAULT_STANDBY_THRESHOLD, }) => {\n    var _a;\n    logger.debug(`Creating vote weight snapshot for round: ${round.toString()}`);\n    const delegateUserNames = await data_access_1.getRegisteredDelegates(stateStore);\n    const delegates = await Promise.all(delegateUserNames.registeredDelegates.map(async (delegate) => stateStore.account.get(delegate.address)));\n    for (const account of delegates) {\n        if (utils_1.isCurrentlyPunished(height, account.dpos.delegate.pomHeights)) {\n            account.dpos.delegate.totalVotesReceived = BigInt(0);\n            continue;\n        }\n        const selfVote = account.dpos.sentVotes.find(vote => vote.delegateAddress.equals(account.address));\n        const cappedValue = ((_a = selfVote === null || selfVote === void 0 ? void 0 : selfVote.amount) !== null && _a !== void 0 ? _a : BigInt(0)) * BigInt(voteWeightCapRate);\n        if (account.dpos.delegate.totalVotesReceived > cappedValue) {\n            account.dpos.delegate.totalVotesReceived = cappedValue;\n        }\n    }\n    delegates.sort((a, b) => {\n        const diff = b.dpos.delegate.totalVotesReceived - a.dpos.delegate.totalVotesReceived;\n        if (diff > BigInt(0)) {\n            return 1;\n        }\n        if (diff < BigInt(0)) {\n            return -1;\n        }\n        return a.address.compare(b.address);\n    });\n    const activeDelegatesList = [];\n    const standbyDelegatesList = [];\n    for (const account of delegates) {\n        if (account.dpos.delegate.isBanned) {\n            continue;\n        }\n        if (activeDelegatesList.length < activeDelegates) {\n            activeDelegatesList.push({\n                address: account.address,\n                voteWeight: account.dpos.delegate.totalVotesReceived,\n            });\n            continue;\n        }\n        if (account.dpos.delegate.totalVotesReceived >= standbyThreshold) {\n            standbyDelegatesList.push({\n                address: account.address,\n                voteWeight: account.dpos.delegate.totalVotesReceived,\n            });\n            continue;\n        }\n        if (standbyDelegatesList.length < standbyDelegates) {\n            standbyDelegatesList.push({\n                address: account.address,\n                voteWeight: account.dpos.delegate.totalVotesReceived,\n            });\n            continue;\n        }\n        break;\n    }\n    const delegateVoteWeights = activeDelegatesList.concat(standbyDelegatesList);\n    const voteWeight = {\n        round,\n        delegates: delegateVoteWeights,\n    };\n    const voteWeights = await data_access_1.getVoteWeights(stateStore);\n    const voteWeightsIndex = voteWeights.findIndex(vw => vw.round === round);\n    if (voteWeightsIndex === -1) {\n        voteWeights.push(voteWeight);\n    }\n    else {\n        voteWeights[voteWeightsIndex] = voteWeight;\n    }\n    await data_access_1.setVoteWeights(stateStore, voteWeights);\n};\nexports.createVoteWeightsSnapshot = createVoteWeightsSnapshot;\nconst updateDelegateProductivity = async ({ height, blockTime, generatorPublicKey, blockTimestamp, stateStore, consensus, }) => {\n    const lastBlock = stateStore.chain.lastBlockHeaders[0];\n    const expectedForgingAddresses = (await consensus.getDelegates()).map(d => d.address);\n    const missedBlocks = Math.ceil((blockTimestamp - lastBlock.timestamp) / blockTime) - 1;\n    const forgerAddress = lisk_cryptography_1.getAddressFromPublicKey(generatorPublicKey);\n    const forgerIndex = expectedForgingAddresses.findIndex(address => address.equals(forgerAddress));\n    for (let i = 0; i < missedBlocks; i += 1) {\n        const rawIndex = (forgerIndex - 1 - i) % expectedForgingAddresses.length;\n        const index = rawIndex >= 0 ? rawIndex : rawIndex + expectedForgingAddresses.length;\n        const missedForgerAddress = expectedForgingAddresses[index];\n        const missedForger = await stateStore.account.get(missedForgerAddress);\n        missedForger.dpos.delegate.consecutiveMissedBlocks += 1;\n        if (missedForger.dpos.delegate.consecutiveMissedBlocks > constants_1.MAX_CONSECUTIVE_MISSED_BLOCKS &&\n            height - missedForger.dpos.delegate.lastForgedHeight > constants_1.MAX_LAST_FORGED_HEIGHT_DIFF) {\n            missedForger.dpos.delegate.isBanned = true;\n        }\n        await stateStore.account.set(missedForgerAddress, missedForger);\n    }\n    const forger = await stateStore.account.get(forgerAddress);\n    forger.dpos.delegate.consecutiveMissedBlocks = 0;\n    forger.dpos.delegate.lastForgedHeight = height;\n    await stateStore.account.set(forgerAddress, forger);\n};\nexports.updateDelegateProductivity = updateDelegateProductivity;\n//# sourceMappingURL=delegates.js.map"]},"metadata":{},"sourceType":"script"}