{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeCustomSchema = exports.defaultRPCSchemas = exports.peerRequestResponseSchema = exports.peerInfoSchema = exports.nodeInfoSchema = void 0;\nexports.nodeInfoSchema = {\n  $id: '/nodeInfo',\n  type: 'object',\n  properties: {\n    networkIdentifier: {\n      dataType: 'string',\n      fieldNumber: 1\n    },\n    networkVersion: {\n      dataType: 'string',\n      fieldNumber: 2\n    },\n    nonce: {\n      dataType: 'string',\n      fieldNumber: 3\n    },\n    advertiseAddress: {\n      dataType: 'boolean',\n      fieldNumber: 4\n    }\n  },\n  required: ['networkIdentifier', 'networkVersion', 'nonce']\n};\nexports.peerInfoSchema = {\n  $id: '/protocolPeerInfo',\n  type: 'object',\n  properties: {\n    ipAddress: {\n      dataType: 'string',\n      fieldNumber: 1\n    },\n    port: {\n      dataType: 'uint32',\n      fieldNumber: 2\n    }\n  },\n  required: ['ipAddress', 'port']\n};\nexports.peerRequestResponseSchema = {\n  $id: '/protocolPeerRequestResponse',\n  type: 'object',\n  properties: {\n    peers: {\n      type: 'array',\n      fieldNumber: 1,\n      items: {\n        dataType: 'bytes'\n      }\n    }\n  },\n  required: ['peers']\n};\nexports.defaultRPCSchemas = {\n  peerInfo: exports.peerInfoSchema,\n  nodeInfo: exports.nodeInfoSchema,\n  peerRequestResponse: exports.peerRequestResponseSchema\n};\n\nvar mergeCustomSchema = function mergeCustomSchema(baseSchema, customSchema) {\n  return _objectSpread(_objectSpread({}, baseSchema), {}, {\n    properties: _objectSpread(_objectSpread({}, baseSchema.properties), {}, {\n      options: {\n        type: 'object',\n        fieldNumber: 5,\n        properties: _objectSpread({}, customSchema.properties)\n      }\n    })\n  });\n};\n\nexports.mergeCustomSchema = mergeCustomSchema;","map":{"version":3,"sources":["../src/schema.ts"],"names":[],"mappings":";;;;;;;;AAgBa,OAAA,CAAA,cAAA,GAAiB;AAC7B,EAAA,GAAG,EAAE,WADwB;AAE7B,EAAA,IAAI,EAAE,QAFuB;AAG7B,EAAA,UAAU,EAAE;AACX,IAAA,iBAAiB,EAAE;AAClB,MAAA,QAAQ,EAAE,QADQ;AAElB,MAAA,WAAW,EAAE;AAFK,KADR;AAKX,IAAA,cAAc,EAAE;AACf,MAAA,QAAQ,EAAE,QADK;AAEf,MAAA,WAAW,EAAE;AAFE,KALL;AASX,IAAA,KAAK,EAAE;AACN,MAAA,QAAQ,EAAE,QADJ;AAEN,MAAA,WAAW,EAAE;AAFP,KATI;AAaX,IAAA,gBAAgB,EAAE;AACjB,MAAA,QAAQ,EAAE,SADO;AAEjB,MAAA,WAAW,EAAE;AAFI;AAbP,GAHiB;AAqB7B,EAAA,QAAQ,EAAE,CAAC,mBAAD,EAAsB,gBAAtB,EAAwC,OAAxC;AArBmB,CAAjB;AAwBA,OAAA,CAAA,cAAA,GAAiB;AAC7B,EAAA,GAAG,EAAE,mBADwB;AAE7B,EAAA,IAAI,EAAE,QAFuB;AAG7B,EAAA,UAAU,EAAE;AACX,IAAA,SAAS,EAAE;AACV,MAAA,QAAQ,EAAE,QADA;AAEV,MAAA,WAAW,EAAE;AAFH,KADA;AAKX,IAAA,IAAI,EAAE;AACL,MAAA,QAAQ,EAAE,QADL;AAEL,MAAA,WAAW,EAAE;AAFR;AALK,GAHiB;AAa7B,EAAA,QAAQ,EAAE,CAAC,WAAD,EAAc,MAAd;AAbmB,CAAjB;AAgBA,OAAA,CAAA,yBAAA,GAA4B;AACxC,EAAA,GAAG,EAAE,8BADmC;AAExC,EAAA,IAAI,EAAE,QAFkC;AAGxC,EAAA,UAAU,EAAE;AACX,IAAA,KAAK,EAAE;AACN,MAAA,IAAI,EAAE,OADA;AAEN,MAAA,WAAW,EAAE,CAFP;AAGN,MAAA,KAAK,EAAE;AACN,QAAA,QAAQ,EAAE;AADJ;AAHD;AADI,GAH4B;AAYxC,EAAA,QAAQ,EAAE,CAAC,OAAD;AAZ8B,CAA5B;AAeA,OAAA,CAAA,iBAAA,GAAoB;AAChC,EAAA,QAAQ,EAAE,OAAA,CAAA,cADsB;AAEhC,EAAA,QAAQ,EAAE,OAAA,CAAA,cAFsB;AAGhC,EAAA,mBAAmB,EAAE,OAAA,CAAA;AAHW,CAApB;;AAMN,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAC,UAAD,EAAqB,YAArB;AAAA,yCAC7B,UAD6B;AAEhC,IAAA,UAAU,kCACN,UAAU,CAAC,UADL;AAET,MAAA,OAAO,EAAE;AACR,QAAA,IAAI,EAAE,QADE;AAER,QAAA,WAAW,EAAE,CAFL;AAGR,QAAA,UAAU,oBAAO,YAAY,CAAC,UAApB;AAHF;AAFA;AAFsB;AAAA,CAA1B;;AAAM,OAAA,CAAA,iBAAA,GAAiB,iBAAjB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeCustomSchema = exports.defaultRPCSchemas = exports.peerRequestResponseSchema = exports.peerInfoSchema = exports.nodeInfoSchema = void 0;\nexports.nodeInfoSchema = {\n    $id: '/nodeInfo',\n    type: 'object',\n    properties: {\n        networkIdentifier: {\n            dataType: 'string',\n            fieldNumber: 1,\n        },\n        networkVersion: {\n            dataType: 'string',\n            fieldNumber: 2,\n        },\n        nonce: {\n            dataType: 'string',\n            fieldNumber: 3,\n        },\n        advertiseAddress: {\n            dataType: 'boolean',\n            fieldNumber: 4,\n        },\n    },\n    required: ['networkIdentifier', 'networkVersion', 'nonce'],\n};\nexports.peerInfoSchema = {\n    $id: '/protocolPeerInfo',\n    type: 'object',\n    properties: {\n        ipAddress: {\n            dataType: 'string',\n            fieldNumber: 1,\n        },\n        port: {\n            dataType: 'uint32',\n            fieldNumber: 2,\n        },\n    },\n    required: ['ipAddress', 'port'],\n};\nexports.peerRequestResponseSchema = {\n    $id: '/protocolPeerRequestResponse',\n    type: 'object',\n    properties: {\n        peers: {\n            type: 'array',\n            fieldNumber: 1,\n            items: {\n                dataType: 'bytes',\n            },\n        },\n    },\n    required: ['peers'],\n};\nexports.defaultRPCSchemas = {\n    peerInfo: exports.peerInfoSchema,\n    nodeInfo: exports.nodeInfoSchema,\n    peerRequestResponse: exports.peerRequestResponseSchema,\n};\nconst mergeCustomSchema = (baseSchema, customSchema) => ({\n    ...baseSchema,\n    properties: {\n        ...baseSchema.properties,\n        options: {\n            type: 'object',\n            fieldNumber: 5,\n            properties: { ...customSchema.properties },\n        },\n    },\n});\nexports.mergeCustomSchema = mergeCustomSchema;\n//# sourceMappingURL=schema.js.map"]},"metadata":{},"sourceType":"script"}