{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDifferentChain = exports.isTieBreak = exports.isDoubleForging = exports.isDuplicateBlock = exports.isIdenticalBlock = exports.isValidBlock = exports.isLastAppliedBlockReceivedWithinForgingSlot = exports.isBlockReceivedWithinForgingSlot = exports.forgingSlot = void 0;\n\nvar forgingSlot = function forgingSlot(slots, block) {\n  return slots.getSlotNumber(block.timestamp);\n};\n\nexports.forgingSlot = forgingSlot;\n\nvar isBlockReceivedWithinForgingSlot = function isBlockReceivedWithinForgingSlot(slots, _ref) {\n  var timestamp = _ref.timestamp,\n      receivedAt = _ref.receivedAt;\n  return slots.isWithinTimeslot(slots.getSlotNumber(timestamp), receivedAt);\n};\n\nexports.isBlockReceivedWithinForgingSlot = isBlockReceivedWithinForgingSlot;\n\nvar isLastAppliedBlockReceivedWithinForgingSlot = function isLastAppliedBlockReceivedWithinForgingSlot(slots, lastAppliedBlock) {\n  if (!lastAppliedBlock.receivedAt) {\n    return true;\n  }\n\n  return exports.isBlockReceivedWithinForgingSlot(slots, lastAppliedBlock);\n};\n\nexports.isLastAppliedBlockReceivedWithinForgingSlot = isLastAppliedBlockReceivedWithinForgingSlot;\n\nvar isValidBlock = function isValidBlock(lastBlock, currentBlock) {\n  return lastBlock.height + 1 === currentBlock.height && lastBlock.id.equals(currentBlock.previousBlockID);\n};\n\nexports.isValidBlock = isValidBlock;\n\nvar isIdenticalBlock = function isIdenticalBlock(lastBlock, currentBlock) {\n  return lastBlock.id.equals(currentBlock.id);\n};\n\nexports.isIdenticalBlock = isIdenticalBlock;\n\nvar isDuplicateBlock = function isDuplicateBlock(lastBlock, currentBlock) {\n  return lastBlock.height === currentBlock.height && lastBlock.asset.maxHeightPrevoted === currentBlock.asset.maxHeightPrevoted && lastBlock.previousBlockID.equals(currentBlock.previousBlockID);\n};\n\nexports.isDuplicateBlock = isDuplicateBlock;\n\nvar isDoubleForging = function isDoubleForging(lastBlock, currentBlock) {\n  return exports.isDuplicateBlock(lastBlock, currentBlock) && lastBlock.generatorPublicKey.equals(currentBlock.generatorPublicKey);\n};\n\nexports.isDoubleForging = isDoubleForging;\n\nvar isTieBreak = function isTieBreak(_ref2) {\n  var slots = _ref2.slots,\n      lastAppliedBlock = _ref2.lastAppliedBlock,\n      receivedBlock = _ref2.receivedBlock;\n  return exports.isDuplicateBlock(lastAppliedBlock, receivedBlock) && exports.forgingSlot(slots, lastAppliedBlock) < exports.forgingSlot(slots, receivedBlock) && !exports.isLastAppliedBlockReceivedWithinForgingSlot(slots, lastAppliedBlock) && exports.isBlockReceivedWithinForgingSlot(slots, receivedBlock);\n};\n\nexports.isTieBreak = isTieBreak;\n\nvar isDifferentChain = function isDifferentChain(lastBlock, currentBlock) {\n  var maxHeightPrevoted = lastBlock.asset.maxHeightPrevoted || 0;\n  return maxHeightPrevoted < currentBlock.asset.maxHeightPrevoted || lastBlock.height < currentBlock.height && maxHeightPrevoted === currentBlock.asset.maxHeightPrevoted;\n};\n\nexports.isDifferentChain = isDifferentChain;","map":{"version":3,"sources":["../src/fork_choice_rule.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isDifferentChain = exports.isTieBreak = exports.isDoubleForging = exports.isDuplicateBlock = exports.isIdenticalBlock = exports.isValidBlock = exports.isLastAppliedBlockReceivedWithinForgingSlot = exports.isBlockReceivedWithinForgingSlot = exports.forgingSlot = void 0;\nconst forgingSlot = (slots, block) => slots.getSlotNumber(block.timestamp);\nexports.forgingSlot = forgingSlot;\nconst isBlockReceivedWithinForgingSlot = (slots, { timestamp, receivedAt }) => slots.isWithinTimeslot(slots.getSlotNumber(timestamp), receivedAt);\nexports.isBlockReceivedWithinForgingSlot = isBlockReceivedWithinForgingSlot;\nconst isLastAppliedBlockReceivedWithinForgingSlot = (slots, lastAppliedBlock) => {\n    if (!lastAppliedBlock.receivedAt) {\n        return true;\n    }\n    return exports.isBlockReceivedWithinForgingSlot(slots, lastAppliedBlock);\n};\nexports.isLastAppliedBlockReceivedWithinForgingSlot = isLastAppliedBlockReceivedWithinForgingSlot;\nconst isValidBlock = (lastBlock, currentBlock) => lastBlock.height + 1 === currentBlock.height && lastBlock.id.equals(currentBlock.previousBlockID);\nexports.isValidBlock = isValidBlock;\nconst isIdenticalBlock = (lastBlock, currentBlock) => lastBlock.id.equals(currentBlock.id);\nexports.isIdenticalBlock = isIdenticalBlock;\nconst isDuplicateBlock = (lastBlock, currentBlock) => lastBlock.height === currentBlock.height &&\n    lastBlock.asset.maxHeightPrevoted === currentBlock.asset.maxHeightPrevoted &&\n    lastBlock.previousBlockID.equals(currentBlock.previousBlockID);\nexports.isDuplicateBlock = isDuplicateBlock;\nconst isDoubleForging = (lastBlock, currentBlock) => exports.isDuplicateBlock(lastBlock, currentBlock) &&\n    lastBlock.generatorPublicKey.equals(currentBlock.generatorPublicKey);\nexports.isDoubleForging = isDoubleForging;\nconst isTieBreak = ({ slots, lastAppliedBlock, receivedBlock, }) => exports.isDuplicateBlock(lastAppliedBlock, receivedBlock) &&\n    exports.forgingSlot(slots, lastAppliedBlock) < exports.forgingSlot(slots, receivedBlock) &&\n    !exports.isLastAppliedBlockReceivedWithinForgingSlot(slots, lastAppliedBlock) &&\n    exports.isBlockReceivedWithinForgingSlot(slots, receivedBlock);\nexports.isTieBreak = isTieBreak;\nconst isDifferentChain = (lastBlock, currentBlock) => {\n    const maxHeightPrevoted = lastBlock.asset.maxHeightPrevoted || 0;\n    return (maxHeightPrevoted < currentBlock.asset.maxHeightPrevoted ||\n        (lastBlock.height < currentBlock.height &&\n            maxHeightPrevoted === currentBlock.asset.maxHeightPrevoted));\n};\nexports.isDifferentChain = isDifferentChain;\n//# sourceMappingURL=fork_choice_rule.js.map"]},"metadata":{},"sourceType":"script"}