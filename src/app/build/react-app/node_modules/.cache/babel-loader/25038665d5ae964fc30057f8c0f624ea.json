{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/lisk/doomonlisk/src/app/build/react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BufferSet = void 0;\n\nvar buffer_string_1 = require(\"./buffer_string\");\n\nvar cloneDeep = require(\"lodash.clonedeep\");\n\nvar BufferSet = /*#__PURE__*/function (_Symbol$iterator) {\n  function BufferSet(data) {\n    _classCallCheck(this, BufferSet);\n\n    this._data = {};\n    this._data = {};\n\n    if (data) {\n      var _iterator = _createForOfIteratorHelper(data),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var d = _step.value;\n          this.add(d);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }\n\n  _createClass(BufferSet, [{\n    key: \"delete\",\n    value: function _delete(key) {\n      delete this._data[buffer_string_1.keyString(key)];\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      this._data[buffer_string_1.keyString(value)] = value;\n    }\n  }, {\n    key: \"has\",\n    value: function has(value) {\n      return this._data[buffer_string_1.keyString(value)] !== undefined;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new BufferSet(cloneDeep(Object.values(this._data)));\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return Object.keys(this._data).length;\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      var index = -1;\n      var data = Object.values(this._data);\n      return {\n        next: function next() {\n          index += 1;\n          return {\n            value: data[index],\n            done: !(index in data)\n          };\n        }\n      };\n    }\n  }]);\n\n  return BufferSet;\n}(Symbol.iterator);\n\nexports.BufferSet = BufferSet;","map":{"version":3,"sources":["../../src/data_structures/buffer_set.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAaA,IAAA,eAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAGA,IAAA,SAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;IAEa,S;AAGZ,qBAAmB,IAAnB,EAAkC;AAAA;;AAF1B,SAAA,KAAA,GAAmC,EAAnC;AAGP,SAAK,KAAL,GAAa,EAAb;;AACA,QAAI,IAAJ,EAAU;AAAA,iDACO,IADP;AAAA;;AAAA;AACT,4DAAsB;AAAA,cAAX,CAAW;AACrB,eAAK,GAAL,CAAS,CAAT;AACA;AAHQ;AAAA;AAAA;AAAA;AAAA;AAIT;AACD;;;;WAEM,iBAAO,GAAP,EAAkB;AACxB,aAAO,KAAK,KAAL,CAAW,eAAA,CAAA,SAAA,CAAU,GAAV,CAAX,CAAP;AACA;;;WAEM,aAAI,KAAJ,EAAiB;AACvB,WAAK,KAAL,CAAW,eAAA,CAAA,SAAA,CAAU,KAAV,CAAX,IAA+B,KAA/B;AACA;;;WAEM,aAAI,KAAJ,EAAiB;AACvB,aAAO,KAAK,KAAL,CAAW,eAAA,CAAA,SAAA,CAAU,KAAV,CAAX,MAAiC,SAAxC;AACA;;;WAEM,iBAAK;AACX,aAAO,IAAI,SAAJ,CAAc,SAAS,CAAC,MAAM,CAAC,MAAP,CAAc,KAAK,KAAnB,CAAD,CAAvB,CAAP;AACA;;;SAED,eAAe;AACd,aAAO,MAAM,CAAC,IAAP,CAAY,KAAK,KAAjB,EAAwB,MAA/B;AACA;;;WAEM,iBAAiB;AACvB,UAAI,KAAK,GAAG,CAAC,CAAb;AACA,UAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAsB,KAAK,KAA3B,CAAb;AAEA,aAAO;AACN,QAAA,IAAI,EAAE,gBAAuC;AAC5C,UAAA,KAAK,IAAI,CAAT;AAEA,iBAAO;AACN,YAAA,KAAK,EAAE,IAAI,CAAC,KAAD,CADL;AAEN,YAAA,IAAI,EAAE,EAAE,KAAK,IAAI,IAAX;AAFA,WAAP;AAIA;AARK,OAAP;AAUA;;;;EAdO,MAAM,CAAC,Q;;AAhChB,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BufferSet = void 0;\nconst buffer_string_1 = require(\"./buffer_string\");\nconst cloneDeep = require(\"lodash.clonedeep\");\nclass BufferSet {\n    constructor(data) {\n        this._data = {};\n        this._data = {};\n        if (data) {\n            for (const d of data) {\n                this.add(d);\n            }\n        }\n    }\n    delete(key) {\n        delete this._data[buffer_string_1.keyString(key)];\n    }\n    add(value) {\n        this._data[buffer_string_1.keyString(value)] = value;\n    }\n    has(value) {\n        return this._data[buffer_string_1.keyString(value)] !== undefined;\n    }\n    clone() {\n        return new BufferSet(cloneDeep(Object.values(this._data)));\n    }\n    get size() {\n        return Object.keys(this._data).length;\n    }\n    [Symbol.iterator]() {\n        let index = -1;\n        const data = Object.values(this._data);\n        return {\n            next: () => {\n                index += 1;\n                return {\n                    value: data[index],\n                    done: !(index in data),\n                };\n            },\n        };\n    }\n}\nexports.BufferSet = BufferSet;\n//# sourceMappingURL=buffer_set.js.map"]},"metadata":{},"sourceType":"script"}