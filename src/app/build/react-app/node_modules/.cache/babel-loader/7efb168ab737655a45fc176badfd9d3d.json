{"ast":null,"code":"'use strict';\n\nvar u = require('universalify').fromCallback;\n\nvar path = require('path');\n\nvar fs = require('graceful-fs');\n\nvar mkdir = require('../mkdirs');\n\nfunction createFile(file, callback) {\n  function makeFile() {\n    fs.writeFile(file, '', function (err) {\n      if (err) return callback(err);\n      callback();\n    });\n  }\n\n  fs.stat(file, function (err, stats) {\n    // eslint-disable-line handle-callback-err\n    if (!err && stats.isFile()) return callback();\n    var dir = path.dirname(file);\n    fs.stat(dir, function (err, stats) {\n      if (err) {\n        // if the directory doesn't exist, make it\n        if (err.code === 'ENOENT') {\n          return mkdir.mkdirs(dir, function (err) {\n            if (err) return callback(err);\n            makeFile();\n          });\n        }\n\n        return callback(err);\n      }\n\n      if (stats.isDirectory()) makeFile();else {\n        // parent is not a directory\n        // This is just to cause an internal ENOTDIR error to be thrown\n        fs.readdir(dir, function (err) {\n          if (err) return callback(err);\n        });\n      }\n    });\n  });\n}\n\nfunction createFileSync(file) {\n  var stats;\n\n  try {\n    stats = fs.statSync(file);\n  } catch (_unused) {}\n\n  if (stats && stats.isFile()) return;\n  var dir = path.dirname(file);\n\n  try {\n    if (!fs.statSync(dir).isDirectory()) {\n      // parent is not a directory\n      // This is just to cause an internal ENOTDIR error to be thrown\n      fs.readdirSync(dir);\n    }\n  } catch (err) {\n    // If the stat call above failed because the directory doesn't exist, create it\n    if (err && err.code === 'ENOENT') mkdir.mkdirsSync(dir);else throw err;\n  }\n\n  fs.writeFileSync(file, '');\n}\n\nmodule.exports = {\n  createFile: u(createFile),\n  createFileSync: createFileSync\n};","map":{"version":3,"sources":["/home/lisk/doomonlisk/node_modules/@liskhq/lisk-framework-forger-plugin/node_modules/fs-extra/lib/ensure/file.js"],"names":["u","require","fromCallback","path","fs","mkdir","createFile","file","callback","makeFile","writeFile","err","stat","stats","isFile","dir","dirname","code","mkdirs","isDirectory","readdir","createFileSync","statSync","readdirSync","mkdirsSync","writeFileSync","module","exports"],"mappings":"AAAA;;AAEA,IAAMA,CAAC,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,YAAlC;;AACA,IAAMC,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,EAAE,GAAGH,OAAO,CAAC,aAAD,CAAlB;;AACA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,WAAD,CAArB;;AAEA,SAASK,UAAT,CAAqBC,IAArB,EAA2BC,QAA3B,EAAqC;AACnC,WAASC,QAAT,GAAqB;AACnBL,IAAAA,EAAE,CAACM,SAAH,CAAaH,IAAb,EAAmB,EAAnB,EAAuB,UAAAI,GAAG,EAAI;AAC5B,UAAIA,GAAJ,EAAS,OAAOH,QAAQ,CAACG,GAAD,CAAf;AACTH,MAAAA,QAAQ;AACT,KAHD;AAID;;AAEDJ,EAAAA,EAAE,CAACQ,IAAH,CAAQL,IAAR,EAAc,UAACI,GAAD,EAAME,KAAN,EAAgB;AAAE;AAC9B,QAAI,CAACF,GAAD,IAAQE,KAAK,CAACC,MAAN,EAAZ,EAA4B,OAAON,QAAQ,EAAf;AAC5B,QAAMO,GAAG,GAAGZ,IAAI,CAACa,OAAL,CAAaT,IAAb,CAAZ;AACAH,IAAAA,EAAE,CAACQ,IAAH,CAAQG,GAAR,EAAa,UAACJ,GAAD,EAAME,KAAN,EAAgB;AAC3B,UAAIF,GAAJ,EAAS;AACP;AACA,YAAIA,GAAG,CAACM,IAAJ,KAAa,QAAjB,EAA2B;AACzB,iBAAOZ,KAAK,CAACa,MAAN,CAAaH,GAAb,EAAkB,UAAAJ,GAAG,EAAI;AAC9B,gBAAIA,GAAJ,EAAS,OAAOH,QAAQ,CAACG,GAAD,CAAf;AACTF,YAAAA,QAAQ;AACT,WAHM,CAAP;AAID;;AACD,eAAOD,QAAQ,CAACG,GAAD,CAAf;AACD;;AAED,UAAIE,KAAK,CAACM,WAAN,EAAJ,EAAyBV,QAAQ,GAAjC,KACK;AACH;AACA;AACAL,QAAAA,EAAE,CAACgB,OAAH,CAAWL,GAAX,EAAgB,UAAAJ,GAAG,EAAI;AACrB,cAAIA,GAAJ,EAAS,OAAOH,QAAQ,CAACG,GAAD,CAAf;AACV,SAFD;AAGD;AACF,KApBD;AAqBD,GAxBD;AAyBD;;AAED,SAASU,cAAT,CAAyBd,IAAzB,EAA+B;AAC7B,MAAIM,KAAJ;;AACA,MAAI;AACFA,IAAAA,KAAK,GAAGT,EAAE,CAACkB,QAAH,CAAYf,IAAZ,CAAR;AACD,GAFD,CAEE,gBAAM,CAAE;;AACV,MAAIM,KAAK,IAAIA,KAAK,CAACC,MAAN,EAAb,EAA6B;AAE7B,MAAMC,GAAG,GAAGZ,IAAI,CAACa,OAAL,CAAaT,IAAb,CAAZ;;AACA,MAAI;AACF,QAAI,CAACH,EAAE,CAACkB,QAAH,CAAYP,GAAZ,EAAiBI,WAAjB,EAAL,EAAqC;AACnC;AACA;AACAf,MAAAA,EAAE,CAACmB,WAAH,CAAeR,GAAf;AACD;AACF,GAND,CAME,OAAOJ,GAAP,EAAY;AACZ;AACA,QAAIA,GAAG,IAAIA,GAAG,CAACM,IAAJ,KAAa,QAAxB,EAAkCZ,KAAK,CAACmB,UAAN,CAAiBT,GAAjB,EAAlC,KACK,MAAMJ,GAAN;AACN;;AAEDP,EAAAA,EAAE,CAACqB,aAAH,CAAiBlB,IAAjB,EAAuB,EAAvB;AACD;;AAEDmB,MAAM,CAACC,OAAP,GAAiB;AACfrB,EAAAA,UAAU,EAAEN,CAAC,CAACM,UAAD,CADE;AAEfe,EAAAA,cAAc,EAAdA;AAFe,CAAjB","sourcesContent":["'use strict'\n\nconst u = require('universalify').fromCallback\nconst path = require('path')\nconst fs = require('graceful-fs')\nconst mkdir = require('../mkdirs')\n\nfunction createFile (file, callback) {\n  function makeFile () {\n    fs.writeFile(file, '', err => {\n      if (err) return callback(err)\n      callback()\n    })\n  }\n\n  fs.stat(file, (err, stats) => { // eslint-disable-line handle-callback-err\n    if (!err && stats.isFile()) return callback()\n    const dir = path.dirname(file)\n    fs.stat(dir, (err, stats) => {\n      if (err) {\n        // if the directory doesn't exist, make it\n        if (err.code === 'ENOENT') {\n          return mkdir.mkdirs(dir, err => {\n            if (err) return callback(err)\n            makeFile()\n          })\n        }\n        return callback(err)\n      }\n\n      if (stats.isDirectory()) makeFile()\n      else {\n        // parent is not a directory\n        // This is just to cause an internal ENOTDIR error to be thrown\n        fs.readdir(dir, err => {\n          if (err) return callback(err)\n        })\n      }\n    })\n  })\n}\n\nfunction createFileSync (file) {\n  let stats\n  try {\n    stats = fs.statSync(file)\n  } catch {}\n  if (stats && stats.isFile()) return\n\n  const dir = path.dirname(file)\n  try {\n    if (!fs.statSync(dir).isDirectory()) {\n      // parent is not a directory\n      // This is just to cause an internal ENOTDIR error to be thrown\n      fs.readdirSync(dir)\n    }\n  } catch (err) {\n    // If the stat call above failed because the directory doesn't exist, create it\n    if (err && err.code === 'ENOENT') mkdir.mkdirsSync(dir)\n    else throw err\n  }\n\n  fs.writeFileSync(file, '')\n}\n\nmodule.exports = {\n  createFile: u(createFile),\n  createFileSync\n}\n"]},"metadata":{},"sourceType":"script"}